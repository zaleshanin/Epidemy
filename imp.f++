.apply(function() {
//impInit = function() {
    if(.tmp.epidemy==null)
.tmp.epidemy = .Map();

    if(.tmp.epidemy.impsList==null)
.tmp.epidemy.impsList = .List();

    this=.tmp.epidemy;

    if(triggers == null)
        triggers = .Map();

    if(emoteImpArray == null)
        emoteImpArray = .Array();

    if(emoteImpTargArray == null)
        emoteImpTargArray = .Array();

    triggers.impOnHit = function(demon_slayer, dam, damType, wield) {
        if(wield==null){
            for(ch in .players) {
                if(ch.in_room==in_room) {
                    ch.act('%1$^C1 корчится и кричит от боли.',this);
                } else if (ch.in_room.areaname == in_room.areaname){
                    ch.act('До тебя доносятся нечеловеческие крики боли %1$C2.',this);
                }
            }
        }else {
            for(ch in in_room.ppl) {
                ch.act('%1$^O1 оставляет глубокие раны на теле %2$C2.',wield,this);
            }
        }
    };
    /*onImmune скопирован из demon*/
    triggers.impOnImmune = function(attacker, dam, damType, wield, dam_flag, skillName) {
        if (damType == 'holy') {
            return dam * 25;
        }

        if(wield!=null) {
            if(wield.value4&.tables.weapon_type2.holy) {
                return dam * 35;
            }
            if(wield.extra_flags&.tables.extra_flags.bless) {
                if(wield.extra_flags&.tables.extra_flags.evil) return 0;
                if(wield.extra_flags&.tables.extra_flags.anti_good) return 0;
                return dam * 10;
            }
        }

        return 0;
    };
    triggers.impOnExtract = function(mob,count) {
        this = .tmp.epidemy;
        //выпиливаемся из списка
        impsList.sub(mob);
        if(mob.postSpec!=null && .tmp.epidemy.impsList.size()>0)
            impsList.random().postSpec = function(){.tmp.epidemy.triggers.impPostSpec(this);};
        check_stop();
    };
    triggers.impPostSpec = function (imp) {
        this = .tmp.epidemy;
        for(imp in impsList) {

            if(imp.dead) {
                impsList.sub(imp);
                continue;
            }

            if(imp.epidemy==null) {
                imp.clear();
                impsList.sub(imp);
                continue;
            }

            triggers.impEngine(imp);
        }
    };
    triggers.impEngine = function (imp) {
        this = .tmp.epidemy;

        try {
//            debug(imp,'impPostSpec.');
            if(imp.dead) {
                impsList.sub(imp);
                return;}

            if(imp.epidemy==null) {
                imp.clear();
                impsList.sub(imp);
                throw(.fmt('imp(%C[%d]):NO epidemy Map\n',imp,imp.in_room.vnum));
            }

            if(imp.epidemy.victims==null) {
                getVictims(imp);
            }
            if(imp.epidemy.cowards==null) {
                imp.epidemy.cowards = getCowards(imp);
            }

            if(imp.epidemy.plan != null && imp.epidemy.plan >= 1 && imp.epidemy.plan_room==null) {
                imp.epidemy.plan = null;
            }

            if(imp.epidemy.plan == null) {
                imp.epidemy.plan = plan_check(imp);
            }

            if(imp.epidemy.plan == 2 && imp.epidemy.plan_room!=imp.in_room) {
                imp.epidemy.plan = 1;
            }
            if(imp.epidemy.plan == 1 && imp.epidemy.plan_room==imp.in_room) {
                imp.epidemy.plan = null;
            }

            if(imp.epidemy.plan == 3) {
                //бывает что какая-то зверюга убегает в последний момент
                imp.epidemy.plan = plan_check(imp);
                //и если план без изменений
                if(imp.epidemy.plan == 3) {
                    var demon_room, invader;

                    demon_room = imp.in_room;
                    invader = imp.epidemy.invader;
                    //взорвать всех зверюг в комнате
                    explode_in_room(demon_room);
                    //вызывать демона
                    get_one_demon(demon_room,invader);
                    return;
                }
            }

            //чертяка-кусака!
            if(imp.epidemy.victims.size() && .chance(10)) {
                debug('impPostSpec: кусака',imp);
                //кусаем если есть кого
                bite(imp);
                return;
            }

            //чертяка-пугака
            if(imp.epidemy.cowards.size() && .chance(50)) {
//                debug(imp, 'impPostSpec: has a cowards');
                var vict;
                vict = imp.epidemy.cowards.random();

                fearYou(imp, vict);

                return;
            }


            //чертяка-гуляка!
            /*plan:
            * 0 - ты не последний зараженный
            * 1 - все заражены - собираемся до кучи
            * 2 - ты в куче, ждем остальных
            * 3 - я последний - вызываем "КРАКЕНА"
            */
            if(imp.epidemy.plan==1 && .chance(50)) {
//                debug(imp, 'impPostSpec: гуляка');
                if(!(imp.position&.tables.position_table.stand)){
                    imp.interpret('stand');
                    return;
                }
                if(imp.epidemy.plan_room==null)
                    throw('imp-гуляка '+name+':plan_room==null;in_room:'+in_room.name+'('+in_room.vnum+')\n');

                if(imp.epidemy.plan_way==null) {
                    if(!imp.epidemy.plan_room.isCommon()) {
                        imp.epidemy.plan = null;
                        imp.epidemy.plan_room = null;
                        //return;
                    } else {
                        //ищем путь
                        imp.interpret('ponder');
                        imp.epidemy.plan_way = find_way(imp,imp.epidemy.plan_room);
                        if(imp.epidemy.plan_way.size()>0){
                            imp.epidemy.plan_waypoint = imp.in_room;
                            return;
                        } /*else {
								//беда! пустой маршрут!
							}*/
                    }
                } else if(imp.epidemy.plan_nextroom == null) {
                    make_your_move(imp);
                } else if (imp.epidemy.plan_waypoint!=imp.in_room) { //сбились с маршрута
                    imp.epidemy.plan_waypoint = null;
                    imp.epidemy.plan_nextroom = null;
                    imp.epidemy.plan_way = null;
                } else { //маршрут есть и мы с него не сбились
                    if(.chance(20)) {
                        var exitDoor;
                        exitDoor = imp.in_room.doorTo(imp.epidemy.plan_nextroom);

                        if(imp.in_room.getExitFlags(exitDoor) & .tables.exit_flags.closed) {

                            if(.chanceOneOf(3))
                            {
                                imp.recho('%1$^C1 скребет когтями %2$N4. Тщетно.',imp, in_room.exitShortDescr(exitDoor));
                            }
                        else if (.chanceOneOf(2))
                            {
                                var ppllist, sucker;
                                ppllist = in_room.ppl.clone();
                                ppllist.sub(this);
                                if(ppllist.size()>0) {
                                    sucker = ppllist.random();
                                    sucker.recho('%1$^C1 садится перед %2$N5, и жалобно смотрит в глаза %3$C3.',imp, in_room.exitShortDescr(exitDoor), sucker);
                                    sucker.act('%1$^C1 садится перед %2$N5, и жалобно смотрит тебе в глаза.',imp, in_room.exitShortDescr(exitDoor));
                                } else {
                                    imp.recho('%1$^C1 садится перед %2$N5, и жалобно хнычет.',imp, in_room.exitShortDescr(exitDoor));
                                }
                            }
                        else
                            {
                                imp.recho('%1$C1 бубтин себе под нос \'Всё приходится делать само%1$Gму|му|й.\'',imp);
                                imp.interpret('open '+in_room.doorName(exitDoor));
                            }

                            return;
                        } else {
                            make_your_move(imp);

                            return;
                        }


                    }
                }
            }

            //чертяка-кривляка!
            if(.chance(5)) {
                imp.interpret(.List().add('buff', 'cheer', 'curse', 'flare', 'giggle', 'grin', 'glare', 'highfive', 'hop', 'innocent', 'lick', 'mischievous', 'smirk', 'snicker', 'snort').random());
                return;
            }

        } catch(e){
        .tmp.epidemy.catchMsg(e);
        }
    };
    triggers.impOnAttack = function(imp,ch,vict) {
        if(!imp.epidemy.fearList.has(ch))
            imp.epidemy.fearList.push_back(ch);
    };
    triggers.impOnLeaveEntryGreet = function(imp){
        this = .tmp.epidemy;
        debug('impOnLeaveEntryGreet',imp);
        triggers.sickOnLeaveEntryGreet(imp);
        imp.epidemy.cowards=null;
    };
    /*triggers.impOnEntry = function(imp){
        this = .tmp.epidemy;
        debug(imp,'onEntry');
        triggers.sickOnEntry(imp);
        imp.epidemy.cowards=null;
    };*/
/*
    triggers.impOnGreet = function(imp, ch){
    .tmp.epidemy.debug('onGreet '+ch.name,imp);
    .tmp.epidemy.triggers.sickOnGreet(imp, ch);
        imp.epidemy.cowards=null;
    };
*/
    triggers.impOnDeath = function(imp, ch) {
        this = .tmp.epidemy;
        var chMaster;
        chMaster = getChMaster(ch);
        if(chMaster!=null){
            regChar(chMaster);
            regStat(chMaster.name, 'imp_slay');
            check_reward(chMaster.name, 'imp_slay');
        }
    };

    initImp = function(mob) {
        this = .tmp.epidemy;

        //заносим в список как зараженного
        if(mob.epidemy==null)
            mob.epidemy = .Map();
        //mob.epidemy.infected = true;
        mob.epidemy.fearList = .List();
        mob.epidemy.status = 'imp';

        if(impsList==null)
            impsList=.List();

        impsList.push_back(mob);

        //заполняем тригера
        mob.onHit = .tmp.epidemy.triggers.impOnHit;
        mob.onImmune = .tmp.epidemy.triggers.impOnImmune;
        if(impsList.size()==1)
            mob.postSpec = function(){.tmp.epidemy.triggers.impPostSpec(this);};
        //подходят тригеры от фидошек:
        mob.onDeath = function(ch){.tmp.epidemy.triggers.impOnDeath(this,ch);};
        mob.onExtract = function(count){.tmp.epidemy.triggers.impOnExtract(this,count);};
        mob.onLeave = function(ch, from_room, movetype){.tmp.epidemy.triggers.impOnLeaveEntryGreet(this);};
        mob.onEntry = function(){.tmp.epidemy.triggers.impOnLeaveEntryGreet(this);};
        mob.onGreet = function(ch){.tmp.epidemy.triggers.impOnLeaveEntryGreet(this);};
        mob.onAttack = function(ch,vict) {.tmp.epidemy.triggers.impOnAttack(this,ch,vict);};

        /*
     dodge fade fast kick_dirt tail disarm trip
    */
        mob.off_flags = .set_bit(mob.off_flags, .tables.off_flags.dodge);
        mob.off_flags = .set_bit(mob.off_flags, .tables.off_flags.fade);
        mob.off_flags = .set_bit(mob.off_flags, .tables.off_flags.fast);
        mob.off_flags = .set_bit(mob.off_flags, .tables.off_flags.kick_dirt);
        mob.off_flags = .set_bit(mob.off_flags, .tables.off_flags.tail);
        mob.off_flags = .set_bit(mob.off_flags, .tables.off_flags.disarm);
        mob.off_flags = .set_bit(mob.off_flags, .tables.off_flags.trip);
        mob.off_flags = .set_bit(mob.off_flags, .tables.off_flags.tail);

        mob.alignment = -1000;
        //demon.off_flags = .set_bit(demon.off_flags, .tables.off_flags.tail);

        if(getRandomHelpPiece!=null)
            getRandomHelpPiece().obj_to_char(mob);

    };

    fearYou = function(imp, ch) {
        if(ch.dead || !ch.online)
            return;

        var fear;
        //([skill[,level,duration,location,mod,where,bits]])
        fear = .Affect("fear",              //skill
            ch.getModifyLevel(),            //level
            .number_range(0, 2),            //duration
            0, 0,                           //location,mod
    .tables.affwhere_flags.detects, //where
    .tables.detect_flags.fear);     //bits

        if (ch.isAffected(fear.type))
            return;

        ch.affectAdd(fear);

        var fearWord;
        fearWord = str_utterance(.List().add('GET OUTTA HERE MAN SHIET','get out of here','uidi ot syuda','ubiraisya proch po dobru po zdorovu','ubiraisya','nafig s plyazha','go away','begone').random());
        ch.act("%1$^C1 страшным заклинанием '{g"+fearWord+"!{x' повергает тебя в ужас!", imp);
        imp.rvecho(ch, "%1$^C1 страшным заклинанием '{g"+fearWord+"!{x' повергает %2$C4 в ужас!", imp, ch);

        var escapeRooms, escape;
        escapeRooms = getEscapeRooms(ch);

        if(escapeRooms.size()>0) {
            escape = ch.in_room.doorTo(escapeRooms.random());

            if(ch.in_room.getExitFlags(escape) & .tables.exit_flags.closed) {
                ch.interpret('open '+ch.in_room.doorName(escape));
            }
        }

        if(escape==null || !ch.move_char(escape,'running')){
            ch.act("Ты пытаешься убежать, но не находишь выхода!");
            ch.recho("%1$^C1 пытается убежать, но не находит выхода.", ch);
        } else {
            ch.act("Ты убегаешь.");
        }



    };
    getEscapeRooms = function(ch) {
        var result;
        result = .List();

        for(exit in .List().add(ch.in_room.north,ch.in_room.east,ch.in_room.south,ch.in_room.west,ch.in_room.up,ch.in_room.down)) {
            if(exit==null)
                continue;

            var door;
            door = ch.in_room.doorTo(exit);
            if(ch.in_room.getExitFlags(door) & .tables.exit_flags.locked)
            continue;

            result.push_back(exit);
        }

        return result;
    };

    getCowards = function(imp) {
    .tmp.epidemy.debug('imp: getCovards()',imp);
        var result;
        result = .List();
        if(imp.epidemy.fearList.size()==0)
            return result;

        for(coward in imp.epidemy.fearList) {
            if(imp.in_room.ppl.has(coward)){
                result.push_back(coward);
            }
        }

        return result;
    };

    /*
     dodge fade fast kick_dirt tail disarm trip
    */

    /*
        var fillEmotes;
        fillEmotes = function(){
            this = .tmp.epidemy;

            //массивы социалов для чертят/бесят
            emoteArray = .Array();
            emoteArray[0] = 'buff';  emoteArray[1] = 'cheer'; //??
            emoteArray[2] = 'curse';  emoteArray[3] = 'flare';
            emoteArray[4] = 'giggle';  emoteArray[5] = 'grin';
            emoteArray[6] = 'glare';  emoteArray[7] = 'highfive';
            emoteArray[8] = 'hop';  emoteArray[9] = 'innocent';
            emoteArray[10] = 'lick';  emoteArray[11] = 'mischievous';
            emoteArray[12] = 'smirk';  emoteArray[13] = 'snicker';
            emoteArray[14] = 'snort';

            emoteTargArray = .Array();
            /!*emoteTargArray[0] = "flare";
            emoteTargArray[1] = "giggle";*!/
        };
        fillEmotes();
    */

    imp_list = .List();
    imp_list.push_back(.get_mob_index(18608));
    imp_list.push_back(.get_mob_index(9236));
    imp_list.push_back(.get_mob_index(6309));

})
//импрув моба: https://github.com/dreamland-mud/dreamland_code/blob/master/plug-ins/fight/fight_exp.cpp


/*
[10][6309][Арахнос][quasit бес мелкий][Бесенок (quasit), мерцая, ухмыляется тебе.]
	Align:  [ 1000]
	Act: [npc scavenger wimpy] (? act_flags)
	Aff: [invisible sneak]
	Det: [invis]
	Off:  [disarm dodge trip assist_vnum]
	Size: [medium]
[5][9236][Каньон Стихий][imp чертенок][Маленький чертенок (imp) бегает раздраженным.]
	Align:  [ -500]
	Act: [npc scavenger stay_area wimpy] (? act_flags)
	Aff: [sneak hide] (? affect_flags)
	Off:  [disarm dodge trip assist_vnum] (? off_flags)
	Size: [medium]
[3][18608][Зона Новичков][quasit imp thing чертенок квазит][Забавный чертенок (imp) (возможно, это квазит?), шхерится по углам.]
	Align:  [ -800]
	Act: [npc scavenger stay_area wimpy] (? act_flags)
	Aff: [sneak] (? affect_flags)
	Off:  [fast] (? off_flags)
	Size: [medium] (? size_table)
*/

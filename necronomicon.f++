.apply(function() {
//bookInit = function() {
    if(.tmp.epidemy==null)
        .tmp.epidemy = .Map();

    this = .tmp.epidemy;

    if(triggers==null) triggers = .Map();
    if(Necronomicon==null) Necronomicon = .get_obj_index(732);

    Necronomicon.onExtraDescr = function(book, ch, str) {
        //onExtraDescr(ch,str) - возвращает строку, которую надо показать чару ch,
        // при взгляде на экстра-дескр str. Если вернуть пустую строку, продолжится
        // поиск другого экстра-деска, иначе -- покажет то что мы вернули, и оборвет поиск.
        this = .tmp.epidemy;
        debug(.fmt('onExtra(ch:%C1,srt:%s)',ch,str),null);

        if(book.epidemy.isLorem==null)
            book.epidemy.isLorem=0;
        this = .tmp.epidemy;
        var result, ritual, tstr, page, wnum;
        var cwk, aWk;
        result = '';
        if(book.epidemy==null) {
            debug('empty epidemy on necronomicon!!!');
            return result;
        }

        debug(.fmt('before page: %s',str),null);
        if(str.match("[a-zа-я]+([0-9]+)")) {
            page = str.matchGroups("[a-zа-я]+([0-9]+)").at(0);
            str = str.replace(page,'');
            page = 0+page;
            debug(.fmt('page: %s page:%d wnum:%d',str,page,wnum),null);
        } else {
            page = 1;
            debug('page: default - 1',null);
        }
        debug(.fmt('before wnum: %s',str),null);
        if(str.match("[0-9]{1}\.[a-zа-я]+")) {
            wnum = str.matchGroups("([0-9]{1})\.[a-zа-я]+").at(0);
            str = str.replace(wnum+'.','');
            wnum = 0 + wnum - 1;
            debug(.fmt('wnum: %s page:%d wnum:%d',str,page,wnum),null);
        } else {
            wnum = 0;
            debug('wnum: default - 0',null);
        }

        var isBook, isNecronomicon, isRitual, isClosed, isWarlock, isSpells, isHistory, isStatistic, isNotes, isLorem, isInvader;
        isBook=false; isClosed=false; isLorem = book.epidemy.isLorem; isInvader = (ch.clan.name=='invader');
        isNecronomicon=false; isRitual=false;  isWarlock=false; isSpells=false; isHistory=false; isStatistic=false; isNotes = false;
        if(book.value1&.tables.container_flags.closed) {isClosed = true;}
        if('Necronomicon necronomicon book grimoire гримуар древний книга мертвых некрономикон'.match('(^| )'+str)) {
            isNecronomicon = true;
        } else if('ritual demon summon ритуал призыва демона Lorem lorem ipsum dolor sit amet лорем'.match('(^| )'+str)){
            isRitual = true;
        } else if('warlock mage necromant necromancer чернокнижник колдун некромант)'.match('(^| )'+str)) {
            isWarlock = true;
        } else if ('spells заклятия'.match('(^| )'+str)) {
            isSpells = true;
        } else if('history история'.match('(^| )'+str)) {
            isHistory = true;
        } else if('statistic статистика'.match('(^| )'+str)){
            isStatistic=true;
        } else if('notes заметки заметка'.match('(^| )'+str)){
            isNotes=true;
        }

        if(isNecronomicon == false && isClosed) {
            return result; //если книга закрыта и не смотрим на некрономикон - ничего не показываем
        }

        if(isNecronomicon) {
            if(isClosed) {
                isBook = true; //некрономикон закрыт - показываем обложку
            } else {
                if(!isLorem) {
                    isRitual = true; //фрагменты не собраны, показываем несобранный ритуал
                }
            }
        } else {
            if(!isLorem) {
                //книга не востановлена, по ключевым словам ничего не показываем кроме ритуала и варлоков
                isSpells=false; isHistory=false; isStatistic=false; isNotes=false;
            }
        }
        if(!isInvader) {
            //не Инвайдеру по ключевым словам ничего не показываем
            isRitual=false;  isWarlock=false; isSpells=false; isHistory=false; isStatistic=false; isNotes=false;
        }

        if(isBook) {
            //показываем обложку прописаную в прототипе
            return result;
        }

        if(isRitual || isWarlock) {
            if(isInvader) {
                restockLoremPieces(book);
            }
        }
        if(isNecronomicon) {
            if(isInvader) {
                result ='   Теперь, когда целостность книги востановлена, ты обращаешь внимание, что на\n' +
                    '   заглавной странице имеется содержание.  Среди  пунктов  написаных  древними\n' +
                    '   символами, ты можешь разобрать всего несколько пунктов:\n' +
                    '       - Ритуал вызова Демонов "{DL{ror{De{rm ip{Dsu{rm dol{Dor {rsi{Dt {Ra{Dme{rt{x" ({D{hc{lrсм ритуал{lelook ritual{x)\n' +
                    '       - Прочие заклятия ({D{hc{lrсм заклятия{lelook spells{x)\n' +
                    '       - История Захвата Мира Захватчиками ({D{h{lrcсм история{lelook history{x)\n' +
                    '       - Занимательная статистика ({D{hc{lrсм статистика{lelook statistic{x) Захвата Мира Захватчиками\n' +
                    '       - Заметки {DТемного Властелина{x ({D{hc{lrсм заметки{lelook notes{x)\n' +
                    '\n' +
                    '   На странице еще множество пунктов, но ты пока можешь прочесть только эти.\n' +
                    '   Возможно когда-нибудь...';
            } else {
                result = 'Вся книга написана на странном, незнакомом тебе языке.\nЕдинственное, что ты можешь разобрать -  рисунки.  На  рисунках  преобладают\nизображения всевозможной нечисти. Однако встречаются и изображения  каких-то\nорганов, частей тела, растений, котлов. Возможно это просто поваренная книга\nдля желающих отведать экзотической кухни.';

            }
        }

        if(isRitual) {
            ritual = '\n' +
                '               {rК{RАК П{rРА{DВИ{dТЬ {RМИ{rРОМ {DНЕ {dП{RРИВ{rЛЕК{DАЯ ВН{RИ{rМАНИЯ {WР{wЫ{WЦАРЕЙ\n' +
                '\n' +
                '{r  В {Dночь Лжи{r в месяц {DВеликого Зла{r в {DТёмном храме{r срединного города  положи  {Dчёрный\n' +
                '  цветок{r, {Dгорсть чёрного пепла{r и {Dплитку чёрного шоколада{R (без него  вообще  никак)\n'
                + '{r  в жертвенник перед алтарём.\n' +
                '\n' +
                '  Призови {DТёмные Силы{r произнеся заклинание {R(смотри ниже){r. \n' +
                '\n' +
                '  Забери цветок. Посей зерно {DТьмы{r в мелкое кровожадное существо-падальщика в любом\n' +
                '  из городов. Дождись когда все существа будут под властью {DЗла{r. Узри появление {DДемона{r,\n' +
                '  который принесёт в город {DТьму{r, и поможет присоединить его территорию к {DИмперии Зла{r.{x\n' +
                '\n' ;

            if(isLorem) {
                    //видим весь ритуал
                result =
'  Верхний угол страницы украшен изображением Демона. Ритуал описанный ниже\n' +
'  позволяет вызвать нечисть истребляющую {Wдобрых{x существ и обращающую их в {Dзлых{x.\n' +
'  Описание дано намёками, можешь попытаться разобраться самостоятельно, либо\n' +
'  прочитать заметки одного из {DТемных Властелинов{x, переписанные в твой \n' +
'  экземпляр Некрономикона Гортхауром ({D{hc{lrсм заметки{lelook notes{x.)\n' +
'  Судя по всему ритуал написан кровью (может и чернилами, но ты уверен{Sfа{x что {rкровью{x): \n'+
                    ritual +
                    '  Ниже под, погасшими изображениями чернокнижников и некромантов, написано заклинание:\n' +
                    '                       "{DL{ror{De{rm ip{Dsu{rm dol{Dor {rsi{Dt {Ra{Dme{rt{x"';

            }
            else {
                //видим часть ритуала (заклинание не найдено, в книгу не вставлено)
                cwk = count_wk(ch.name);
                result =
                    '  В верхнем углу единственная страница, на которой ты можешь что-то прочесть,\n' +
                    '  украшена изображением Демона. Ниже идёт описание ритуала, позволяющего призвать\n' +
                    '  нечесть с нижних планов, чтобы обратить {Wдобрых{x существ в {Dзлых{x. Нижняя часть\n' +
                    '  страницы отсутствует, и ты чувствуешь, что если найти недостающие части, тебе \n' +
                    '  откроется нечто большее.\n' +
                    '  Судя по всему ритуал написан кровью (может и чернилами, но ты уверен{Sfа{x что {rкровью{x): \n' +
                    ritual +
                    '  Нижняя часть страницы оторвана, возможно именно там было написано заклинание.\n' +
                    '  Над разрывом нарисованы пять фигур чернокнижников и некромантов.\n';
                if(cwk==5){
                    result = result + '  Изображения светятся и выглядят как живые.';
                } else if (cwk < 5) {
                    if( cwk == 0 ) {
                        result  = result + '  Изображения темных магов выглядят потухшими и безжизненными.';
                    }else if( cwk == 1 ) {
                        result = result + '  Одно из изображений продолжает светиться и выглядит как живое.';
                    } else {
                        if( cwk == 2 ) {
                            tstr = '  Два';
                        } else if( cwk == 3 ) {
                            tstr = '  Три';
                        } else if( cwk == 4 ) {
                            tstr = '  Четыре';
                        }
                        result = result + tstr + ' из которых продолжают светиться и выглядят как живые.';
                    }
                }
                if(cwk>0)
                    result = result + ' Надо бы разглядеть повнимательнее...\n  ({D{hc{lrсм чернокнижник{lelook warlock{x или {D{hc{lrсм некромант{lelook necromancer{x)';

                var c,i,l;
                c = book.items.size();
                if(c>0) {
                    result = result + '\n  Под разрывом ';
                    if(c==1) {
                        result = result + 'лежит клочок бумаги с надписью "{D'+book.items.back().epidemy.spellName+'{x".';
                    } else {
                        result = result + 'лежат клочки бумаги с надписями ';
                        l = book.items.clone();
                        for(i=0;i<c;i=i+1) {
                            if(i==0) {
                                result = result + '"{D'+l.back().epidemy.spellName+'{x"';

                            } else {
                                if(i==c-1) {
                                    result = result + ' и "{D'+l.back().epidemy.spellName+'{x"';
                                } else {
                                    result = result + ', "{D'+l.back().epidemy.spellName+'{x"';
                                }
                            }
                            if(i==c-1)
                                result = result + '.';
                            l.pop_back();
                        }
                    }
                }
            }

        }

        if(isWarlock) {
            aWk = get_wk_array(ch.name); //получаем список магов с нашими бумажками
            if(aWk.size()==0 || book.epidemy.isLorem) {
                result  = 'Ты тщательно вглядываешься в рисунки на странице:\nИзображения темных магов выглядят потухшами и безжизненными.';
            } else {
                result = 'Ты тщательно вглядываешься в изображение';

                /*//бумажка на руках

                if(aWk[wnum]['found']=='self') {
                    //костыль, убрать когда можно будет делать look 4.warlock
                    for(key in aWk) {
                        if(aWk[key]['found']!='self') {
                            wnum = key;
                            break;
                        }
                    }
                }*/

                if(aWk[wnum]['found']=='carrier') {
                    //наш маг из списка
                    if(warlocksList.has(aWk[wnum]['link'])) {
                        if(aWk[wnum]['link'].act&.tables.act_flags.mage)
                        result = result + ' {Dчернокнижника{x.\n';
                    else if(aWk[wnum]['link'].act&.tables.act_flags.necromancer)
                        result = result + ' {Dнекроманта{x.\n';

                        result = result + aWk[wnum]['link'].description;

                        result = result + '{DТемный маг{x';
                    } else {
                        result = result + ', но это не темный маг, а '
                            + .fmt('%1$C1',aWk[wnum]['link']) + '\n';

                        result = result + .fmt('%1$C1',aWk[wnum]['link']);
                    }
                    result = result + ' находится в месте под названием'
                        +' "{W'+aWk[wnum]['link'].in_room.name+'{x".';
                }
                if(aWk[wnum]['found']=='room') {
                    result = result + ', но ты не видишь {Dтёмного мага{x.\n'
                        + ' '+aWk[wnum]['link'].description + '\n'
                        + '{G     Клочок бумаги с магическими символами лежит здесь.{x';
                }
            }
        }

        if(isSpells) {
            result ='На странице готическим шрифтом записаны заклятия и пояснения к ним.\n' +
                'Часть из них ты можешь прочесть уже сейчас:\n' +
                '\n' +
                ' {DL{ror{De{rm ip{Dsu{rm dol{Dor {rsi{Dt {Ra{Dme{rt{x - Произносится в нужном месте, в нужное время  для\n' +
                ' получения частицы {DТьмы{x. ({D{hcсм ритуал{x)\n' +
                '\n' +
                ' {DTempus Eos Colligendi{x - Заклятие возвращающее {DДемона{x и его {DЛегионы{x  обратно в\n' +
                ' преисподнюю.\n' +
                '\n' +
                ' {DMens Sana In Corpore Sano{x - Заклятие забирающее частицу {DТьмы{x из  одержимого в\n' +
                ' Книгу.\n' +
                '\n' +
                ' {DTempus Spargendi Lapides{x - Заклятие помещающее частицу {DТьмы{x из Книги в мелкое\n ' +
                'существо - городского падальщика.\n' +
                '\n' +
                'Помни, ' + .fmt('%1$C1',ch) + ', что все заклятия должны произноситься с Книгой в руках.\n';

        }

        if(isHistory) {
            if(history.size()==0) {
                result = 'Страницы истории пусты. ' +
                    'Возможно, кто-то что-то должен сделать, чтоб вписать своё имя в Историю Захватчиков.\n' +
                    'Может быть ты?\n';
            }
            else {
                var pages, rest, i, rec_per_page;
                i=0;  rec_per_page=10;

                pages = history.size()/rec_per_page;
                rest = history.size()%rec_per_page;

                if(rest!=0) pages = pages + 1;

                if(page <= pages) {
                    result = 'Кажется, что записи на этих страницах появляются сами собой.\n' +
                        'Возможно и ты сможешь попасть в Историю.\n\n' +
                        'Страница Истории '+page+'\n\n';

                    for(h in history) {
                        i=i+1;
                        if(i/rec_per_page == page) {
                            result = result + h.format(80) + '\n';
                        }
                    }
                    if(page == pages) {
                        //history last page
                        result = result +
                            'На этом записи обрываются. Возможно пришло время тебе дополнить Историю Захватчиков?\n';
                        if(pages>1){
                            //history have some page
                            result = result +
                                'Ты можешь начать читать Историю с начала ({hcсм история1{x)';
                            if(pages==2) {result = result + '.\n';}
                            else {
                                //more than 2 page
                                result = result + '\n' +
                                    (.fmt('или вернуться к предыдущей странице ({hcсм история%d{x)',page-1));
                            }
                        }
                    } else {
                        //not a last page
                        if(pages!=1) {
                            result = result +
                                (.fmt('Ты можешь прочитать следующую страницу Истории ({hcсм история%d{x)',page+1));
                        }
                        if(page==1) {
                            if(pages>1) {
                                result = result + '\n' +
                                    (.fmt('или перейти сразу к последней странице ({hcсм история%d{x).',pages));
                            } else {
                                result = result +
                                    '.\n';
                            }
                        }
                        else if(page!=1) {
                            result = result + '\n' +
                                (.fmt('или вернуться к предыдущей ({hcсм история%d{x).\n',page-1));
                        }
                    }
                } else {
                    if(pages==1) {
                        result = result + 'В книге всего одна страница Истории ({hcсм история1{x)';
                    } else if (pages==2) {
                        result = result + 'В книге всего две страницы Истории ({hcсм история1{x, {hcсм история2{x)';
                    } else {
                        result = result + .fmt('В книге всего %1$d страниц%1$Iа|ы| Истории ({hcсм история1{x, {hcсм история%1$d{x)',pages);

                    }
                }

            }
        }

        if(isStatistic) {
            result = showStat();
        }

        if(isNotes) {
            result =
' Ты открываешь  страницу  с  заметками  {DТемного Властелина{x  посвященных  ритуалу\n' +
' "{DL{ror{De{rm ip{Dsu{rm dol{Dor {rsi{Dt {Ra{Dme{rt{x", оставленных им когда он понял, что не  все  члены\n' +
' клана Захватчиков умны  как  маги  Шалафи,  некоторые,  как  оказалось,  просто\n' +
' сильные как воины клана Ярости, а некоторые даже не сильные... а просто...\n' +
' и всё равно не обошлось без намёков.' +
'\n' +
'  {DКомпоненты:{x\n' +
'  - {Dчёрный цветок{x - {cнастоящий {DЗахватчик{c обязан знать, из  какого  черепа  ангела, \n' +
'    невыходя из {CНеизвестной земли{c, достать {Dчерную розу{x.\n' +
'  - {Dплитка чёрного шоколада{x - {cкаждый {DЗахватчик{c знает,  что самый  {Dчёрный шоколад{c\n' +
'    можно найти только на {CШоколадной фабрике{c в {CМагазинчике сладостей{c, в нём  всё\n' +
'    прекрасно, и даже {Dчёрный перец{x.{c Почти каждому {DЗахватчику{c  известно,  что  не\n' +
'    менее {Dчёрный шоколад{c можно раздобыть в {CКондитерском Магазине Долины  Титанов{c.\n' +
'    И конечно некоторым  {DЗахватчикам{c  повезло,  и  они  заимели  {Dчёрный  шоколад{C\n' +
'    Внутри {RФ{Yи{Gг{CВ{cа{Mм{Wа{x. \n' +
'  - {Dгорсть чёрного пепла{x - {cабсолютно все {DЗахватчики{c знают, что используя  спички\n' +
'    или факел и что-нибудь ненужное, можно получить костёр,  а  подождав,  когда\n' +
'    пламя угаснет, поднять оставшийся {Dпепел{c. Конечно же, всякий {DЗахватчик{c помнит,\n' +
'    что ничто не вечно, и  {Dчёрный  пепел{c  достаточно  быстро  исчезнет  -  нужно\n' +
'    позаботиться, чтобы это не произошло до завершения ритуала.\n' +
'  {DМесто действия:{x\n' +
'  - {DТемный Храм {CСрединного города{x - {cв ходе долгих странствий, мне удалось  найти\n' +
'    маршрут к от {CНеизвестной земли{c до указанного места: войди в  {Wбелый {Dпортал{c  в\n' +
'    пещере с {CПентаграммой{c, а дальше уже совсем близко:\n' +
'    {Cn6ed6e7u2eneuSwnu2s2e2s3ws2e{x\n' +
'  {DЖертва:{x\n' +
'  - {Dмелкое кровожадное существо-падальщик{x -  {cнаблюдая  за  поведением  тварей  в\n' +
'    городах, я заметил, что кидаются  на  спящих,  пожирают  трупы  и  при  этом\n' +
'    достаточно мелкие {Cужасные зверюги{c в {CМидгаарде{c и {Cстервятники{c в {CНовом Талосе{c.\n' +
'  {DЧто дальше:{x\n' +
'  - {Dдействуй{c - используй инициированную во время ритуала {Dчёрную розу{c  на  жертву.{x\n' +
'  - {Dждём{c - тьма не сразу возьмёт верх над жертвой.  Нужно  подождать.  Одержимые\n' +
'    "заражают" существ своего размера или меньше,  или  питомцев  Героев  ({Cлюбых\n' +
'    размеров{c), когда оказываются с ними в рядом. Нужно подождать. Для  появления\n' +
'    Демона одержимых в зоне должно стать не мене 13. Нужно подождать.  Одержимые\n' +
'    должны собраться в одном месте. Нужно подождать.{x\n' +
'  - {Dнаслаждаемся{c - за появляющихся  тварей  {DТемные Боги{c  будут  награждать  тебя\n' +
'    небольшим количеством {yквестовых единиц{x.\n' +
'  - {Dускоряемся{c - если найти способ  привести  зараженное  существо  к  существам\n' +
'    меньшего размера, распространение "одержимости" ускорилось бы. Если существа\n' +
'    сразу будут находиться в одном месте, им не придется бродить в поисках места\n' +
'    встречи, и это ускорит приход Демона.{x\n' +
'  - {Dсовершенствуемся{c  -  используя  Некрономикон  отводи  Обращенных  Демоном  в\n' +
'    {CОродруин{c. Воспользуйся им повторно, чтобы Обращенный принес себя в жертву  в\n' +
'    {YР{Rасщелине {YС{Rудьбы{c. Когда {D{RЛ{Yа{Rв{Yа{c в расщелине успокоится  и  перестанет  {rп{Rо{rл{Yы{rх{Rат{rь\n' +
'    {Rо{rгн{Yё{rм{c, помести туда ДОСПЕХ, чтобы придать ему Силы!\n' +
'    {CПримечание:{c не забываем использовать {Cзащиту от тепла{c, дабы уберечь  руки  от\n' +
'    ожогов при извлечении предметов из {YР{Rасщелины {YС{Rудьбы{c.\n' +
'    {CЕще одно важное примечание:{c  предметы,  обладающие  неведомыми,  но  мощными\n' +
'    свойствами, лимиты, и раннее  изменненые  предметы,  помещеные  в  {YР{Rасщелину\n' +
'    {YС{Rудьбы{c СКОРЕЕ ВСЕГО будут уничтожены!!! (но это неточно)\n' +
'    {CПоследнее примечание:{c можно попробовать сунуть {DНекрономикон{c, но уничтоженный\n' +
'    {DНекрономикон{c - может остановить нашествие!\n' +
'\n                                                   {wузурпатор Миямото [{Dвластелин{w]{x\n' +
'                          день Грома, 10й день осеннего месяца Темноты, года 709';
        }
        /*else if ('epidemy эпидемия'.match('(^| )'+str) && book.epidemy.isLorem) {
            result = show();
        }*/

        return result;
    };
    Necronomicon.onCantFetch = function(book, ch, unknownobj, unknownstr) {
        //onCantFetch(ch) - чар ch пытается что-то вытащить из этого контейнера.
        // если вернуть true - вытащить не получится.
        if(ch.name != book.epidemy.ownerName) {
            ch.act('Что-то мешает тебе достать хоть что-нибудь из %1$O2.', book);
            return true;
        }
        return false;
    };
    Necronomicon.onCantPut = function(book, ch, obj, pocket, verbose) {
        //onCantPut(ch, obj, pocket, verbose) - чар ch пытается положить предмет obj
        // в этот контейнер (возможно в карман с именем pocket).
        // если вернуть true - положить не получится.
        // параметр verbose задает, надо ли выводить чару сообщения о неудаче.
        // например, при "put all.something container" - спамить при попытке класть каждый
        // предмет не нужно, и verbose будет равно false.

        if(obj.epidemy==null) {
            if(verbose)
                ch.act('Не похоже что ты можешь хранить %1$O4 в %2$O6.',obj,book);
            return true;
        } else {
            if(obj.epidemy.ownerName!=book.epidemy.ownerName) {
                if(verbose)
                    ch.act('Не похоже что %1$O1 фрагмент из этой книги.',obj);
                return true;
            } else {
                return false;
            }
        }
    };
    Necronomicon.onPut = function(book, ch, obj, cont) {
        //onPut(ch,obj,cont) - ch кладет obj в контейнер cont.
        // Триггер вызывается для всех троих.
        //начинает вибрировать если в нее положить бумажку
        if(book!=cont || book.epidemy==null || obj.epidemy==null) {
            return;
        }
        if(!(book.extra_flags&.tables.extra_flags.hum)) {
            book.extra_flags = .set_bit(book.extra_flags, .tables.extra_flags.hum);
            ch.in_room.ppl.call.act('%1$^O1 начинает вибрировать.',book);
        }
        if(obj.epidemy.spellIndexMin==0 && obj.epidemy.spellIndexMax==4) {
            ch.act('По разрыву пробегает фиолетовый огонь, и он изчезает...\n' +
                '%1$O1 становится частью страницы книги.', obj);
            ch.in_room.ppl.call.act('%1$^O1 вспыхивает магическим огнём.',book);
            book.extra_flags = .set_bit(book.extra_flags, .tables.extra_flags.glow);
            book.epidemy.isLorem = 1;
            obj.clear();
            obj.extract(true);

        }
    };
    Necronomicon.onFetch = function(book,ch,obj) {
        //onFetch(ch,obj) - ch вынул obj из этого предмета-контейнера
        //если бумажек внутри не осталось, перестаём вибрировать
        if(book.items.size()==0) {
            book.extra_flags = .unset_bit(book.extra_flags, .tables.extra_flags.hum);
            ch.in_room.ppl.call.act('%1$^O1 перестаёт вибрировать.', book);
        }
    };
    Necronomicon.postSpeech = function(book,ch,str) {
        this=.tmp.epidemy;
        try{
            if(str.toLower().match('lorem ipsum dolor sit amet')) {
                //книга в руке
                if(book.wear_loc!='hold') {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно книгу стоит взять в руки?');
                    return;
                }
                //книга открыта
                if(book.value1&.tables.container_flags.closed) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно книгу стоит открыть?');
                    return;

                }
                //мы в храме
                if(ch.in_room.vnum!=.tmp.epidemy.darkTempleVnum) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно ты находишься не в том месте?');
                    return;
                }
                //ночь
                if (.sunlight != 0) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Так сейчас и не ночь. Надо перечитать ритуал.');
                    return;

                }
                //месяц Зла
                if (.month != 16) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Эх! Не то ты выбрал время года. Надо перечитать ритуал.');
                    return;
                }

                if(ch.in_room.get_obj_vnum(.tmp.epidemy.pitVnum)==null) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. А куда собственно подевалась яма для пожертвований?');
                    return;
                }

                book.epidemy.is_rose = null;
                book.epidemy.is_ash = null;
                book.epidemy.is_choco = null;

                ch.in_room.get_obj_vnum(.tmp.epidemy.pitVnum).items.forEach(function(c){
                    var vnum;
                    vnum = pIndexData.vnum;
                    if(.tmp.epidemy.roseVnum == vnum) {
                        c.epidemy.is_rose = this;
                    }
                    if(.tmp.epidemy.ashVnum ==vnum) {
                        c.epidemy.is_ash = this;
                    }
                    if(.tmp.epidemy.chocolatesVnumsList.has(vnum)) {
                        c.epidemy.is_choco = this;
                    }
                }, book);
                //в яме роза, пепел, шоколад
                if(book.epidemy.is_rose != null
                    && book.epidemy.is_ash != null
                    && book.epidemy.is_choco !=null ) {
                    var room;
                    room = ch.in_room;

                .scheduler.sleep(2);
                    room.ppl.call.act('Из %1$O2 начинает валить густой черный дым.', ch.in_room.get_obj_vnum(.tmp.epidemy.pitVnum));
                .scheduler.sleep(4);
                    room.ppl.call.act('Из %1$O2 вырываются фиолетовые языки пламени и разряды молний.', ch.in_room.get_obj_vnum(.tmp.epidemy.pitVnum));
                .scheduler.sleep(4);
                    room.ppl.call.act('ПУФ!!! Во вспышке {DТьмы{x всё изчезает.');

                    //ch.act('BINGO!!!');
                .tmp.epidemy.Rose(book.epidemy.is_rose);
                    book.epidemy.is_ash.extract(true);
                    book.epidemy.is_choco.extract(true);
                    book.epidemy.is_rose = null;
                    book.epidemy.is_ash = null;
                    book.epidemy.is_choco = null;


                } else {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Может не все или не те ингридиенты? Надо перечитать ритуал.');
                    //book.epidemy = null;
                    return;

                }

            }
            else if(str.toLower().match('tempus eos colligendi')) {
                var demon;
                //книга в руке
                if(book.wear_loc!='hold') {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно книгу стоит взять в руки?');
                    return;
                }
                //книга открыта
                if(book.value1&.tables.container_flags.closed) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно книгу стоит открыть?');
                    return;
                }
                demon = ch.in_room.get_mob_vnum(.tmp.epidemy.Demon.vnum);
                //демона нет
                if(demon==null) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Да и видишь ли ты здесь хоть одного призванного тобой Демона?');
                    return;
                }
                var fiendsNow_count_str; fiendsNow_count_str='';
                if(demon.epidemy.fiends.size()>0) {
                    fiendsNow_count_str = .fmt('%1$d исчад%1$Iие|ия|ий и ',demon.epidemy.fiends.size());
                }
                var invert_count_str; invert_count_str='';
                if(demon.epidemy.invert_count>0) {
                    invert_count_str = .fmt('обративший к {DЗлу{x %3$d существ%3$Iо|а|'+', ',demon.epidemy.invert_count);
                }
                var invert_count_str; invert_count_str='';
                if(demon.epidemy.invert_count>0) {
                    invert_count_str = .fmt('обративший к {DЗлу{x %3$d существ%3$Iо|а|'+', ',demon.epidemy.invert_count);
                }
                var fiends_count_str; fiends_count_str='';
                if(demon.epidemy.fiend_count>0) {
                    fiends_count_str = .fmt('призвавший %2$d исчад%2$Iие|ия|ий, ',demon.epidemy.fiend_count);
                }
                var kills_count_str; kills_count_str='';
                if(demon.epidemy.fiend_kill_count>0) {
                    kills_count_str = .fmt(', которые совершили %6$d убийств%6$Iо|а|',demon.epidemy.fiend_kill_count);
                }
                regHistory(.fmt('в месте называемом %1$s, %2$sдемон %3$C1, %4$s%5$s%6$sвозвращен в преисподнюю %7$^N5',
                    demon.in_room.areaname,
                    fiendsNow_count_str,
                    demon,
                    invert_count_str,
                    fiends_count_str,
                    kills_count_str,
                    getPCname(ch.name)));
                regStat(ch.name, 'demon_recall');

                colligendi(demon);
            }
            else if(str.toLower().match('tempus spargendi lapides')) {
                var fido;
                //книга в руке
                if(book.wear_loc!='hold') {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно книгу стоит взять в руки?');
                    return;
                }
                //книга открыта
                if(book.value1&.tables.container_flags.closed) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно книгу стоит открыть?');
                    return;
                }
                //частиц нет
                if(book.epidemy==null||book.epidemy.seed==null||book.epidemy.seed==0) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. В книге нет частицы {DТьмы{x.');
                    return;
                }
                for(ppl in ch.in_room.ppl) {
                    if(ppl.is_npc() && ppl.size<=1
                        && ppl.pIndexData.spec_fun == 'spec_fido') {
                        fido = ppl;
                    }
                }
                //фидохи нету
                if(fido==null) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Да и видишь ли ты здесь хоть одно мелкое кровожадное существо?');
                    return;
                }
                ch.act("Частица {DТьмы{x поднявшись над {1%1$O5 {Dоблаком чёрного дыма{x{2, проникает внутрь %2$C2!", book, fido);
                ch.recho("Частица {DТьмы{x поднявшись над {1%1$O5{2 %3$C2 {1{Dоблаком чёрного дыма{x{2, проникает внутрь %2$C2!", book, fido, ch);
                book.epidemy.seed= book.epidemy.seed-1;
                if(book.epidemy.seed==0)
                    ch.recho("В книге не осталось больше частиц {DТьмы{x. Следует провести Ритуал!");
                preInfect(fido,ch);
            }
            else if(str.toLower().match('mens sana in corpore sano')) {
                var sick;
                //книга в руке
                if(book.wear_loc!='hold') {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно книгу стоит взять в руки?');
                    return;
                }
                //книга открыта
                if(book.value1&.tables.container_flags.closed) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно книгу стоит открыть?');
                    return;
                }
                for(ppl in ch.in_room.ppl) {
                    if(ppl.epidemy!=null && ppl.epidemy.status!=null
                        && ppl.epidemy.status=='sick') {
                        sick = ppl;
                        break;
                    }
                }
                //одержимых нет
                if(sick==null) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Да и видишь ли ты здесь хоть одного одержимого {1{DЗлом{2?');
                    return;
                }

                .tmp.quest.sleep(1, ch, sick);
                regStat(ch.name, 'sick_recall');

                sick.act("Частица {DТьмы{x покидает твоё тело и направляется в %1$O4.", book);
                ch.recho("Частица {DТьмы{x покидает тело {1%1$^C2{2 и направляется в {1%2$O4{2 %3$C2.", sick, book, ch);
                ch.act("Частица {DТьмы{x покидает тело {1%1$^C2{2 и направляется в тво%2$Gё|й|ю {1%2$O4{2.", sick, book);
                ch.act("Теперь ты можешь использовать частицу {DТьмы{x на другое существо.");
                heal(sick,null);
                if(book.epidemy.seed==null)
                    book.epidemy.seed=0;
                book.epidemy.seed=book.epidemy.seed+1;
            }
        }catch(e) {
        .tmp.epidemy.catchMsg(e);
        }
    };
    //бывает и такая фигня, надо удалить из списка
    Necronomicon.onExtract = function(book, jopa) {
        if(book.epidemy==null||book.epidemy.isLorem==null||book.epidemy.ownerName==null)
            return;
        this = .tmp.epidemy;
        debug(.fmt('necronomicon.onExtract(%s)',book.epidemy.ownerName),null);
        if(jopa) {
            //удаляем книгу из списка (при уничтожении клочков, не должны создаваться новые)
            .tmp.epidemy.booksList[book.epidemy.ownerName] = null;

            //оказалось, еще и клочки нужно уничтожить...
            for(piece in .tmp.epidemy.Piece.instances) {
                if(piece.epidemy!=null && piece.epidemy.ownerName!=null
                    && piece.epidemy.ownerName==book.epidemy.ownerName) {
                    extractLoremPiece(piece);
                }
            }
        }

    };
    Necronomicon.onQuit = function(book, ch, count) {
        this = .tmp.epidemy;
        debug(.fmt('necronomicon.onQuit(%C1)',ch),null);
        book.epidemy.restock = null;
        if(book.epidemy.isLorem) {
            book.epidemy.loremPieces = null;
        } else if(book.epidemy.loremPieces!=null){
            //помечаем бумажки для разваливания через 15 минут.
            for(piece_key in book.epidemy.loremPieces.keys) {
                if(book.epidemy.loremPieces[piece_key].dead){
                    book.epidemy.loremPieces[piece_key].clear();
                    book.epidemy.loremPieces[piece_key]=null;
                }
                else book.epidemy.loremPieces[piece_key].timer=15;
            }
        }
/*
        //убираем бумажки у магов
        for(wlk in warlocksList) {
            if(wlk.dead) {
                warlocksLists.sub(wlk);
                continue;
            }
            for(name in wlk.epidemy.pieces.keys) {
                if(book.epidemy!=null&&book.epidemy.ownerName!=null
                    &&book.epidemy.ownerName==name){
                    extractLorePiece(wlk,name);
                }
            }
        }
*/
    };
    Necronomicon.onUse = function(book, ch, str) {
        if(ch.clan.name!='invader' || str=='') return false;

        try{
            if(.tmp.Orodruin==null) {
                throw('Orodruin not found!');
            }
            this = .tmp.epidemy;
            var target;

            target = ch.get_char_room(str);

            if(target == null || ch.can_see_mob(target)==false){
                ch.act("Этого нет здесь.");
                return true;
            }

            if(ch==target) {
                ch.act("Ты поднимаешь %1$O5 у себя над головой. Узрите!", book);
                ch.recho("%1$^C1 поднимает %2$O5 над головой, чтобы окружающие могли разглядеть толстый фолиант в антроподермическом переплёте!", ch, book);
            } else {
                ch.act("Ты показываешь {1%1$O4{2 {1%2$C3{2.", book, target);
                target.act("%1$^C1 зачем-то показывает тебе {1%2$O4{2.", ch, book);
                ch.rvecho(target, "%1$^C1 показывает {1%2$C3{2 {1%3$O4{2.", ch, target, book);
                var charmed;charmed = false;
                for(aff in target.affected) {
                    if(aff.type=='charm person' && target.leader==ch && target.epidemy!=null
                        && target.epidemy.status!=null && target.epidemy.status=='inverted') {
                        charmed = true;
                        break;
                    }
                }
                if(charmed && target.in_room == .tmp.Orodruin.SammathNaurRoom) {
                    var lastPhrase;
                    lastPhrase=.List().add(
                        'ЗА ЗЛО!!! ЗА ЗАХВАТЧИКОВ!!! ВО СЛАВУ ТЁМНОГО ВЛАСТЕЛИНА!!!',
                        'ЗА ЗЛО!!!',
                        'ЗА ТЬМУ!!!',
                        'ЗА ТЬМУ ВО ВСЁМ СВЕТЕ!!!',
                        'ЗА ЗАХВАТЧИКОВ!!!',
                        'ВО СЛАВУ ТЁМНОГО ВЛАСТЕЛИНА!!!',
                        'ЗА ЗЛО ВО ВСЁМ МИРЕ!!!'
                    );
                    target.interpret_raw('yell',lastPhrase.random());
                    target.stop_follower();
                    target.interpret_raw('walk','crack');
                    //target.in_room.echo('%^C1 бросается в %O4.',target,.tmp.Orodruin.CrackOfDoom.instances.front());
                    //target.char_to_room(.tmp.Orodruin.CrackOfDoomRoom);
                }
                else if(!charmed && target.epidemy!=null && target.epidemy.status!=null) {
                    if(target.epidemy.status=='sick'
                        || target.epidemy.status=='infected') {
                        ch.act("Похоже ты перепутал Одержим%Gое|ого|ую с Обращенным.", target);
                    }
                    else if (target.epidemy.status=='inverted') {
                        var maxCharms,count,i; maxCharms=ch.getClanLevel()+1;count=0;
                        for (i = .char_list; i != null; i = i.next) {
                            for(aff in i.affected) {
                                if(aff.type=='charm person' && i.leader==ch) {
                                    count=count+1;
                                }
                            }
                        }

                        if(count>=maxCharms) {
                            ch.act('%1$GТвоё|Твой|Твоя {1%1$O1{2 не может контролировать больше Одержимых.',book);
                        } else {
                            ch.act('{1%1$^C1{2 какое-то время будет сопровождать тебя и выополнять твои приказы.',target);
                            ch.add_charmed(target, -1);
                        }
                    }
                }
            }

            return true;
        }catch(e){
           .tmp.epidemy.catchMsg('Necronomicon.onUse:'+e);

        }

    };

    restockLoremPieces = function(book) {
        this = .tmp.epidemy;
        debug(.fmt('restockLoremPieces(%s)',book.epidemy.ownerName),null);
        if(book.epidemy.isLorem)
            return;
        if(book.epidemy.loremPieces==null) {
            book.epidemy.loremPieces=.Array();
        }

        //debug('check book.epidemy.loremPieces[]',null);
        for(spellIndex in book.epidemy.loremPieces.keys) {
            if(book.epidemy.loremPieces[spellIndex].dead) {
                book.epidemy.loremPieces[spellIndex]=null;
                debug(.fmt('  %d->null',spellIndex),null);
            }
            else if(book.epidemy.loremPieces[spellIndex].timer>=0) {
                book.epidemy.loremPieces[spellIndex].timer=-1;

/*
                if(book.epidemy.loremPieces[spellIndex].epidemy==null){
                    debug(.fmt('  %d %O1 [epidemy==null] -> %C1[%d]',
                        spellIndex,
                        book.epidemy.loremPieces[spellIndex],
                        book.epidemy.loremPieces[spellIndex].getCarrier(),
                        book.epidemy.loremPieces[spellIndex].getCarrier().pIndexData.vnum),null);
                }
                else {
                    debug(.fmt('  %d %O1 [%s] -> %C1[%d] %d %d',
                        spellIndex,
                        book.epidemy.loremPieces[spellIndex],
                        book.epidemy.loremPieces[spellIndex].epidemy.ownerName,
                        book.epidemy.loremPieces[spellIndex].getCarrier(),
                        book.epidemy.loremPieces[spellIndex].getCarrier().pIndexData.vnum,
                        book.epidemy.loremPieces[spellIndex].epidemy.spellIndexMin,
                        book.epidemy.loremPieces[spellIndex].epidemy.spellIndexMax),null);
                }
*/
            }
        }

        //debug('check Piece.instances',null);
        for(piece in Piece.instances) {
            debug(.fmt('  %O1',piece),null);
            if(piece.epidemy==null || piece.epidemy.status==null || piece.epidemy.status!='lorem piece') continue;
            if(piece.epidemy.ownerName!=book.epidemy.ownerName) continue;
            var i;
            //debug(.fmt('    [%d-%d]',piece.epidemy.spellIndexMin,piece.epidemy.spellIndexMax),null);
            for(i=piece.epidemy.spellIndexMin;i<=piece.epidemy.spellIndexMax;i=i+1){
                if(book.epidemy.loremPieces[i]!=null && book.epidemy.loremPieces[i]!=piece) {
                    piece.clear();
                    extractLoremPiece(piece);
                } else {
                    book.epidemy.loremPieces[i]=piece;
                }
            }
        }

        var loremPieces;  loremPieces = .Array();
        for(key in loremPieceNamesArray.keys) {
            if(book.epidemy.loremPieces[key]==null) {
                loremPieces[key]=loremPieceNamesArray[key];
            }
        }
        loadLoremPieces(book,loremPieces);
    };
    Necronomicon.onEntry = null;

/*
    extractLorePiece = function(wlk,chName) {
        var piece;

        try{
            if(wlk.dead) {
                throw('wlk dead');
            }
            if(wlk.epidemy==null || wlk.epidemy.pieces==null || wlk.epidemy.pieces[chName]==null) {
                throw('wlk.epidemy incorrect');
            }
            piece=wlk.epidemy.pieces[chName];
            piece.clear();
            piece.extract(true);
            wlk.epidemy.pieces[chName]=null;
            if(wlk.epidemy.pieces.size()==0) {
                wlk.clear();
            .tmp.epidemy.warlocksList.sub(wlk);
            }
        } catch(e) {.tmp.epidemy.catchMsg(.fmt('extractLorePiece: wlk[%C1] %s',wlk,e));}
    };
*/
    extractLorePiece = null;

    NecronomiconInit = function(ch) {
        this = .tmp.epidemy.Necronomicon.create();

        epidemy = .Map();

        epidemy.ownerName = ch.name;
        epidemy.isLorem = 0;
        epidemy.loremPieces = .Array();

        return this;
    };
    preDestroyNecronomicon = function(book, ch) {
        this = .tmp.epidemy;
        var chMaster;
        chMaster = getChMaster(ch);
        if(chMaster!=null) {
            regChar(chMaster);
            regStat(chMaster.name, 'necronomicon');
            check_reward(chMaster.name, 'necronomicon');
        }
        for(one_list in .List().add(Demon.instances,Fiend.instances,impsList)) {
            for(fiend in one_list) {
                if(fiend.dead) {continue;}
                if(fiend.epidemy!=null && book.epidemy!=null
                    && fiend.epidemy.invader==book.epidemy.ownerName) {
                    fiend.recho('Внезапно %1$C1 теряет связь с источником своей жизненой силы.',fiend);
                    fiend.act('{DНекнономикон{x, служивший для тебя источником жизненой силы, уничтожен!');
                    fiend.raw_kill(-1,ch);
                }
            }
        }
        for(infected in infectedList) {
            if(infected.dead) {continue;}
            if(infected.epidemy!=null && book.epidemy!=null
                && infected.epidemy.invader==book.epidemy.ownerName) {
                infected.recho('Внезапно {Dтёмные силы{x внутри %1$C2 изчезают.',infected);
                infected.act('{DНекнономикон{x, послуживший источником "{Dтёмных сил{x" внутри тебя, уничтожен!');
                heal(infected,ch);
            }
        }
        for(inverted in invertedList) {
            if(inverted.dead) {continue;}
            if(inverted.epidemy!=null && book.epidemy!=null
                && inverted.epidemy.invader==book.epidemy.ownerName) {
                inverted.recho('{DТёмные силы{x теряют власть над %1$C5.',inverted);
                inverted.act('{DТёмные силы{x теряют над тобой власть!');
                heal(inverted,ch);
            }
        }

    };

    count_wk = function(chname) {
        this = .tmp.epidemy;
        var count, wk;
        count = 0;
        for(wk in warlocksList) {
            if(wk.epidemy==null || wk.epidemy.pieces==null) {
                wk.clear();
                warlocksList.sub(wk);
                continue;
            }

            if(wk.epidemy.pieces[chname]!=null)
                count=count+1;
        }

        return count;
    };
    get_wk_array = function(chname) {
        var result;
        var carrier;
        var i; i=0;
        result = .Array();

        for(piece in .tmp.epidemy.Piece.instances) {
            //ваще не торт что нам нужно
            if(piece.epidemy==null
                || piece.epidemy.status==null
                || piece.epidemy.status!='lorem piece') {
                continue;
            }

            //не наше или бракованое
            if(piece.epidemy.ownerName==null || piece.epidemy.ownerName!=chname) {
                continue;
            }

            carrier = piece.getCarrier();
            if(carrier!=null) {
                //уже у меня
                if(carrier.name == chname) {
/*
                    for(i=piece.epidemy.spellIndexMin;i<=piece.epidemy.spellIndexMax;i=i+1) {
                        result[i]=.Array();
                        result[i]['found']='self';
                    }
*/
                    continue;
                }

                //for(i=piece.epidemy.spellIndexMin;i<=piece.epidemy.spellIndexMax;i=i+1) {
                    result[i]=.Array();
                    result[i]['found'] = 'carrier';
                    result[i]['link'] = carrier;
                    break;
                //}
            } else {
                //for(i=piece.epidemy.spellIndexMin;i<=piece.epidemy.spellIndexMax;i=i+1) {
                    result[i]=.Array();
                    result[i]['found'] = 'room';
                    result[i]['link'] = piece.getRoom();
                    break;
                //}
            }
        }

        return result;
    };
    showStat = function(){
        this = .tmp.epidemy;
        var result;
        result = '';

        if(statistic.size()==0 && statistic_total.size()==0) {
            result = 'Страница пуста. ' +
                'Возможно кто-то уже должен провести Ритуал.\n' +
                'Может быть ты?';
        } else {
            var cc,header,ra;
            var slen,i,s,maxlen,aStat;
            ra = .Array(); //resultArray strings
            cc = 0;
            aStat = statistic;
            if(statistic.size()==0)
                aStat = statistic_total;
            header = '            | ритуалов|  демонов|  исчадий|   чертят|одержимых|    убито| обращено|\n' +
                '------------+---------+---------+---------+---------+---------+---------+---------|';
            for(key in .List().add('epidemy start','demon','fiend','imp','infect','fiend_kill','demon_invert')) {
                if(aStat[key]==null) {
                    for(name in ra.keys){
                        ra[name] = ra[name]+'         |';
                    }
                    cc = cc+1;continue;
                }
                for(name in aStat[key].keys) {
                    if(ra[name]==null) {
                        ra[name]=.fmt('%-12^N1|',getPCname(name));
                        for(i=0;i<cc;i=i+1) {
                            ra[name] = ra[name]+'         |';
                        }
                    }
                    ra[name] = ra[name]+.fmt('%9d|',aStat[key][name]);
                    //maxlen = ra[name].size();
                }
                cc = cc+1;
                for(name in ra.keys){
                    if(aStat[key][name]==null) {
                        ra[name] = ra[name]+'         |';
                    }
                }
                /*for(name in ra.keys) {
                    slen = maxlen - ra[name].size();
                    for(i=0;i<slen;i=i+1) {
                        if(i==10) {
                            ra[name]= ra[name]+'|';
                        } else {
                            ra[name]= ra[name]+' ';
                        }
                    }
                }*/

            }
            result = result + header+'\n';
            for(name in ra.keys) {
                result = result + ra[name] + '\n';
            }
            result = result + '\n';

            var keysArray,keysList;
            keysList=.List().add('demon_slay','fiend_slay','imp_slay','heal','imp_create');
            keysArray=.Array();
            keysArray['demon_slay']='Убийцы демонов';
            keysArray['fiend_slay']='Убицы исчадией';
            keysArray['imp_slay']='Убийцы чертят';
            keysArray['heal']='Экзорцисты';
            keysArray['imp_create']='{DУбийцы одержимых - освободители бесят/чертят{x';
            keysArray['demon_recall']='{DВозвращено демонов в преисподнюю{x';
            ra = .Array();
            for(key in keysList){
                if(aStat[key]==null) continue;
                if(ra[key]==null) {
                    ra[key]=.Array();
                }
                for(name in aStat[key].keys) {
                    if(ra[key][aStat[key][name]]==null) {
                        ra[key][aStat[key][name]] = .List();
                    }
                    ra[key][aStat[key][name]].push_back(.fmt('%1$^N1',getPCname(name)));
                }
            }

            var names;
            for(key in keysList) {
                if(ra[key]==null) continue;
                result = result+keysArray[key]+':\n';
                for(num in ra[key].keys){
                    slen = 4 - (''+num).size();
                    for(i=0;i<=slen;i=i+1) {
                        result = result + ' ';
                    }
                    result = result+num+': ';
                    names = '';
                    for(name in ra[key][num]) {
                        if(names.size()>0)
                            names = names + ', ' + name;
                        else
                            names = name;
                    }
                    result = result+names+'\n';
                }
                result = result+'\n';
            }

        }


        return result;
    };

    triggers.roseOnUse = function(rose, ch, str) {
        try{
        this = .tmp.epidemy;
        var target;

        target = ch.get_char_room(str);

        if(target == null)
            ch.act("Этого нет здесь.");

        if(!target.is_npc()) {
            if(ch==target) {
                ch.act("Ты размахиваешь %1$O5 у себя над головой, но ничего не происходит!", rose);
                ch.recho("%1$^C1 с непонятной целью машет %2$O5 у себя над головой!", ch, rose);
            } else {
                ch.act("Ты взмахиваешь %2$O5 в сторону %1$C4, но ничего не происходит!", target, rose);
                target.act("%1$^C1 с непонятной целью машет в твою сторону %2$O5!", ch, rose);
                ch.rvecho(target, "%1$^C1 с непонятной целью машет %3$O5 в сторону %2$C4!", ch, target, rose);
            }
        } else if(target.size > 1) {
            ch.act("Призываемые тобой {Dтёмные силы{x не могут проникнуть в %1$C4. Попробуй найти существо поменьше!", target);
            ch.recho("%1$^C1 с непонятной целью машет чёрной розой в сторону %2$C4!", ch, target);
        } else if(target.pIndexData.spec_fun != 'spec_fido') {
            ch.act("{DТёмные силы{x не могут проникнуть в %1$C4. Попробуй найти существо покровожаднее!", target);
            ch.recho("%1$^C1 с непонятной целью машет чёрной розой в сторону %2$C4!", ch, target);
        } else {
            ch.act("Ты взмахиваешь %2$O5, и она, преврашившись в {Dоблако чёрного дыма{x, проникает внутрь %1$C2!", target, rose);
            ch.recho("%1$^C1 взмахивает %3$O5, и она, преврашившись в {Dчёрный дым{x, проникает внутрь %2$C2!", ch, target, rose);
            rose.extract(true);
            //а вот тут заражаем!

            preInfect(target,ch);//target.postSpec = function(){.tmp.epidemy.infect(rose);};
            var chMaster;
            chMaster = getChMaster(ch);
            if(chMaster!=null){
                regChar(chMaster);
                regStat(chMaster.name,'epidemy start');
                regHistory(.fmt('в месте называемом %3$s, %1$^C1 посеял%1$Gо||а зерно {DТьмы{x в %2$C4',chMaster,target,chMaster.in_room.areaname));
                check_reward(chMaster.name,'epidemy start');
                if(running==null)
                    start();
            }
        }
        return true;
        }catch(e){
        .tmp.epidemy.catchMsg(e);

        }
    };

    Rose = function(rose) {
        rose.short_descr = '{D' + rose.short_descr + '{x';
        rose.extra_flags = .set_bit(rose.extra_flags, .tables.extra_flags.hum);
        rose.extra_flags = .set_bit(rose.extra_flags, .tables.extra_flags.glow);
        rose.extra_flags = .set_bit(rose.extra_flags, .tables.extra_flags.dark);
        rose.extra_flags = .set_bit(rose.extra_flags, .tables.extra_flags.evil);

        rose.onUse = function(ch, str) {.tmp.epidemy.triggers.roseOnUse(this,ch,str);return true;};
    };

})
.apply(function() {
//bookInit = function() {
    if(.tmp.epidemy==null)
        .tmp.epidemy = .Map();

    this = .tmp.epidemy;

    if(triggers==null) triggers = .Map();
    if(necronomicon==null) necronomicon = .get_obj_index(732);

    necronomicon.onExtraDescr = function(book, ch, str) {
        //onExtraDescr(ch,str) - возвращает строку, которую надо показать чару ch,
        // при взгляде на экстра-дескр str. Если вернуть пустую строку, продолжится
        // поиск другого экстра-деска, иначе -- покажет то что мы вернули, и оборвет поиск.
        if(book.epidemy.isLorem==null)
            book.epidemy.isLorem=0;
        var result, ritual, tstr;
        var cwk, aWk;
        result = '';
        if(!(book.value1&.tables.container_flags.closed)) {
            //смотрим в открытую книгу.
            //Инвайдеры должны видеть ритуал.
            if('Necronomicon necronomicon book grimoire гримуар древний книга мертвых некрономикон'.match('(^| )'+str)) {
                //смотрит инвайдер
                if(ch.clan.name=='invader') {
                    ritual = 'На одной из страниц с изображением Демона в верхнем углу, ты можешь прочесть\n' +
                        'описание ритуала написанного кровью (может и чернилами, но ты уверен что {rкровью{x): \n' +
                        '\n' +
                        '               {rК{RАК П{rРА{DВИ{dТЬ {RМИ{rРОМ {DНЕ {dП{RРИВ{rЛЕК{DАЯ ВН{RИ{rМАНИЯ {WР{wЫ{WЦАРЕЙ\n' +
                        '\n' +
                        '{r  В {Dночь Лжи{r в месяц {DВеликого Зла{r в {DТёмном храме{r срединного города  положи  {Dчёрный\n' +
                        '  цветок{r, {Dгорсть чёрного пепла{r и {Dплитку чёрного шоколада{R (без него  вообще  никак)\n'
                        + '{r  в жертвенник перед алтарём.\n' +
                        '\n' +
                        '  Призови {DТёмные Силы{r произнеся заклинание {R(смотри ниже){r. \n' +
                        '\n' +
                        '  Забери цветок. Посей зерно {DТьмы{r в мелкое кровожадное существо в любом из городов.\n' +
                        '  Дождись когда все существа будут под властью {DЗла{r. Узри появление {DДемона{r, который \n' +
                        '  принесёт в город {DТьму{r, и поможет присоединить его территорию к {DИмперии Зла{r.{x\n' +
                        '\n' ;

                    //видим весь ритуал
                    if(book.epidemy.isLorem) {
                        result = ritual +
                            'Ниже под, погасшими изображениями чернокнижников и некромантов, написано заклинание:\n' +
                            '                       "{DL{ror{De{rm ip{Dsu{rm dol{Dor {rsi{Dt {Ra{Dme{rt{x"';

                    } else { //видим часть ритуала (заклинание не найдено, в книгу не вставлено)
                        cwk = .tmp.epidemy.count_wk(ch.name);
                        result = ritual +
                            'Нижняя часть страницы оторвана, возможно именно там было написано заклинание.\n' +
                            'Над разрывом нарисованы пять фигур чернокнижников и некромантов. \n';
                        if(cwk==5){
                            result = result + 'Изображения светятся и выглядят как живые.';
                        } else if (cwk < 5) {
                            if( cwk == 0 ) {
                                result  = result + 'Изображения темных магов выглядят потухшами и безжизненными.';
                            }else if( cwk == 1 ) {
                                result = result + 'Одно из изображений продолжает светиться и выглядит как живое.';
                            } else {
                                if( cwk == 2 ) {
                                    tstr = 'Два';
                                } else if( cwk == 3 ) {
                                    tstr = 'Три';
                                } else if( cwk == 4 ) {
                                    tstr = 'Четыре';
                                }
                                result = result + tstr + ' из которых продолжают светиться и выглядят как живые.';
                            }
                        }
                        if(cwk>0)
                            result = result + ' Надо бы разглядеть повнимательнее...';

                        var c,i,l;
                        c = book.items.size();
                        if(c>0) {
                            result = result + '\nПод разрывом ';
                            if(c==1) {
                                result = result + 'лежит клочок бумаги с надписью "{D'+book.items.back().epidemy.spellName+'{x".';
                            } else {
                                result = result + 'лежат клочки бумаги с надписями ';
                                l = book.items.clone();
                                for(i=0;i<c;i=i+1) {
                                    if(i==0) {
                                        result = result + '"{D'+l.back().epidemy.spellName+'{x"';

                                    } else {
                                        if(i==c-1) {
                                            result = result + ' и "{D'+l.back().epidemy.spellName+'{x"';
                                        } else {
                                            result = result + ', "{D'+l.back().epidemy.spellName+'{x"';
                                        }
                                    }
                                    if(i==c-1)
                                        result = result + '.';
                                    l.pop_back();
                                }
                            }
                        }
                    }
                } else {
                    result = 'Вся книга написана на странном, незнакомом тебе языке.\nЕдинственное, что ты можешь разобрать -  рисунки.  На  рисунках  преобладают\nизображения всевозможной нечисти. Однако встречаются и изображения  каких-то\nорганов, частей тела, растений, котлов. Возможно это просто поваренная книга\nдля желающих отведать экзотической кухни.';

                }
            } else if('warlock mage necromant necromancer чернокнижник колдун некромант)'.match('(^| )'+str)) {
                aWk = .tmp.epidemy.get_wk_array(ch.name); //получаем список магов с нашими бумажками
                if(aWk.size()==0 || book.epidemy.isLorem) {
                    result  = 'Ты тщательно вглядываешся в рисунки на странице:\nИзображения темных магов выглядят потухшами и безжизненными.';
                } else {
                    //test
                    /*if(aWk.size()==0) {
                        throw('empty aWk\n');
                    }*/

                    result = 'Ты тщательно вглядываешь в изображение';
                    //бумажка на руках
                    if(aWk['found']=='carrier') {
                        //наш маг из списка
                        if(.tmp.epidemy.warlocks.has(aWk['link'])) {
                            if(aWk['link'].act&.tables.act_flags.mage)
                                result = result + ' {Dчернокнижника{x.\n';
                            else if(aWk['link'].act&.tables.act_flags.necromancer)
                                result = result + ' {Dнекроманта{x.\n';

                            result = result + aWk['link'].description;

                            result = result + '{DТемный маг{x';
                        } else {
                            result = result + ', но это не темный маг, а '
                                + .fmt('%1$C1',aWk['link']) + '\n';

                            result = result + .fmt('%1$C1',aWk['link']);
                        }
                        result = result + ' находится в месте под названием'
                            +' "{W'+aWk['link'].in_room.name+'{x".';
                        //test
                        //+' ('+aWk['link'].in_room.vnum+')\n';
                    }
                    if(aWk['found']=='room') {
                        result = result + ', но ты не видишь {Dтёмного мага{x.\n'
                            + ' '+aWk['link'].description + '\n'
                            + '{G     Клочок бумаги с магическими символами лежит здесь.{x';

                    }
                }
            }
        }
        return result;
    };
    necronomicon.onCantFetch = function(book, ch, unknownobj, unknownstr) {
        //onCantFetch(ch) - чар ch пытается что-то вытащить из этого контейнера.
        // если вернуть true - вытащить не получится.
        if(ch.name != book.epidemy.ownerName) {
            ch.act('Что-то мешает тебе достать хоть что-нибудь из %1$O2.', book);
            return true;
        }
        return false;
    };
    necronomicon.onCantPut = function(book, ch, obj, pocket, verbose) {
        //onCantPut(ch, obj, pocket, verbose) - чар ch пытается положить предмет obj
        // в этот контейнер (возможно в карман с именем pocket).
        // если вернуть true - положить не получится.
        // параметр verbose задает, надо ли выводить чару сообщения о неудаче.
        // например, при "put all.something container" - спамить при попытке класть каждый
        // предмет не нужно, и verbose будет равно false.

        if(obj.epidemy==null) {
            if(verbose)
                ch.act('Не похоже что ты можешь хранить %1$O4 в %2$O6.',obj,book);
            return true;
        } else {
            if(obj.epidemy.ownerName!=book.epidemy.ownerName) {
                if(verbose)
                    ch.act('Не похоже что %1$O1 фрагмент из этой книги.',obj);
                return true;
            } else {
                return false;
            }
        }
    };
    necronomicon.onPut = function(book, ch, obj, cont) {
        //onPut(ch,obj,cont) - ch кладет obj в контейнер cont.
        // Триггер вызывается для всех троих.
        //начинает вибрировать если в нее положить бумажку
        if(!(book.extra_flags&.tables.extra_flags.hum)) {
            book.extra_flags = .set_bit(book.extra_flags, .tables.extra_flags.hum);
            ch.in_room.ppl.call.act('%1$^O1 начинает вибрировать.',book);
        }
        if(obj.epidemy.spellIndexMin==0 && obj.epidemy.spellIndexMax==4) {
            ch.act('По разрыву пробегает фиолетовый огонь, и он изчезает...\n' +
                '%1$O1 становится частью страницы книги.', obj);
            ch.in_room.ppl.call.act('%1$^O1 вспыхивает магическим огнём.',book);
            book.extra_flags = .set_bit(book.extra_flags, .tables.extra_flags.glow);
            book.epidemy.isLorem = 1;
            obj.epidemy = null;
            obj.extract(true);

        }
    };
    necronomicon.onFetch = function(book,ch,obj) {
        //onFetch(ch,obj) - ch вынул obj из этого предмета-контейнера
        //если бумажек внутри не осталось, перестаём вибрировать
        if(book.items.size()==0) {
            book.extra_flags = .unset_bit(book.extra_flags, .tables.extra_flags.hum);
            ch.in_room.ppl.call.act('%1$^O1 перестаёт вибрировать.', book);
        }
    };
    necronomicon.postSpeech = function(book,ch,str) {
        try{
            if(str.match('Lorem ipsum dolor sit amet')) {
                //книга в руке
                if(book.wear_loc!='hold') {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно книгу стоит взять в руки?');
                    return;
                }
                //книга открыта
                if(book.value1&.tables.container_flags.closed) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно книгу стоит открыть?');
                    return;

                }
                //мы в храме
                if(ch.in_room.vnum!=.tmp.epidemy.darkTempleVnum) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Возможно ты находишься не в том месте?');
                    return;
                }
                //ночь
                if (.sunlight != 0) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Так сейчас и не ночь. Надо перечитать ритуал.');
                    return;

                }
                //месяц Зла
                if (.month != 16) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Эх! Не то ты выбрал время года. Надо перечитать ритуал.');
                    return;
                }

                if(ch.in_room.get_obj_vnum(.tmp.epidemy.pitVnum)==null) {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. А куда собственно подевалась яма для пожертвований?');
                    return;
                }

                book.epidemy.is_rose = null;
                book.epidemy.is_ash = null;
                book.epidemy.is_choco = null;

                ch.in_room.get_obj_vnum(.tmp.epidemy.pitVnum).items.forEach(function(c){
                    var vnum;
                    vnum = pIndexData.vnum;
                    if(.tmp.epidemy.roseVnum == vnum) {
                        c.epidemy.is_rose = this;
                    }
                    if(.tmp.epidemy.ashVnum ==vnum) {
                        c.epidemy.is_ash = this;
                    }
                    if(.tmp.epidemy.chocolatesVnumsList.has(vnum)) {
                        c.epidemy.is_choco = this;
                    }
                }, book);
                //в яме роза, пепел, шоколад
                if(book.epidemy.is_rose != null
                    && book.epidemy.is_ash != null
                    && book.epidemy.is_choco !=null ) {
                    var room;
                    room = ch.in_room;

                .scheduler.sleep(2);
                    room.ppl.call.act('Из %1$O2 начинает валить густой черный дым.', ch.in_room.get_obj_vnum(.tmp.epidemy.pitVnum));
                .scheduler.sleep(4);
                    room.ppl.call.act('Из %1$O2 вырываются фиолетовые языки пламени и разряды молний.', ch.in_room.get_obj_vnum(.tmp.epidemy.pitVnum));
                .scheduler.sleep(4);
                    room.ppl.call.act('ПУФ!!! Во вспышке {DТьмы{x всё изчезает.');

                    //ch.act('BINGO!!!');
                .tmp.epidemy.Rose(book.epidemy.is_rose);
                    book.epidemy.is_ash.extract(true);
                    book.epidemy.is_choco.extract(true);
                    book.epidemy.is_rose = null;
                    book.epidemy.is_ash = null;
                    book.epidemy.is_choco = null;


                } else {
                .scheduler.sleep(2);
                    ch.act('Ничего не происходит. Может не все или не те ингридиенты? Надо перечитать ритуал.');
                    //book.epidemy = null;
                    return;

                }

            }
        }catch(e) {
            if(.tmp.epidemy.Zaleshanin!= null && .tmp.epidemy.Zaleshanin.online) {
            .tmp.epidemy.Zaleshanin.ptc(e);
            } else if(.tmp.epidemy.Miyamoto= null && .tmp.epidemy.Miyamoto.online) {
            .tmp.epidemy.Miyamoto.ptc(e);
            } else {
                throw e;
            }
        }
    };
    //бывает и такая фигня, надо удалить из списка
    necronomicon.onExtract = function(book, jopa) {
        if(jopa) {
            //оказалось, еще и клочки нужно уничтожить...
            var piecesList;
            piecesList = .List();
            for(piece in .tmp.epidemy.piece.instances) {
                if(piece.epidemy!=null && piece.epidemy.ownerName!=null
                    && piece.epidemy.ownerName==book.epidemy.ownerName) {
                    piecesList.push_back(piece);
                }
            }

            .tmp.epidemy.books[book.epidemy.ownerName] = null;

            var i; var c;
            c = piecesList.size();
            for(i=0;i<c;i=i+1) {
                l = piecesList.back();
                piecesList.pop_back();
                l.extract(true);
            }

        }

    };

    Necronomicon = function(ch) {
        this = .tmp.epidemy.necronomicon.create();

        epidemy = .Map();

        epidemy.ownerName = ch.name;
        epidemy.isLorem = 0;

        return this;
    };

    count_wk = function(chname) {
        var count, l,c,i,wk;
        count = 0;
        l = .tmp.epidemy.warlocks.clone();
        c = l.size();
        for(i=0 ; i < c ; i=i+1) {
            wk=l.back();
            if(wk.epidemy==null) {
                .tmp.epidemy.warlocks.sub(wk);
                continue;
            }

            if(wk.epidemy.pieces[chname]!=null)
                count=count+1;
            l.pop_back();
        }

        return count;
    };
    get_wk_array = function(chname) {
        var result;
        var carrier;
        result = .Array();

        for(piece in .tmp.epidemy.piece.instances) {
            //ваще не торт
            if(piece.epidemy==null) {
                continue;
            }

            //не наше
            if(piece.epidemy.ownerName!=chname) {
                continue;
            }

            carrier = piece.getCarrier();
            if(carrier!=null) {
                //уже у меня
                if(carrier.name == chname) {
                    continue;
                }

                result['found'] = 'carrier';
                result['link'] = carrier;
                break;
            } else {
                result['found'] = 'room';
                result['link'] = piece.getRoom();
                break;

            }
        }

        return result;
    };

    triggers.roseOnUse = function(rose, ch, str) {
        var target;

        target = ch.get_char_room(str);

        if(target == null)
            ch.act("Этого нет здесь.");

        if(!target.is_npc()) {
            if(ch==target) {
                ch.act("Ты размахиваешь %1$O5 у себя над головой, но ничего не происходит!", this);
                ch.recho("%1$^C1 с непонятной целью машет %2$O5 у себя над головой!", ch, this);
            } else {
                ch.act("Ты взмахиваешь %2$O5 в сторону %1$C4, но ничего не происходит!", target, this);
                target.act("%1$^C1 с непонятной целью машет в твою сторону %2$O5!", ch, this);
                ch.rvecho(target, "%1$^C1 с непонятной целью машет %3$O5 в сторону %2$C4!", ch, target, this);
            }
        } else if(target.size > 1) {
            ch.act("Призываемые тобой {Dтёмные силы{x не могут проникнуть в %1$C4. Попробуй найти существо поменьше!", target);
            ch.recho("%1$^C1 с непонятной целью машет чёрной розой в сторону %2$C4!", ch, target);
        } else if(target.pIndexData.spec_fun != 'spec_fido') {
            ch.act("{DТёмные силы{x не могут проникнуть в %1$C4. Попробуй найти существо покровожаднее!", target);
            ch.recho("%1$^C1 с непонятной целью машет чёрной розой в сторону %2$C4!", ch, target);
        } else {
            ch.act("Ты взмахиваешь %2$O5, и она, преврашившись в {Dоблако чёрного дыма{x, пронимает внутрь %1$C2!", target, this);
            ch.recho("%1$^C1 взмахивает %3$O5, и она, преврашившись в {Dчёрный дым{x, проникает внутрь %2$C2!", ch, target, this);
            rose.extract(true);
            //а вот тут заражаем!
        .tmp.epidemy.preInfect(vict,ch);//target.postSpec = function(){.tmp.epidemy.infect(this);};
        .tmp.epidemy.regStat(ch.name,'epidemy start');
        .tmp.epidemy.regHistory(.fmt('%1$^C1 посеял%1$Gо||а зерно {DТьмы{x в %2$C4',ch,vict));
        }
        return true;
    };

    Rose = function(rose) {
        rose.short_descr = '{D' + rose.short_descr + '{x';
        rose.extra_flags = .set_bit(rose.extra_flags, .tables.extra_flags.hum);
        rose.extra_flags = .set_bit(rose.extra_flags, .tables.extra_flags.glow);
        rose.extra_flags = .set_bit(rose.extra_flags, .tables.extra_flags.dark);
        rose.extra_flags = .set_bit(rose.extra_flags, .tables.extra_flags.evil);

        rose.onUse = function(ch, str) {return .tmp.epidemy.triggers.roseOnUse(this,ch,str);};
    };

})
bookInit = function() {
    if(.tmp.epidemy==null)
.tmp.epidemy = .Map();

    //this = .tmp.epidemy;

.tmp.epidemy.Necronomicon = function(ch) {
        this = .tmp.epidemy.necronomicon.create();

        epidemy = .Map();

        epidemy.ownerName = ch.name;
        epidemy.isLorem = 0;

        return this;

    };

.tmp.epidemy.necronomiconInit = function(ndx) {
        //onExtraDescr(ch,str) - возвращает строку, которую надо показать чару ch,
        // при взгляде на экстра-дескр str. Если вернуть пустую строку, продолжится
        // поиск другого экстра-деска, иначе -- покажет то что мы вернули, и оборвет поиск.
        ndx.onExtraDescr = function(book, ch, str) {
            if(book.epidemy.isLorem==null)
                book.epidemy.isLorem=0;
            var result, ritual, tstr;
            var cwk, aWk;
            result = '';
            if(!(book.value1&.tables.container_flags.closed)) {
                //смотрим в открытую книгу.
                //Инвайдеры должны видеть ритуал.
                if('Necronomicon necronomicon book grimoire гримуар древний книга мертвых некрономикон'.match('(^| )'+str)) {
                    //смотрит инвайдер
                    if(ch.clan.name=='invader') {
                        ritual = 'На одной из страниц с изображением Демона в верхнем углу, ты можешь прочесть\n' +
                            'описание ритуала написанного кровью (может и чернилами, но ты уверен что {rкровью{x): \n' +
                            '\n' +
                            '               {rК{RАК П{rРА{DВИ{dТЬ {RМИ{rРОМ {DНЕ {dП{RРИВ{rЛЕК{DАЯ ВН{RИ{rМАНИЯ {WР{wЫ{WЦАРЕЙ\n' +
                            '\n' +
                            '{r  В {Dночь Лжи{r в месяц {DВеликого Зла{r в {DТёмном храме{r срединного города  положи  {Dчёрный\n' +
                            '  цветок{r, {Dгорсть чёрного пепла{r и {Dплитку чёрного шоколада{R (без него  вообще  никак)\n'
                            + '{r  в жертвенник перед алтарём.\n' +
                            '\n' +
                            '  Призови {DТёмные Силы{r произнеся заклинание {R(смотри ниже){r. \n' +
                            '\n' +
                            '  Забери цветок. Посей зерно {DТьмы{r в мелкое кровожадное существо в любом из городов.\n' +
                            '  Дождись когда все существа будут под властью {DЗла{r. Узри появление {DДемона{r, который \n' +
                            '  принесёт в город {DТьму{r, и поможет присоединить его территорию к {DИмперии Зла{r.{x\n' +
                            '\n' ;

                        //видим весь ритуал
                        if(book.epidemy.isLorem) {
                            result = ritual +
                                'Ниже под, погасшими изображениями чернокнижников и некромантов, написано заклинание:\n' +
                                '                       "{DL{ror{De{rm ip{Dsu{rm dol{Dor {rsi{Dt {Ra{Dme{rt{x"';

                        } else { //видим часть ритуала (заклинание не найдено, в книгу не вставлено)
                            cwk = .tmp.epidemy.count_wk(ch.name);
                            result = ritual +
                                'Нижняя часть страницы оторвана, возможно именно там было написано заклинание.\n' +
                                'Над разрывом нарисованы пять фигур чернокнижников и некромантов. \n';
                            if(cwk==5){
                                result = result + 'Изображения светятся и выглядят как живые.';
                            } else if (cwk < 5) {
                                if( cwk == 0 ) {
                                    result  = result + 'Изображения темных магов выглядят потухшами и безжизненными.';
                                }else if( cwk == 1 ) {
                                    result = result + 'Одно из изображений продолжает светиться и выглядит как живое.';
                                } else {
                                    if( cwk == 2 ) {
                                        tstr = 'Два';
                                    } else if( cwk == 3 ) {
                                        tstr = 'Три';
                                    } else if( cwk == 4 ) {
                                        tstr = 'Четыре';
                                    }
                                    result = result + tstr + ' из которых продолжают светиться и выглядят как живые.';
                                }
                            }
                            if(cwk>0)
                                result = result + ' Надо бы разглядеть повнимательнее...';

                            var c,i,l;
                            c = book.items.size();
                            if(c>0) {
                                result = result + '\nПод разрывом ';
                                if(c==1) {
                                    result = result + 'лежит клочок бумаги с надписью "{D'+book.items.back().epidemy.spellName+'{x".';
                                } else {
                                    result = result + 'лежат клочки бумаги с надписями ';
                                    l = book.items.clone();
                                    for(i=0;i<c;i=i+1) {
                                        if(i==0) {
                                            result = result + '"{D'+l.back().epidemy.spellName+'{x"';

                                        } else {
                                            if(i==c-1) {
                                                result = result + ' и "{D'+l.back().epidemy.spellName+'{x"';
                                            } else {
                                                result = result + ', "{D'+l.back().epidemy.spellName+'{x"';
                                            }
                                        }
                                        if(i==c-1)
                                            result = result + '.';
                                        l.pop_back();
                                    }
                                }
                            }
                        }
                    } else {
                        result = 'Вся книга написана на странном, незнакомом тебе языке.\nЕдинственное, что ты можешь разобрать -  рисунки.  На  рисунках  преобладают\nизображения всевозможной нечисти. Однако встречаются и изображения  каких-то\nорганов, частей тела, растений, котлов. Возможно это просто поваренная книга\nдля желающих отведать экзотической кухни.';

                    }
                }


                if('warlock mage necromant necromancer чернокнижник колдун некромант)'.match('(^| )'+str)) {
                    if(book.epidemy.isLorem) {
                        result  = 'Изображения темных магов выглядят потухшами и безжизненными.';
                    } else {
                        aWk = .tmp.epidemy.get_wk_array(ch.name);

                        //test
                        if(aWk.size()==0) {
                            throw('empty aWk\n');
                        }

                        result = 'Ты тщательно вглядываешь в изображение';
                        //бумажка на руках
                        if(aWk['found']=='carrier') {
                            //наш маг из списка
                            if(.tmp.epidemy.warlocks.has(aWk['link'])) {
                                if(aWk['link'].act&.tables.act_flags.mage)
                                result = result + ' {Dчернокнижника{x.\n';
                                if(aWk['link'].act&.tables.act_flags.necromancer)
                                result = result + ' {Dнекроманта{x.\n';

                                result = result + aWk['link'].description;

                                result = result + '{DТемный маг{x';
                            } else {
                                result = result + ', но это не темный маг, а '
                                    + ch.seeName(aWk['link'],1) + '\n';

                                result = result + ch.seeName(aWk['link'],1);
                            }
                            result = result + ' находится в месте под названием'
                                +' "{W'+aWk['link'].in_room.name+'{x".'
                                //test
                                +' ('+aWk['link'].in_room.vnum+')\n';
                        }
                        if(aWk['found']=='room') {
                            result = result + ', но ты не видишь {Dтёмного мага{x.\n'
                                + ' '+aWk['link'].description + '\n'
                                + '{G     Клочок бумаги с магическими символами лежит здесь.{x';

                        }
                    }
                }
            }
            return result;
        };

        //onLook(ch, str) - на предмете был экстра-дескр с ключевым словом str,
        // и ch только что увидел его (например, предмет - это книга,
        // и ch выполнил "look page1", тогда в onLook передастся ch и "page1").

        //onFetch(ch,obj) - ch вынул obj из этого предмета-контейнера

        //onClose(ch) - ch закрыл этот предмет-контейнер.
        // Вызывается сразу после фразы "Ты закрываешь <что-то>".

        //onOpen(ch) - ch открыл этот предмет-контейнер.
        // Вызывается сразу после фразы "Ты открываешь <что-то>".

        //onCantFetch(ch) - чар ch пытается что-то вытащить из этого контейнера.
        // если вернуть true - вытащить не получится.
        ndx.onCantFetch = function(book, ch, unknownobj, unknownstr) {
            if(ch.name != book.epidemy.ownerName) {
                ch.act('Что-то мешает тебе достать хоть что-нибудь из %1$O2.', book);
                return true;
            }
            return false;
        };

        //onCantPut(ch, obj, pocket, verbose) - чар ch пытается положить предмет obj
        // в этот контейнер (возможно в карман с именем pocket).
        // если вернуть true - положить не получится.
        // параметр verbose задает, надо ли выводить чару сообщения о неудаче.
        // например, при "put all.something container" - спамить при попытке класть каждый
        // предмет не нужно, и verbose будет равно false.
        ndx.onCantPut = function(book, ch, obj, pocket, verbose) {

            if(obj.epidemy==null) {
                if(verbose)
                    ch.act('Не похоже что ты можешь хранить %1$O4 в %2$O6.',obj,book);
                return true;
            } else {
                if(obj.epidemy.ownerName!=book.epidemy.ownerName) {
                    if(verbose)
                        ch.act('Не похоже что %1$O1 фрагмент из этой книги.',obj);
                    return true;
                } else {
                    return false;
                }
            }
        };

        //onPut(ch,obj,cont) - ch кладет obj в контейнер cont.
        // Триггер вызывается для всех троих.
        ndx.onPut = function(book, ch, obj, cont) {
            //начинает вибрировать если в нее положить бумажку
            if(!(book.extra_flags&.tables.extra_flags.hum)) {
                book.extra_flags = .set_bit(book.extra_flags, .tables.extra_flags.hum);
                ch.in_room.ppl.call.act('%1$^O1 начинает вибрировать.',book);
            }
            if(obj.epidemy.spellIndexMin==0 && obj.epidemy.spellIndexMax==4) {
                ch.act('По разрыву пробегает фиолетовый огонь, и он изчезает...\n' +
                    '%1$O1 становится частью страницы книги.', obj);
                ch.in_room.ppl.call.act('%1$^O1 вспыхивает магическим огнём.',book);
                book.extra_flags = .set_bit(book.extra_flags, .tables.extra_flags.glow);
                book.epidemy.isLorem = 1;
                obj.epidemy = null;
                obj.extract(true);

            }
            //.isset_bit(obj.extra_flags,.tables.extra_flags.glow
            //extra_flags = .unset_bit(extra_flags, .tables.extra_flags.glow);
            //obj.extra_flags = .unset_bit(obj.extra_flags, .tables.extra_flags.glow);
            //obj.extra_flags = .set_bit(obj.extra_flags, .tables.extra_flags.glow);
        };
        //onFetch(ch,obj) - ch вынул obj из этого предмета-контейнера
        ndx.onFetch = function(book,ch,obj) {
            //если бумажек внутри не осталось, перестаём вибрировать
            if(book.items.size()==0) {
                book.extra_flags = .unset_bit(book.extra_flags, .tables.extra_flags.hum);
                ch.in_room.ppl.call.act('%1$^O1 перестаёт вибрировать.', book);
            }
        };

        //onSpeech(ch, str)- ch произнес фразу 'str' стоя рядом с предметом
        ndx.onSpeech = null;
        ndx.postSpeech = function(book,ch,str) {
            try{
                if(str.match('Lorem ipsum dolor sit amet')) {
                    //книга в руке
                    if(book.wear_loc!='hold') {
                    .scheduler.sleep(2);
                        ch.act('Ничего не происходит. Возможно книгу стоит взять в руки?');
                        return;
                    }
                    //книга открыта
                    if(book.value1&.tables.container_flags.closed) {
                    .scheduler.sleep(2);
                        ch.act('Ничего не происходит. Возможно книгу стоит открыть?');
                        return;

                    }
                    //мы в храме
                    if(ch.in_room.vnum!=.tmp.epidemy.darkTemple) {
                    .scheduler.sleep(2);
                        ch.act('Ничего не происходит. Возможно ты находишься не в том месте?');
                        return;
                    }
                    //ночь
                    if (.sunlight != 0) {
                        .scheduler.sleep(2);
                        ch.act('Ничего не происходит. Так сейчас и не ночь. Надо перечитать ритуал.');
                        return;

                    }
                    //месяц Зла
                    if (.month != 16) {
                        .scheduler.sleep(2);
                        ch.act('Ничего не происходит. Эх! Не то ты выбрал время года. Надо перечитать ритуал.');
                        return;
                    }

                    if(ch.in_room.get_obj_vnum(.tmp.epidemy.pit)==null) {
                    .scheduler.sleep(2);
                        ch.act('Ничего не происходит. А куда собственно подевалась яма для пожертвований?.');
                        return;
                    }

                    book.epidemy.is_rose = null;
                    book.epidemy.is_ash = null;
                    book.epidemy.is_choco = null;

                    ch.in_room.get_obj_vnum(.tmp.epidemy.pit).items.forEach(function(c){
                        var vnum;
                        vnum = pIndexData.vnum;
                        if(.tmp.epidemy.rose == vnum) {
                            c.epidemy.is_rose = this;
                        }
                        if(.tmp.epidemy.ash ==vnum) {
                            c.epidemy.is_ash = this;
                        }
                        if(.tmp.epidemy.chocolate.has(vnum)) {
                            c.epidemy.is_choco = this;
                        }
                    }, book);
                    //в яме роза, пепел, шоколад
                    if(book.epidemy.is_rose != null
                        && book.epidemy.is_ash != null
                        && book.epidemy.is_choco !=null ) {

                    .scheduler.sleep(2);
                        ch.in_room.ppl.call.act('Из %1$O1 начинает валить густой черный дым.', ch.in_room.get_obj_vnum(.tmp.epidemy.pit));
                    .scheduler.sleep(4);
                        ch.in_room.ppl.call.act('Из %1$O1 вырываются фиолетовые языки пламени и разряды молний.', ch.in_room.get_obj_vnum(.tmp.epidemy.pit));
                    .scheduler.sleep(4);
                        ch.in_room.ppl.call.act('ПУФ!!! Во вспышке {DТьмы{x всё изчезает.', ch.in_room.get_obj_vnum(.tmp.epidemy.pit));

                        ch.act('BINGO!!!');
                        //book.epidemy.is_rose = roseInit(book.epidemy.is_rose);
                        //book.epidemy.is_ash.extract(true);
                        //book.epidemy.is_choco.extract(true);
                        //book.epidemy = null;


                    } else {
                    .scheduler.sleep(2);
                        ch.act('Ничего не происходит. Может не все или не те ингридиенты? Надо перечитать ритуал.');
                        //book.epidemy = null;
                        return;

                    }

                }
            }catch(e) {
            .get_char_world('miyamoto').ptc('postSpeech:'+e);
            }
        };
    };

.tmp.epidemy.count_wk = function(chname) {
        var count, l,c,i;
        count = 0;
        l = .tmp.epidemy.warlocks.clone();
        c = l.size();
        for(i=0 ; i < c ; i=i+1) {
            if(l.back().epidemy.pieces[chname]!=null)
                count=count+1;
            l.pop_back();
        }

        return count;
    };
.tmp.epidemy.get_wk_array = function(chname) {
        var result;
        var l,c,i,m,p;
        result = .Array();

        l = .tmp.epidemy.piece.instances.clone();
        c = l.size();
        for(i=0 ; i < c ; i=i+1) {
            p=l.back();
            if(p.epidemy==null){
                continue;
                l.pop_back();
            }

            //не мой кусок
            if(p.epidemy.ownerName!=chname) {
                l.pop_back();
                continue;
            }

            //кусок на руках
            m = p.getCarrier();
            if(m!=null) {
                //у меня
                if(m.name == chname) {
                    l.pop_back();
                    continue;
                }

                result['found'] = 'carrier';
                result['link'] = m;
                break;

            } else { //в комнате
                result['found'] = 'room';
                result['link'] = p.getRoom();
                break;
            }

            l.pop_back();

        }
        return result;

    };

.tmp.epidemy.necronomicon = .get_obj_index(732);

.tmp.epidemy.necronomiconInit(.tmp.epidemy.necronomicon);
}
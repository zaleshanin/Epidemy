/*Посвящается вымершему виду:
#3066
odif yltsaeb~
	the Odif Yltsaeb~
	Odif Yltsaeb is here, walking backwards.
~
	Odif is a small dog that has been reversed by some god.
*/
.apply(function() {
    if(.tmp.epidemy==null) .tmp.epidemy = .Map();

    this = .tmp.epidemy;

    if(infectedList==null) infectedList = .List();
    if(invertedList==null) invertedList = .List();
    if(warlocks==null) warlocks = .List();
    if(books==null) books=.Array();
    if(demons==null) demons=.List();
    if(statistic==null) statistic = .Array();
    if(imps==null) imps = .List();
    if(triggers==null) triggers = .Map();

    bookkeeper = .get_mob_index(761);
    necronomicon = .get_obj_index(732);
    piece = .get_obj_index(9607);
    chocolatesVnumsList = .List().add(18078, 27110, 50042); //шоколадки чёрные 18078 27110 50042
    ashVnum = 39002; //пепел 39002
    roseVnum = 204; //роза (rose black flower роза черная цветок)
    pitVnum = 3010;
    darkTempleVnum = 3072;
    Demon = .get_mob_index(762);
    Fiend = .get_mob_index(763);
/*
    Miyamoto = .get_char_world('miyamoto');
    Zaleshanin = .get_char_world('zaleshanin');
*/

    heal = function(mob, ch) {
        this = .tmp.epidemy;

        plan_cancel(mob);

        //будем сохранять и востанавливать, ибо мало ли кто во что был рестрингнут.
        if(mob.epidemy.name!=null) {
            mob.name = mob.epidemy.name;
            mob.short_descr = mob.epidemy.short_descr;
            mob.long_descr = mob.epidemy.long_descr;
            mob.description = mob.epidemy.description;
            mob.alignment = mob.epidemy.alignment;
        }

        mob.postSpec = null;
        mob.onGreet = null;
        mob.onEntry = null;
        mob.onLeave = null;
        mob.onSpell = null;
        mob.onDeath = null;
        mob.onExtract = null;
        mob.epidemy = null;

        infectedList.sub(mob); //выпиливаем из списка зараженных
        invertedList.sub(mob); // ... из списка вывернутых

        mob.recho("%1$^C1 выглядит здоров%1$Gым|ым|ой!", mob);
        if(ch!=null) {
            regStat(getPCname(ch),'heal');
        }

    };
    healall = function() {
        this = .tmp.epidemy;

        var infectedListClon;
        infectedListClon = infectedList.clone();

        for(sick in infectedListClon) {
            heal(sick,null);
        }
        infectedListClon = invertedList.clone();

        for(inverted in infectedListClon) {
            heal(sick,null);
        }
    };

    regStat = function(chName,str) {
        if(chName==null || chName=='') {
            return;
        }
        this = .tmp.epidemy;
        if(statistic[str]==null)
            statistic[str]=.Array();

        if(statistic[str][chName]==null)
            statistic[str][chName]=1;
        else
            statistic[str][chName]=statistic[str][chName]+1;
    };
    regHistory = function(str) {
        this = .tmp.epidemy;
        var months,hours;
        months=.Array();hours=.Array();
        var month, hour;
        if(history==null)
            history=.List();

        months[0] = 'Зимы';
        months[1] = 'Зимнего Волка';
        months[2] = 'Холодного Гиганта';
        months[3] = 'Древних Воинств';
        months[4] = 'Великих Битв';
        months[5] = 'Весны';
        months[6] = 'Природы';
        months[7] = 'Тщетности';
        months[8] = 'Дракона';
        months[9] = 'Солнца';
        months[10] = 'Жары';
        months[11] = 'Битвы';
        months[12] = 'Темноты';
        months[13] = 'Тени';
        months[14] = 'Длинных Теней';
        months[15] = 'Абсолютной Темноты';
        months[16] = 'Великого Зла';
        //0=ночь, 1=рассвет, 2=день, 3=закат
        hours[0]='ночи';hours[1]='утра';hours[2]='дня';hours[3]='вечера';

        hour = .hour;
        if(hour>12) hour = hour - 12;
        if(hour==0) hour = 12;

        history.push_back(.fmt('%1$d %2$s, %3$d'+'-й день месяца %4$s, года %5$d, %6$s.',
            hour, hours[.sunlight], (.day+1), months[.month], .year, str));
    };
    show = function(ch){
        this = .tmp.epidemy;
        var res,res_str;
        res = .Array();
        for(mobList in .List().add(infectedList,imps,invertedList)) {
            for(mob in mobList){
                res_str = '';
                if(mob.dead || !mob.online || mob.epidemy==null)
                    continue;
                if(mob.epidemy.status==null/* || mob.epidemy.invader==null*/)
                    throw('epidemy->show() 1: '+mob.name+'['+mob.in_room.vnum+'] incorrect epidemy structure');

                if(res[mob.in_room.areaname]==null)
                    res[mob.in_room.areaname]=.Array();
                if(res[mob.in_room.areaname][mob.epidemy.status]==null)
                    res[mob.in_room.areaname][mob.epidemy.status]=.List();

                res_str = .fmt('%1$C1[%2$d] %3$s[%4$d]',mob,mob.pIndexData.vnum,mob.in_room.name,mob.in_room.vnum);
                if(leader!=null && leader.pet==this)
                    plan = '(pet)';
                else if(mob.epidemy.plan!=null){
                    res_str=res_str+' plan:'+mob.epidemy.plan;
                    if(mob.epidemy.plan>0) {
                        res_str=res_str+' -> '+mob.epidemy.plan_room.name+'['+mob.epidemy.plan_room.vnum+']';
                    }
                }
                if(mob.epidemy.invader!=null)
                    res_str=res_str+' ('+mob.epidemy.invader+')';
                else
                    res_str=res_str+' (causer unknown)';
                    res[mob.in_room.areaname][mob.epidemy.status].push_back(res_str);
            }
        }

        for(area in res.keys) {
            ch.ptc(area+':\n');
            for(status in res[area].keys) {
                ch.ptc('   - '+status+':\n');
                for(str in res[area][status]){
                    ch.ptc('      '+str+'\n');
                }
            }
        }
    };
    showDemons=function(){
        var result;
        result = .Array();
        var iid, iif;
        //iid=0;
        for(demon in .tmp.epidemy.demons) {
            //iid=iid+1;
            if(result[demon.in_room.areaname]==null)
                result[demon.in_room.areaname]=.List();

            result[demon.in_room.areaname].push_back(.fmt('%1$C1',demon)+' vv:'+demon.epidemy.victimsVnums.size()+' '+demon.in_room.name+'('+demon.in_room.vnum+')');
                iif=0;
                for(fiend in demon.epidemy.fiends) {
                    iif=iif+1;
                    var str;
                    str='';
                    str=str+'\t'+iif+'. '+.fmt('%1$C1',fiend)+'(lvl:'+fiend.level+') '+fiend.in_room.name+'('+fiend.in_room.vnum+')';
                    if(fiend.dead){
                        str=str+' DEAD';
                    } else {
                        if(fiend.epidemy.plan!=null)
                            str=str+' plan:'+fiend.epidemy.plan;
                        else
                            str=str+' plan:nope';
                        if(fiend.epidemy.victim!=null) {
                            if(fiend.epidemy.victim.dead) {
                                str=str+' victim DEAD';
                            } else {
                                str=str+' victim:'+.fmt('%1$C1',fiend.epidemy.victim)+'('+fiend.epidemy.victim.pIndexData.vnum+'<-['+fiend.epidemy.primary_target+']) ';
                                if(fiend.epidemy.plan_room!=null)
                                    str=str+fiend.epidemy.plan_room.name+'['+fiend.epidemy.plan_room.vnum+']';
                            }
                        }

                        else
                            str=str+' no victim';

                    }


                    result[demon.in_room.areaname].push_back(str);
                }
            }

        return result;
    };
    debug = function(mob,str) {
        if(!.buildplot || mob.epidemy.debug==null || mob.epidemy.debug==false)
        return;

    .get_char_world('miyamoto').act('debug:%1$C1 [%2$d] %3$s',mob,mob.in_room.vnum,str);
    };
    catchMsg = function(e) {
        var ch;
        ch = .get_char_world('Zaleshanin');
        if(ch==null)
            ch = .get_char_world('Miyamoto');

        if(ch!=null)
            ch.ptc(e);
        else
            throw e;
    };
    getPCname = function(ch) {
        var name;
        name = '';
        if(ch==null)
            return name;

        if(ch.is_npc()) {
            if(ch.leader!=null && !ch.leader.is_npc()) {
                name = ch.leader.name;
            }
        } else {
            name = ch.name;
        }

        return name;
    };
})
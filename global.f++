/*Посвящается вымершему виду:
#3066
odif yltsaeb~
	the Odif Yltsaeb~
	Odif Yltsaeb is here, walking backwards.
~
	Odif is a small dog that has been reversed by some god.
*/
.apply(function() {
    if(.tmp.epidemy==null) .tmp.epidemy = .Map();

    this = .tmp.epidemy;

    //TODO объединить с epidemyList
    if(invertedList==null) invertedList = .List();
    //общий список действующих НПЦ
    if(epidemyList==null) epidemyList = .List();

    if(warlocksList==null) warlocksList = .List();
    if(booksList==null) booksList=.Array();
    //if(demons==null) demons=.List();
    if(statistic==null) statistic = .Array();
    if(statistic_total==null) statistic_total = .Array();
    if(triggers==null) triggers = .Map();
    if(charNames==null) charNames = .Array();
    if(reward==null) reward= .Array();
    if(reward_final==null) reward_final = .Array();

    Bookkeeper = .get_mob_index(761);
    Necronomicon = .get_obj_index(732);
    Piece = .get_obj_index(9607);
    chocolatesVnumsList = .List().add(18078, 27110, 50042); //шоколадки чёрные 18078 27110 50042
    ashVnum = 39002; //пепел 39002
    roseVnum = 204; //роза (rose black flower роза черная цветок)
    pitVnum = 3010;
    darkTempleVnum = 3072;
    Demon = .get_mob_index(762);
    Fiend = .get_mob_index(763);
/*
    Miyamoto = .get_char_world('miyamoto');
    Zaleshanin = .get_char_world('zaleshanin');
*/
    one_explode = function(mob) {
        if(.buildplot) debug(.fmt('!!! one_explode(%C1[%d]) !!!',mob,mob.in_room.vnum),null);
        mob.act('Твоя голова раздувается и лопается!!!');
        mob.recho('Голова {1%С2{2 раздувается и взрывается, забрызгивая ошмётками мозгов всё вокруг.',mob);
        mob.raw_kill();
    };
    healall = function() {
        this = .tmp.epidemy;

        debug('healall()',null);
        //кого можем лечим
        for(sick in .List().add(epidemyList,invertedList)) {
            if(sick.epidemy==null || sick.epidemy.status==null) continue;
            if(sick.epidemy.status=='sick' || sick.epidemy.status=='infected') {
                heal(sick,null);
            }
        }
        //остальных убиваем
        for(mob in .List().add(epidemyList.filter(filter_status(s),'imp'), Demon.instances, Fiend.instances)) {
            one_explode(mob);
        }
    };

    colligendi = function(demon) {
        var coligendi;
        coligendi = demon.epidemy.fiends.clone();
        coligendi.push_front(demon);
        var door_opened;
        for(mob in coligendi) {
            door_opened = false;
            if(mob.epidemy==null)
                throw(.fmt('colligendi():%C1 (%s[%d]-%s) without .epidemy in colligendi list',mob,mob.in_room.name,mob.in_room.vnum,mob.in_room.areaname));
            if(mob.epidemy.coligendi==null) {
                mob.in_room.echo('Разверзлись врата преисподней, и хор сотен истязаемых душ заполонил улицу...');
                door_opened=true;
            } else {continue;}
            for(m in mob.in_room.ppl) {
                if(!m.is_npc()) continue;
                if(coligendi.has(m)) {
                    m.act('Исполнив свой долг, ты шагаешь во врата преисподней.');
                    m.recho('Исполнив свой долг, %1$C1 шагает во врата преисподней.',m);
                    m.epidemy.coligendi = true;
                }
            }
            if(door_opened)
                mob.in_room.echo('...врата со скрипом и грохотом затворяются. Вопли истязаемых душ стихают.');
        }
        for(vict in coligendi) {
            vict.extract(true);
        }
    };

    regStat = function(chName,str) {
        if(chName==null || chName=='') {
            return;
        }
        this = .tmp.epidemy;
        if(statistic[str]==null)
            statistic[str]=.Array();
        if(statistic_total[str]==null)
            statistic_total[str]=.Array();

        if(statistic[str][chName]==null)
            statistic[str][chName]=0;
        if(statistic_total[str][chName]==null)
            statistic_total[str][chName]=0;

        statistic[str][chName]=statistic[str][chName]+1;
        statistic_total[str][chName]=statistic_total[str][chName]+1;
    };
    regHistory = function(str) {
        this = .tmp.epidemy;
        var months,hours;
        months=.Array();hours=.Array();
        var month, hour;
        if(history==null)
            history=.List();

        months[0] = 'Зимы';
        months[1] = 'Зимнего Волка';
        months[2] = 'Холодного Гиганта';
        months[3] = 'Древних Воинств';
        months[4] = 'Великих Битв';
        months[5] = 'Весны';
        months[6] = 'Природы';
        months[7] = 'Тщетности';
        months[8] = 'Дракона';
        months[9] = 'Солнца';
        months[10] = 'Жары';
        months[11] = 'Битвы';
        months[12] = 'Темноты';
        months[13] = 'Тени';
        months[14] = 'Длинных Теней';
        months[15] = 'Абсолютной Темноты';
        months[16] = 'Великого Зла';
        //0=ночь, 1=рассвет, 2=день, 3=закат
        hours[0]='ночи';hours[1]='утра';hours[2]='дня';hours[3]='вечера';

        hour = .hour;
        if(hour>12) hour = hour - 12;
        if(hour==0) hour = 12;

        history.push_back(.fmt('%1$d %2$s, %3$d'+'-й день месяца %4$s, года %5$d, %6$s.',
            hour, hours[.sunlight], (.day+1), months[.month], .year, str));
    };
    show = function(){
        this = .tmp.epidemy;
        var res,res_str;
        var result;
        result = '';
        res = .Array();

        for(demon in Demon.instances){
            res_str='';
            if(res[demon.in_room.areaname]==null)
                res[demon.in_room.areaname]=.Array();
            if(res[demon.in_room.areaname][demon.epidemy.status]==null)
                res[demon.in_room.areaname][demon.epidemy.status]=.List();

            res_str = res_str + .fmt('%1$C1',demon)+' VictVnums:'+demon.epidemy.victimsVnums.size()+' '+demon.in_room.name+'['+demon.in_room.vnum+']';
            if(demon.epidemy!=null && demon.epidemy.invader!=null)
                res_str=res_str+' ('+demon.epidemy.invader+')';
            else
                res_str=res_str+' (causer unknown)';
            res[demon.in_room.areaname][demon.epidemy.status].push_back(res_str);
            var iif;
            iif=0;
            for(fiend in demon.epidemy.fiends) {
                iif=iif+1;
                res_str='';
                res_str=res_str+'\t'+iif+'. '+.fmt('%1$C1',fiend)+'(lvl:'+fiend.level+') '+fiend.in_room.name+'('+fiend.in_room.vnum+')';
                if(fiend.dead){
                    res_str=res_str+' DEAD';
                } else {
                    if(fiend.epidemy!=null && fiend.epidemy.plan!=null)
                        res_str=res_str+' plan:'+fiend.epidemy.plan;
                    else
                        res_str=res_str+' plan:nope';
                    if(fiend.epidemy!=null && fiend.epidemy.victim!=null) {
                        if(fiend.epidemy.victim.dead) {
                            res_str=res_str+' victim DEAD';
                        } else {
                            res_str=res_str+' victim:'+.fmt('%1$C1',fiend.epidemy.victim)+'('+fiend.epidemy.victim.pIndexData.vnum+'<-['+fiend.epidemy.primary_target+']) ';
                            if(fiend.epidemy.plan_room!=null)
                                res_str=res_str+fiend.epidemy.plan_room.name+'['+fiend.epidemy.plan_room.vnum+']';
                        }
                    }

                    else
                        res_str=res_str+' no victim';

                    if(fiend.epidemy!=null && fiend.epidemy.invader!=null)
                        res_str=res_str+' ('+fiend.epidemy.invader+')';
                    else
                        res_str=res_str+' (causer unknown)';
                }

                res[demon.in_room.areaname][demon.epidemy.status].push_back('   '+res_str);
            }
        }
        for(mobList in .List().add(epidemyList,invertedList)) {
            for(mob in mobList){
                res_str = '';
                if(mob.dead || !mob.online || mob.epidemy==null)
                    continue;
                if(mob.epidemy.status==null/* || mob.epidemy.invader==null*/)
                    throw('epidemy->show() 1: '+mob.name+'['+mob.in_room.vnum+'] incorrect epidemy structure');

                if(res[mob.in_room.areaname]==null)
                    res[mob.in_room.areaname]=.Array();
                if(res[mob.in_room.areaname][mob.epidemy.status]==null)
                    res[mob.in_room.areaname][mob.epidemy.status]=.List();

                res_str = .fmt('%1$C1[%2$d] %3$s[%4$d]',mob,mob.pIndexData.vnum,mob.in_room.name,mob.in_room.vnum);
                if(leader!=null && leader.pet==this)
                    plan = '(pet)';
                else if(mob.epidemy.plan!=null){
                    res_str=res_str+' plan:'+mob.epidemy.plan;
                    if(mob.epidemy.plan>0) {
                        res_str=res_str+' -> '+mob.epidemy.plan_room.name+'['+mob.epidemy.plan_room.vnum+']';
                    }
                }
                if(mob.epidemy.invader!=null)
                    res_str=res_str+' ('+mob.epidemy.invader+')';
                else
                    res_str=res_str+' (causer unknown)';
                res[mob.in_room.areaname][mob.epidemy.status].push_back(res_str);
            }
        }

        for(area in res.keys) {
            result = result + (area+':\n');
            for(status in res[area].keys) {
                result = result + ('   - '+status+':\n');
                for(str in res[area][status]){
                    result = result + ('      '+str+'\n');
                }
            }
        }
        return result;
    };
    str_utterance = function(str) {
        var new_str, tmp_str;

        var syl_table;
        syl_table = .Array();
        syl_table[' '] = ' ';
        syl_table['ar'] = 'abra';
        syl_table['au'] = 'kada';
        syl_table['bless'] = 'fido';
        syl_table['blind'] = 'nose';
        syl_table['bur'] = 'mosa';
        syl_table['cu'] = 'judi';
        syl_table['de'] = 'oculo';
        syl_table['en'] = 'unso';
        syl_table['light'] = 'dies';
        syl_table['lo'] = 'hi';
        syl_table['mor'] = 'zak';
        syl_table['move'] = 'sido';
        syl_table['ness'] = 'lacri';
        syl_table['ning'] = 'illa';
        syl_table['per'] = 'duda';
        syl_table['ra'] = 'gru';
        syl_table['fresh'] = 'ima';
        syl_table['re'] = 'candus';
        syl_table['son'] = 'sabru';
        syl_table['tect'] = 'infra';
        syl_table['tri'] = 'cula';
        syl_table['ven'] = 'nofo';
        syl_table['ust'] = 'lon';
        syl_table['a'] = 'a'; syl_table['b'] = 'b'; syl_table['c'] = 'q'; syl_table['d'] = 'e';
        syl_table['e'] = 'z'; syl_table['f'] = 'y'; syl_table['g'] = 'o'; syl_table['h'] = 'p';
        syl_table['i'] = 'u'; syl_table['j'] = 'y'; syl_table['k'] = 't'; syl_table['l'] = 'r';
        syl_table['m'] = 'w'; syl_table['n'] = 'i'; syl_table['o'] = 'a'; syl_table['p'] = 's';
        syl_table['q'] = 'd'; syl_table['r'] = 'f'; syl_table['s'] = 'g'; syl_table['t'] = 'h';
        syl_table['u'] = 'j'; syl_table['v'] = 'z'; syl_table['w'] = 'x'; syl_table['x'] = 'n';
        syl_table['y'] = 'l'; syl_table['z'] = 'k';
        syl_table[''] = ''; syl_table['-'] = '-';

        tmp_str = str; new_str = '';
        var len,i; i = 100;
        for(len=tmp_str.size();len>0;len=tmp_str.size()) {
            for(old in syl_table.keys){
                if(old.strPrefix(tmp_str)) {
                    new_str=new_str+syl_table[old];
                    tmp_str=tmp_str.substr(old.size());
                }
            }
            i=i-1;
            if(i<=0)
                return str;
        }

        return new_str;

    };
    getChMaster = function(ch) {
        if(ch==null) return null;

        if(ch.is_npc()) {
            if(ch.leader!=null && !ch.leader.is_npc()) {
                return ch.leader;
            }
            return null;
        } else {
            return ch;
        }
    };
    getPCname = function(name) {
        this = .tmp.epidemy;


        if(charNames[name]==null) {
            var ch;
            ch = .get_char_world(name);
            if(ch==null) {
                return name;
            } else {
                if(ch.russianName!='')
                    charNames[name] = ch.russianName;
                else
                    charNames[name] = ch.name;
            }
        }

        return charNames[name];
    };
    regChar = function(ch) {
        if(ch==null) return;
        this = .tmp.epidemy;
        if(charNames[ch.name]==null) {
            if(ch.russianName=='') charNames[ch.name]=ch.name;
            else charNames[ch.name] = ch.russianName;
        }
    };
    /*функция для фильтра пациентов по epidemy.status*/
    filter_status = function(status) {
        if(epidemy==null || epidemy.status==null || epidemy.status!=status) return false;
        return true;
    };
    /*запуск глобального квеста gq*/
    start = function()    {
        .tmp.epidemy.running=true;
        .tmp.gquest.notifiers["epidemy"] = function() {
            if(clan.name=='invader') {
                act("{yТы можешь способствовать распространению {Y\"Эпидемии {DЗахватчиков{Y\"{y. (подробности по команде {Y{hcgq info{x{y){x");
            } else {
                act("{yТы можешь принять участие в борьбе с распространением {Y\"Эпидемии {DЗахватчиков{Y\"{y. (подробности по команде {Y{hcgq info{x{y){x");
            }
            .tmp.epidemy.rewarding(this);
            return true;
        };

        .tmp.gquest.progressers["epidemy"] = function() {
            var keysArray;
            act("{yБорьба с распространением {Y\"Эпидемии {DЗахватчиков{Y\"{x");

            keysArray=.Array();
            keysArray['demon_slay']='Убийцы демонов';
            keysArray['fiend_slay']='Убицы исчадией';
            keysArray['imp_slay']='Убийцы чертят';
            keysArray['heal']='Экзорцисты';
            for(key in keysArray.keys) {
                if(.tmp.epidemy.statistic[key]==null) continue;

                if(.tmp.epidemy.statistic[key].keys.size()>0)
                    act("{Y%s:",keysArray[key]);
                for(name in .tmp.epidemy.statistic[key].keys) {
                    act("  {y%-15s{Y %-4d{x", name, .tmp.epidemy.statistic[key][name]);
                }
            }
            return true;
        };

        .tmp.gquest.informers["epidemy"] = function() {
        try {
            var keysArray;
            var str;
            var areaList;

            act("{Y\"Эпидемия {DЗахватчиков{Y\"{x");
            if(clan.name=='invader') {
                act("{yТвоим кланом {DЗахватчиков{y был проведен ритуал из гримуара \"{DНекрономикон{y\", и в\n" +
                    "Мир проникло древнее {DЗло{y, уничтожающее всё доброе. Герои пытаются остановить\n" +
                    "\"эпидемию\" и уничтожить прибаывающих Демонов и их  Легионы.  Сможешь  ли  ты\n" +
                    "помочь Злу захватить этот Мир?");
                if(.tmp.epidemy.Demon.instances.size()>0) {
                    areaList=.List();
                    str='';
                    if(.tmp.epidemy.Demon.instances.size()==1)
                        str='{yДемон уже появился в:';
                    else
                        str='{yДемоны уже появились в:';
                        for(demon in .tmp.epidemy.Demon.instances) {
                            if(areaList.has(demon.in_room.areaname)) continue;
                            if(areaList.size()>0)
                                str=str+'{y,';
                            areaList.push_back(demon.in_room.areaname);
                            str=str+' {Y'+demon.in_room.areaname;
                        }
                        act(str+'{y.{x');
                }
                if(.tmp.epidemy.invertedList.size()>0) {
                    areaList=.Array();
                    for(mob in .tmp.epidemy.invertedList){
                        if(mob.dead) {.tmp.epidemy.invertedList.sub(mob);continue;}
                        if(!mob.online) continue;
                        if(areaList[mob.in_room.areaname]==null)
                            areaList[mob.in_room.areaname]=0;
                        areaList[mob.in_room.areaname]=areaList[mob.in_room.areaname]+1;
                    }
                    if(areaList.keys.size()==1) {
                        act('{yВ месте под названием {Y%1$s{y уже {Y%2$d{y одержим%2$Iый|ых|ых.{x'
                            ,areaList.keys.front()
                            ,areaList[areaList.keys.front()]);
                    } else if (areaList.keys.size()<=10) {
                        act('{yОдержимые уже имеются в следующих местах:{x');
                        for(area in areaList.keys) {
                            act('{Y  %15s{y:   %3d{x',area,areaList[area]);
                        }
                    }
                }
            }
            else{
                act("{yКлан {DЗахватчиков{y провел древний ритуал из гримуара \"{DНекрономикон{y\", и  Мир\n" +
                    "заполонила нечисть, пытающаяся обратить всё {Wдоброе{y в  {Dзлое{y.  Найдутся  ли\n" +
                    "в мире Герои способные  остановить  \"эпидемию\"  и  уничтожить  призванное\n" +
                    "{DЗахватчиками Зло{y? Покажи на сколько ты \"{Wбелый и пушистый{y\"! Помоги {WРыцарям{y\n" +
                    "очистить землю от скверны!{x");
                //где искать:
                var res; res=.Array();
                var lists; lists=.Array();
                lists['demon']=.List().add(.tmp.epidemy.Demon.instances);
                lists['fiend']=.List().add(.tmp.epidemy.Fiend.instances);
                lists['imp']=.List().add(.tmp.epidemy.epidemyList.filter(.tmp.epidemy.filter_status(s),'imp')); //.impsList
                lists['obsessed']=.List().add(
                    .tmp.epidemy.epidemyList.filter(.tmp.epidemy.filter_status(s),'infected'),
                    .tmp.epidemy.epidemyList.filter(.tmp.epidemy.filter_status(s),'sick'),
                    .tmp.epidemy.invertedList); //TODO объединить invertedList c epidemyList

                for(key in lists.keys){
                    for(list in lists[key]) {
                        for(mob in list) {
                            if(mob.dead || !mob.online) continue;
                            if(res[mob.in_room.areaname]==null){
                                res[mob.in_room.areaname]=.Array();
                            }
                            if(res[mob.in_room.areaname][key]==null)
                                res[mob.in_room.areaname][key]=0;
                            res[mob.in_room.areaname][key]=res[mob.in_room.areaname][key]+1;
                            if(res[mob.in_room.areaname]['count']==null)
                                res[mob.in_room.areaname]['count']=0;
                            res[mob.in_room.areaname]['count']=res[mob.in_room.areaname]['count']+1;
                        }
                    }
                }
                var areasCounts; areasCounts=.Array();
                for(area in res.keys) {
                    if(areasCounts[res[area]['count']]==null)
                        areasCounts[res[area]['count']]=.List().add(area);
                else
                    areasCounts[res[area]['count']].add(area);
                }
                keysArray=.Array();
                keysArray['demon']='демон%1$I|а|ов';
                keysArray['fiend']='исчади%1$Iе|я|й';
                keysArray['imp']='бес%1$Iёнок|ёнка|ят';
                keysArray['obsessed'] = 'одержим%1$Iый|ых|ых';
                if(res.keys.size()>0) {
                    str='';
                    if(res.keys.size()>10) {
                        str='{yБольше всего проявлений {DЗла{y разведчики {WРыцарей{y обнаружили в следующих местах:{x';
                    } else {
                        str='{yРазведчики {WРыцарей{y обнаружили проявление {DЗла{y в следующих местах:{x';
                    }
                    if(res.keys.size()>1 || .tmp.epidemy.statistic['demon']!=null) {
                        act(str);
                        var actstr; actstr='';
                        var i,count; count = res.keys.size()-10; i=0;
                        for(numb in areasCounts.keys){
                            for(area in areasCounts[numb]) {
                                i=i+1;
                                if(i<count) continue;
                                str='';
                                for(type in .List().add('demon','fiend','imp','obsessed')) {
                                    if(res[area][type]!=null){
                                        if(str!='') str = str + ', ';
                                        if(res[area][type]==1) str = str + .fmt(keysArray[type],1);
                                    else str = str +  res[area][type] + ' ' + .fmt(keysArray[type],res[area][type]);
                                    }
                                }
                                actstr=.fmt('  {Y%1$^s{y: %2$s.{x\n', area, str)+actstr;

                            }
                        }
                        act(actstr);
                    }
                }

                //личный прогресс:
                str='';
                keysArray=.Array();
                keysArray['demon_slay']='убил%1$Gо||а {Y%2$d{y демон%2$Iа|а|ов';
                keysArray['fiend_slay']='убил%1$Gо||а {Y%2$d{y исчад%2$Iие|ия|ий';
                keysArray['imp_slay']='убил%1$Gо||а {Y%2$d{y черт%2$Iёнка|ёнка|ят';
                keysArray['heal']='изгнал%1$Gо||а Зло из {Y%2$d{y существ%2$Iа||';
                for(key in .List().add('demon_slay','fiend_slay','imp_slay','heal')) {
                    if(.tmp.epidemy.statistic[key]!=null && .tmp.epidemy.statistic[key][name]!=null) {
                        if(str=='')
                            str = '{yТы уже ';
                        else
                            str = str + ', ';
                        str = str + .fmt(keysArray[key],this,.tmp.epidemy.statistic[key][name]);
                    }
                }
                if(str!='')
                    act(str+'.{x');
            }


            return true;
        } catch (e) {
        .tmp.epidemy.catchMsg(e);

        }

        };
    };
    stop = function()    {
        this = .tmp.epidemy;

        running = null;

        .tmp.gquest.notifiers["epidemy"] = function(){
            .tmp.epidemy.final_rewarding(this);
            return true;
        };
        .tmp.gquest.informers["epidemy"] = null;
        .tmp.gquest.progressers["epidemy"] = null;

        .gecho('{Y"Эпидемия {DЗахватчиков{Y"{y была остановлена!');
        count_final_reward();
        clear_statistic();
        for(ch in .players) {
            final_rewarding(ch);
        }
    };
    clear_statistic = function() {
        this = .tmp.epidemy;
        //очищаем статистику
/*
        for(type in statistic.keys) {
            if(statistic_total[type]==null)
                statistic_total[type]=.Array();
            for(name in statistic[type].keys){
                if(statistic_total[type][name]==null)
                    statistic_total[type][name]=0;
                statistic_total[type][name]=statistic_total[type][name]+statistic[type][name];
            }
        }
*/
        statistic=.Array();
    };

    check_stop = function() {
        this = .tmp.epidemy;

        if(running==null) return;

        for(list in .List().add(Demon.instances,Fiend.instances,epidemyList,invertedList)){
            for(mob in list) {
                if(mob.dead || !mob.online || mob.epidemy==null) continue;
                else return;
            }
        }

        stop();
    };

    check_reward = function(chname,type) {
        this = .tmp.epidemy;
        if(qp_rewards[type]==null) return;

        if(statistic[type][chname]!=null) {
            var count;
            //проверка по противоположным заслугам "создание импа"<->"убийство импа"
            if(qp_rewards[type]['foul']!=null
                && statistic[qp_rewards[type]['foul']]!=null
                && statistic[qp_rewards[type]['foul']][chname]!=null) {
                if(statistic[type][chname] - statistic[qp_rewards[type]['foul']][chname] >= 0){
                    //н-р: наплодил 10 импов, убил 10 импов - награза за 10 импов
                    count = statistic[type][chname];
                    //если уже награждали за противоположный - отнимаем
                    if(reward[chname]!=null && reward[chname][qp_rewards[type]['foul']]!=null && reward[chname][qp_rewards[type]['foul']]['received']!=null) {
                        count = count - reward[chname][qp_rewards[type]['foul']]['received'];
                    }
                }else{
                    count = 0;
                }
            }
            else if(qp_rewards[type]['minus']!=null
                && statistic[qp_rewards[type]['minus']]!=null
                && statistic[qp_rewards[type]['minus']][chname]!=null) {
                if(statistic[type][chname] - statistic[qp_rewards[type]['minus']][chname] > 0){
                    //н-р: наплодил 5 импов, убил 10 импов - награза от инвайдеров за 5 импов
                    count = statistic[type][chname] - statistic[qp_rewards[type]['minus']][chname];
                }else{
                    count = 0;
                }
            }
            else {
                count = statistic[type][chname];
            }

            count = (count / qp_rewards[type]['count']) * qp_rewards[type]['count'];
            if(count >= qp_rewards[type]['count']) {
                if(reward[chname]==null) reward[chname]=.Array();
                if(reward[chname][type]==null) {
                    reward[chname][type] = .Array();
                    reward[chname][type]['count'] = 0;
                    reward[chname][type]['received'] = 0;
                }
                reward[chname][type]['count']=count;
            }

        }
        var ch;
        ch = .get_char_world(chname);
        if(ch!=null && ch.online) {
            rewarding(ch);
        }
    };
    rewarding = function(ch) {
        this = .tmp.epidemy;
        if(reward[ch.name]==null) return;

        var prize;
        for(type in reward[ch.name].keys) {
            if(qp_rewards[type]['evil']!=true && ch.clan.name=='invader') {
                reward[ch.name][type]=null;
                continue;
            }

            prize = ((reward[ch.name][type]['count'] - reward[ch.name][type]['received'])/qp_rewards[type]['count'])*qp_rewards[type]['qp'];
            if(prize > 0) {
                ch.questpoints = ch.questpoints + prize;
                reward[ch.name][type]['received'] = reward[ch.name][type]['count'];
                ch.act('{yЗа %1$s ты получаешь {Y%2$d{y квестов%2$Iую|ые|ых единиц%2$Iу|ы|'+'.{x',qp_rewards[type]['message'], prize);
            }
        }
    };
    final_rewarding = function(ch) {
        this = .tmp.epidemy;
        debug('final_rewarding: start',null);

        if(reward_final[ch.name]!=null) {

            ch.act('\n{Y"Эпидемия {DЗахватчиков{Y"{y была остановлена!{x');

            if(ch.clan.name!='invader') {
                ch.questpoints = ch.questpoints + reward_final[ch.name]['qp'];
                ch.gold = ch.gold + reward_final[ch.name]['gold'];
                if(ch.clan.name=='knight'){
                    ch.act('{yЗа участие в борьбе с {Y"Эпидемией {DЗахватчиков{Y"{y ты получаешь {Y%1$d{y квестов%1$Iую|ые|ых едини%1$Iцу|цы|ц и {Y%2$d{y золот%2$Iой|ых|ых.{x',reward_final[ch.name]['qp'],reward_final[ch.name]['gold']);
                }else{
                    ch.act('{yЗа помощь {WРыцарям{y в борьбе с {Y"Эпидемией {DЗахватчиков{Y"{y ты получаешь {Y%1$d{y квестов%1$Iую|ые|ых едини%1$Iцу|цы|ц и {Y%2$d{y золот%2$Iой|ых|ых.{x',reward_final[ch.name]['qp'],reward_final[ch.name]['gold']);
                }
                if(reward_final[ch.name]['rank']!=null) {
                    var coupon;
                    coupon = getCoupon(ch,reward_final[ch.name]['rank']);
                    coupon.obj_to_char(ch);
                    ch.act('{yТак же ты получаешь %O4.{x',coupon);
                }
            }
            reward_final[ch.name]=null;
        }
        if(reward_final.keys.size()==0) {
            reward_final = .Array();
            .tmp.gquest.notifiers["epidemy"] = null;
        }
    };
    count_final_reward = function() {

        this = .tmp.epidemy;

        debug('count_final_reward:start',null);

        var jackpot; jackpot = 0;
        var reward_points; reward_points=.Array();
        var reward_rank; reward_rank=.Array();
        var reward_count; reward_count = .Array();
        var total, count; total=0;
        reward_points['necronomicon'] = 30;
        reward_points['demon_slay'] = 10;
        reward_points['fiend_slay'] = 5;
        reward_points['imp_slay'] = 2;
        reward_points['heal'] = 2;
        for(type in statistic.keys){
            if(reward_points[type]==null) {
                continue;}

            count = 0;
            for(name in statistic[type].keys) {
                if(qp_rewards[type]['foul']!=null
                    && statistic[qp_rewards[type]['foul']]!=null
                    && statistic[qp_rewards[type]['foul']][name]!=null) {
                    if(statistic[type][name] - statistic[qp_rewards[type]['foul']][name] >= 0){
                        count=statistic[type][name];
                    }
                } else {
                    count=statistic[type][name];
                }
                if(count>0) {
                    if(reward_count[name]==null){
                        jackpot = jackpot + 25;
                        reward_count[name]=0;
                    }
                    count = (count*reward_points[type]);
                    reward_count[name]=reward_count[name] + count;
                    total = total + count;

                }
            }
        }

        jackpot = jackpot + (total/100)*100;

        for(name in reward_count.keys) {
            debug(.fmt('count_final_reward: %s->%d',name,reward_count[name]),null);

            if(reward_rank[reward_count[name]]==null) {
                reward_rank[reward_count[name]]=.List();
            }
            reward_rank[reward_count[name]].add(name);
            if(reward_final[name]==null){
                reward_final[name]=.Array();
                reward_final[name]['qp']=0;
                reward_final[name]['gold']=0;
            }
            reward_final[name]['qp'] = reward_final[name]['qp'] + get_rest_reward(name);
            reward_final[name]['qp'] = reward_final[name]['qp'] + (jackpot * ((reward_count[name]*100)/total)) / 100;
            reward_final[name]['gold'] = reward_final[name]['gold'] + .number_range(reward_count[name]/2,reward_count[name]);
            debug(.fmt('count_final_reward: qp:%d gold:%d',reward_final[name]['qp'],reward_final[name]['gold']),null);
        }
        var i,count;
        if(reward_rank.keys.size()>3) {
            count = 3;
        } else {
            count = reward_rank.keys.size();
        }
        for(i=1;i<=count;i=i+1) {
            for(name in reward_rank[reward_rank.keys.back()]) {
                debug(.fmt('count_final_reward: %d. %s (%d)',i,name,reward_count[name]),null);
                if(reward_count[name]<100) continue;
                reward_final[name]['rank'] = i;
            }
            reward_rank[reward_rank.keys.back()]=null;
        }
        debug('count_final_reward:end',null);

    };
    get_rest_reward = function(name) {
        this = .tmp.epidemy;
        var result; result = 0;
        if(reward[name]!=null) {
            for(type in reward[name].keys) {
                result = result + (
                    (
                        (reward[name][type]['count'] - reward[name][type]['received'])
                        / qp_rewards[type]['count']
                    ) * qp_rewards[type]['qp']
                );
            }
            reward[name]=null;
        }
        return result;
    };

    catchMsg = function(e) {
        var ch;
        ch = .get_char_world('Zaleshanin');
        if(ch==null)
            ch = .get_char_world('Miyamoto');

        if(ch!=null)
            ch.ptc(e);
        else
            throw e;
    };
    debug = function(str,mob) {
        //if(!.buildplot) return;
        var ch;
        ch = .get_char_world('zaleshanin');
        if(ch==null)
            ch = .get_char_world('miyamoto');
        //
        if(ch!=null) {
            if(mob==null)
                ch.act('debug:%s',str);
            else{
                if(mob.epidemy.debug==null || mob.epidemy.debug==false) return;
                ch.act('debug:%1$C1 [%2$d] %3$s',mob,mob.in_room.vnum,str);
            }
        }

    };

    qp_rewards=.Array();
    qp_rewards['epidemy start']=.Array();
    qp_rewards['epidemy start']['message']='завершенный ритуал';
    qp_rewards['epidemy start']['count']=1;
    qp_rewards['epidemy start']['qp']=5;
    qp_rewards['epidemy start']['evil']=true;

    qp_rewards['demon']=.Array();
    qp_rewards['demon']['message']='появление Демона';
    qp_rewards['demon']['count']=1;
    qp_rewards['demon']['qp']=10;
    qp_rewards['demon']['evil']=true;

    qp_rewards['fiend_kill']=.Array();
    qp_rewards['fiend_kill']['message']='террор сотворённый исчадиями';
    qp_rewards['fiend_kill']['count']=10;
    qp_rewards['fiend_kill']['qp']=1;
    qp_rewards['fiend_kill']['evil']=true;

    qp_rewards['demon_invert']=.Array();
    qp_rewards['demon_invert']['message']='обращённых к Злу Демоном';
    qp_rewards['demon_invert']['count']=10;
    qp_rewards['demon_invert']['qp']=2;
    qp_rewards['demon_invert']['evil']=true;

    qp_rewards['imp_create']=.Array();
    qp_rewards['imp_create']['message']='помощь Захватчикам в захвате Мира';
    qp_rewards['imp_create']['count']=10;
    qp_rewards['imp_create']['qp']=5;
    qp_rewards['imp_create']['evil']=true;
    qp_rewards['imp_create']['minus']='imp_slay';

    qp_rewards['imp_slay']=.Array();
    qp_rewards['imp_slay']['message']='убийство бесят, чертят, импов и квазитов';
    qp_rewards['imp_slay']['count']=5;
    qp_rewards['imp_slay']['qp']=1;
    qp_rewards['imp_slay']['evil']=false;
    qp_rewards['imp_slay']['foul']='imp_create';

    qp_rewards['demon_slay']=.Array();
    qp_rewards['demon_slay']['message']='убийство Демона';
    qp_rewards['demon_slay']['count']=1;
    qp_rewards['demon_slay']['qp']=10;
    qp_rewards['demon_slay']['evil']=false;

    qp_rewards['necronomicon']=.Array();
    qp_rewards['necronomicon']['message']='уничтожение {DНекрономикона{x';
    qp_rewards['necronomicon']['count']=1;
    qp_rewards['necronomicon']['qp']=50;
    qp_rewards['necronomicon']['evil']=false;

    qp_rewards['fiend_slay']=.Array();
    qp_rewards['fiend_slay']['message']='убийство исчадий';
    qp_rewards['fiend_slay']['count']=2;
    qp_rewards['fiend_slay']['qp']=1;
    qp_rewards['fiend_slay']['evil']=false;

    qp_rewards['heal']=.Array();
    qp_rewards['heal']['message']='изгнание Зла';
    qp_rewards['heal']['count']=5;
    qp_rewards['heal']['qp']=2;
    qp_rewards['heal']['evil']=false;

/*
    for(type in statistic.keys) {
        for(name in statistic[type].keys) {
            check_reward(name,type);
        }
    }
*/


})
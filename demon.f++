.apply(function() {
//demonInit = function() {
if(.tmp.epidemy==null) .tmp.epidemy = .Map();
this = .tmp.epidemy;

    var make_demon_list;

    if(demons==null) demons = .List();
    if(triggers==null) triggers = .Map();
    if(invertedList==null) ivertedList = .List();

    get_demon_name = function() {
        this = .tmp.epidemy;
        var dl;
        dl=demon_list.keys.clone();

        for(demon in demons) {
            dl.sub(demon.name.getOneArgument());
        }

        return dl.random();
    };
    get_one_demon = function(room,invader) {
        this = .tmp.epidemy;

        if(demons.size()>=demon_list.size()) {
            room.echo('...и ничего не произошло!');
            throw('epidemy: demon amount owerflow! '+room.name+'['+room.vnum+']');
        }
        for(demon in demons) {
            if(demon.in_room.areaname==room.areaname) {
                room.echo('...и ничего не произошло!');
                throw('epidemy: only one demon for '+room.areaname+'! '+room.name+'['+room.vnum+']');
            }
        }

        var demon;
        var demon_name;

        demon = Demon.create();
        //пишем призванного демона в список
        .tmp.epidemy.demons.push_back(demon);

        demon.epidemy = .Map();
        demon.epidemy.fiends = .List();
        demon.epidemy.fiends_names = .Array();
        demon.epidemy.victimsVnums = .List();
        demon.epidemy.unreachable = .List();
        demon.epidemy.invader = invader;
        demon.epidemy.status = 'demon';
        //считалки
        demon.epidemy.fiend_count=0;
        demon.epidemy.invert_count=0;
        demon.epidemy.fiend_kill_count=0;

        //выдаём демону имя
        demon_name = get_demon_name();
        demon.name = demon_list[demon_name].name;
        demon.short_descr = demon_list[demon_name].short_descr;
        demon.long_descr = demon_list[demon_name].long_descr;
        demon.description = demon_list[demon_name].description;

        demon.addDarkShroud();

        //demon = add_demon_triggers(demon);

        demon.char_to_room(room);
		room.ppl.forEach(function(mob){act('...из дыма и гари появляется %1$C1.',mob);},demon);

		regHistory(.fmt('в месте называемом %1$s, из зерна {DТьмы{x посеянного %2$N5, явился демон %3$C1',room.areaname,getPCname(invader),demon));
		regStat(invader,'demon');
        check_reward(invader,'demon');
    };

    make_demon_list = function(){
        this = .tmp.epidemy;
        demon_list = .Array();

        demon_list['furfur'] = .Map(); //вызывать молнии и громы, порывы ветра и сильнейшие бурные штормы.
        demon_list['furfur'].description = 'Обычный Граф преисподней. Демон материализовался в образе человека с крыльями,\n' +
            'рогами и копытами оленя, и пылающим хвостом змеи.\n';
        demon_list['furfur'].long_descr = 'Демон Фурфур (Furfur) выискивает жертв для своих легионов.\n';
        demon_list['furfur'].short_descr = 'Фурфур||а|у|а|ом|е';
        demon_list['furfur'].name = 'furfur фурфур demon демон';

        demon_list['marchosias'] = .Map(); //изрыгая из пасти огонь.
        demon_list['marchosias'].description = 'Обычный Маркиз преисподней. Демон материализовался в образе волка с крыльями\n' +
            'грифона и хвостом змеи.\n';
        demon_list['marchosias'].long_descr = 'Демон Мархосиас (Marchosias) выискивает жертв для своих легионов.\n';
        demon_list['marchosias'].short_descr = 'Мархосиас||а|у|а|ом|е';
        demon_list['marchosias'].name = 'marchosias мархосиас demon демон';

        demon_list['aamon'] = .Map();
        demon_list['aamon'].description = 'Обычный Маркиз преисподней. Демон материализовался в образе человека с головой\n' +
            'ворона и волчьими зубами.\n';
        demon_list['aamon'].long_descr = 'Демон Аамон (Aamon) выискивает жертв для своих легионов.\n';
        demon_list['aamon'].short_descr = 'Аамон||а|у|а|ом|е';
        demon_list['aamon'].name = 'aamon аамон demon демон';

        demon_list['sitri'] = .Map();
        demon_list['sitri'].description = 'Обычный Принц преисподней. Демон материализовался в образе человека с крыльями\n' +
            'грифона, головой и хвостом леопарда.\n';
        demon_list['sitri'].long_descr = 'Демон Ситри (Sitri) выискивает жертв для своих легионов.\n';
        demon_list['sitri'].short_descr = 'Ситри';
        demon_list['sitri'].name = 'sitri ситри demon демон';

        demon_list['ipos'] = .Map();
        demon_list['ipos'].description = 'Обычный Принц преисподней. Демон материализовался в образе ангела с белыми\n' +
            'крыльями, но с головой льфа, ногами гуся, хвостом зайца.\n';
        demon_list['ipos'].long_descr = 'Демон Ипос (Ipos) выискивает жертв для своих легионов.\n';
        demon_list['ipos'].short_descr = 'Ипос||а|у|а|ом|е';
        demon_list['ipos'].name = 'ipos ипос demon демон';
    };

    /*get_victims_list = function () {
        this = .tmp.epidemy;
        var result;
        var i,l,c,fiend;
        result = .List();
        l = Fiend.instances.clone();
        c = l.size();
        for(i=0;i<c;i=i+1) {
            fiend = l.back();
            l.pop_back();
            if(fiend.epidemy.victim!=null && !fiend.epidemy.victim.dead) {
                result.push_back(fiend.epidemy.victim);
            }
        }

        return result;
    };*/
    get_victims_vnums_array = function (demon) {
        this = .tmp.epidemy;
        var result;
        result = .Array();
        for(fiend in demon.epidemy.fiends) {
            if(fiend.epidemy.primary_target!=null) {
                if(result[fiend.epidemy.primary_target]!=null) {
                    result[fiend.epidemy.primary_target] = result[fiend.epidemy.primary_target] + 1;
                } else {
                    result[fiend.epidemy.primary_target] = 1;
                }
            }
        }

        return result;
    };
    get_mobs_vnums = function(demon) {
        .tmp.epidemy.debug(demon,'demon->get_mobs_vnums(): 1 start');
        var resultList, city, i;
        resultList = demon.epidemy.victimsVnums.clone();//.List();
        city = demon.in_room.areaname;

        for (i = .room_list; i != null; i = i.rnext) {
            if(i.areaname != city
                || !i.isCommon()
                || i.resetMobiles.size() == 0) {
                continue;
            }
            var mob;
            for(vnum in i.resetMobiles) {
                if(resultList.has(vnum)) continue;
                if(demon.epidemy.unreachable.has(vnum)) continue;

                for(mob in .get_mob_index(vnum).instances) {
                    if(mob.alignment>=350) {
                        resultList.push_back(vnum);
                        break;
                    }
                }
            }
        }

        return resultList;
    };
    get_one_good = function(demon,min_level,max_level,weapon_immune_check,ignor_targets) {
        this = .tmp.epidemy;
        var city;

        if(demon.epidemy.victimsVnums==null)
            demon.epidemy.victimsVnums = .List();
        if(demon.epidemy.victimsVnums.size()==0)
            demon.epidemy.victimsVnums = get_mobs_vnums(demon);

        var victimsList;
        victimsList=.Array();
        if(!ignor_targets)
            victimsList = get_victims_vnums_array(demon); //жертвы за которыми высланы исчадия

        var mobList;
        mobList = .List();
        for(vnum in demon.epidemy.victimsVnums) {
            if(victimsList[vnum]!=null && victimsList[vnum]>1) continue;

            for(mob in .get_mob_index(vnum).instances) {
                if(mob.alignment==-1000) continue; //уже обращён
                if(weapon_immune_check && mob.imm_flags & .tables.imm_flags.weapon) continue; //пуленепробиваемые засранцы
                if(min_level!=null && mob.level<min_level) continue;
                if(max_level!=null && mob.level>max_level) continue;
                mobList.push_back(mob);
            }
        }

        return mobList.random();
    };

    demonSleepRoom = function(pulse, ch) {
        this = .tmp.epidemy;

        var room;
        room = ch.in_room;

        .scheduler.sleep(pulse);
        if (ch.dead)
            throw "DemonSleep: demon/fiend is dead";
        if (room != ch.in_room) {
            if(back_on_way(ch, room)) {
                demonSleepRoom(pulse, ch);
            } else
                throw "sleep: demon/fiend left the room";
        }
    };
    demon_plan_check = function(demon){
        this = .tmp.epidemy;
        var city,victim,plan;

        /*
         *  0 - ничего не делаем, ждём
         *  1 - ищем добрячка - посылаем fiends
         */
        /*
        * 2do
        * 5 демонов - идут бить протектора :)
        * */
        //city = demon.in_room.areaname;
        if(demon.epidemy.plan==null) {
            //2do количество исчадий
            if(demon.epidemy.fiends.size()>=10) {
                demon.epidemy.plan=null;
                plan = 0;
            } else {
                victim = get_one_good(demon,12,null,true,false);

                if(victim == null) {
                    plan = 0;
                } else {
                    plan = 1;
                    demon.epidemy.fiend_victim = victim;
                }
            }
        }

        return plan;
    };

    make_demon_list();

    if(Demon==null)  Demon = .get_mob_index(762);
    Demon.postSpec = function(demon){
        try {
        //2do социалов добавить бы
        //2do похоже не работает assist_align
        this = .tmp.epidemy;

        if(demon.dead)
            return;

        if(demon.fighting != null)
            return;

        if(!(demon.position&.tables.position_table.stand)){
            demon.interpret('stand');
            return;
        }

        if(.chance(5)) {
            //кривляка
            demon.interpret(.List().add('aargh', 'amake', 'fume', 'glare', 'grin', 'growl', 'muhaha', 'scream', 'sexplode').random());
            return;
        }

        if(demon.epidemy.plan==null){
            demon.epidemy.plan = demon_plan_check(demon);
        }

        //демон обращает добрых/нейтральных в выернутых злых
        if(demon.epidemy.plan==0 && .chance(10)) {
//            debug(demon,'ищем жертву для обращения');
            if(demon.epidemy.victim==null || demon.epidemy.victim.dead
                || demon.epidemy.victim.fighting!=null) {
//                debug(demon,'выбираем из списка');
                demon.epidemy.victim = get_one_good(demon,0,120,false,true);
                clearGPS(demon);
            }

            if((demon.epidemy.victim==null || demon.epidemy.victim.dead)
                && demon.in_room.ppl.size()>1) {
                for(ppl in demon.in_room.ppl) {
                    if(ppl.alignment>=350 && ppl.fighting==null) {
                        demon.epidemy.victim=ppl;
                        break;
                    }
                }
            }

            if(demon.epidemy.victim==null || demon.epidemy.victim.dead
                || demon.epidemy.victim.fighting!=null) {
                debug(demon,'жертвы нет, дерётся или умерла');
                demon.epidemy.victim = null;
                var exits;
                exits = .List();
                for(direction in demon.in_room.exits(demon)) {
                    for(ppl in demon.in_room.getRoom(direction).ppl) {
                        if(ppl.alignment>-350){
                            exits.push_back(direction);
                            break;
                        }
                    }
                }
                if(exits.size()>0) {
                    debug(demon,'жертвы в '+exits.size()+' направлениях');
                    demon.move_char(exits.random());
                } else {
                    debug(demon,'жертвы в соведних комнатах не найдены');
                }
                return;
            } else {
                if(demon.epidemy.plan_way==null) {
//                    debug(demon,'нет пути к жертве');
                    demon.epidemy.plan_way = find_way(demon,demon.epidemy.victim.in_room);
                }
                if(demon.epidemy.plan_way.size()==0 && demon.in_room != demon.epidemy.victim.in_room) {
//                    debug(demon,'путь закончен, к жертве не пришли');
                    demon.epidemy.victim = null;
                    clearGPS(demon);
                    return;
                } else {
                    if(demon.epidemy.plan_room==null) {
                        demon.epidemy.plan_room = demon.epidemy.victim.in_room;
                        demon.epidemy.plan_waypoint = demon.in_room;
                    }
                }
            }
//            debug(demon,.fmt('%1$C1 -> %2$d (%3$d)',demon.epidemy.victim,demon.epidemy.victim.in_room.vnum,demon.epidemy.plan_way.size()));

            if(demon.in_room == demon.epidemy.victim.in_room) {
                if(demon.epidemy.victim.alignment!=-1000 && demon.epidemy.victim.epidemy==null) {
                    demon.act('Ты бормочешь \'{DYou underestimate the power of the Dark Side{x\'');
                    demon.recho('%1$^C1 бомочет адским голосом \'{D'+str_utterance('You underestimate the power of the Dark Side')+'{x\'',demon);
                    //выворачиваем на изнанку
                    evert(demon.epidemy.victim);
                    //вешаем тригера на лечение и на вылупление импа в случае убийства (имп заразный)
                    demon.epidemy.victim.onSpell = function(ch,spell,before){if(.tmp.epidemy.triggers.sickOnSpell(this,ch,spell,before)) return true;};
                    demon.epidemy.victim.onDeath = function(ch){.tmp.epidemy.triggers.sickOnDeath(this,ch);};
                    demon.epidemy.victim.onExtract = function(count) {.tmp.epidemy.triggers.infectedOnExtract(this,count);};
                    demon.epidemy.victim.epidemy.invader = demon.epidemy.invader;
                    demon.epidemy.victim.epidemy.status = 'inverted';
                    invertedList.push_back(demon.epidemy.victim);
                    regStat(demon.epidemy.invader,'demon_invert');
                    check_reward(demon.epidemy.invader,'demon_invert');
                    if(demon.epidemy.invert_count==null)
                        demon.epidemy.invert_count=0;
                    demon.epidemy.invert_count=demon.epidemy.invert_count+1;
                }
                demon.epidemy.victim = null;
                clearGPS(demon);
            } else {
                make_your_move(demon);
            }

        }

        if(demon.epidemy.plan==1) {
            if(demon.epidemy.fiend_victim==null || demon.epidemy.fiend_victim.dead) {
                demon.epidemy.plan=null;
                throw('epidemy.demon: no victim for calling fiends');
            }

            demon.epidemy.fiend_plan_way = find_way(demon,demon.epidemy.fiend_victim.in_room);
            if(demon.epidemy.fiend_plan_way.size()==0) {
                demon.epidemy.unreachable.push_back(demon.epidemy.fiend_victim.pIndexData.vnum);
                demon.epidemy.victimsVnums.sub(demon.epidemy.fiend_victim.pIndexData.vnum);
            } else {
                demon.interpret('emote делает странные пассы руками... немного помогая себе хвостом и надбровными дугами.');
                demonSleepRoom(2,demon);
                demon.act('Ты бормочешь \'{DДвое из ларца одинаковых с лица{x\'');
                demon.recho('%1$^C1 бомочет адским голосом \'{D'+str_utterance('dvoe iz larca odinakovih s litca')+'{x\'',demon);
                get_fiends(demon,demon.epidemy.fiend_victim);
                demonSleepRoom(2,demon);
                demon.say('{gУбить %1$C4!{x', demon.epidemy.fiend_victim);
            }
            demon.epidemy.fiend_victim = null;
            demon.epidemy.fiend_plan_way = null;
            demon.epidemy.plan = 0;
        }

        } catch (e) {
        .tmp.epidemy.catchMsg(e);
        }
    };
    Demon.onArea = function(demon){
        this = .tmp.epidemy;

        if(demon.fighting != null)
            return;

        if(demon.epidemy.plan==0) {
            demon.epidemy.plan = null;
        }

        var inst_count, mob_inst;
        inst_count=0;
        for(mob_vnum in demon.epidemy.victimsVnums) {
            for(mob in .get_mob_index(mob_vnum).instances) {
                if(mob.alignment>=350) {
                    inst_count=inst_count+1;
                    debug(demon,.fmt('demon->onArea()->instances chk: instance exists: %1$C1(%2$s[%3$d])',mob,mob.in_room.name,mob.in_room.vnum));
                    break;
                }
            }
            if(inst_count>0) break;
        }
        if(inst_count==0) {
            demon.epidemy.victimsVnums=get_mobs_vnums(demon);
        }
    };
    Demon.onDeath = function(demon, ch) {
        this = .tmp.epidemy;
        //выпиливаемся из списка
        demons.sub(demon);
        ch = getChMaster(ch);
        if(ch!=null) {
            regChar(ch);
            regHistory(.fmt('в месте называемом %5$s, демон %1$C1, обративший к {DЗлу{x %3$d существ%3$Iо|а|'+', призвавший %2$d исчад%2$Iие|ия|ий, которые совершили %6$d убийств%6$Iо|а|'+', повержен %4$^N5',
                demon,
                demon.epidemy.fiend_count,
                demon.epidemy.invert_count,
                getPCname(ch.name),
                demon.in_room.areaname,
                demon.epidemy.fiend_kill_count));
            regStat(ch.name, 'demon_slay');
            check_reward(ch.name, 'demon_slay');
        }
    };
    Demon.onExtract = function(demon, count) {
        this = .tmp.epidemy;
        //выпиливаемся из списка
        demons.sub(demon);
        check_stop();
    };
    Demon.onHit = function(demon, demon_slayer, dam, damType, wield) {
        if(wield==null){
            for(ch in .players) {
                if(ch.in_room==demon.in_room) {
                    ch.act('%1$^C1 корчится и кричит от боли.',demon);
                } else if (ch.in_room.area == demon.in_room.area){
                    ch.act('До тебя доносятся нечеловеческие крики боли %1$C2.',demon);
                }
            }
        }else {
            for(ch in demon.in_room.ppl) {
                ch.act('%1$^O1 оставляет глубокие раны на теле %2$C2.',wield,demon);
            }
        }

    };
    Demon.onImmune = function(demon, attacker, dam, damType, wield, dam_flag, skillName) {
            if (damType == 'holy') {
                return dam * 30;
            }

            if(wield!=null) {
                if(wield.extra_flags&.tables.extra_flags.bless) {
                    if(!(wield.extra_flags&.tables.extra_flags.evil || wield.extra_flags&.tables.extra_flags.anti_good)) {
                        return dam * 10;
                    }
                }
                if(wield.value4&.tables.weapon_type2.holy) {
                    return dam * 50;
                }
            }

            return 0;
        };

    //fix
    for(mob in invertedList) {
        if(mob.dead || !mob.online) {
            mob.onExtract = function(count) {.tmp.epidemy.triggers.infectedOnExtract(this,count);};
        }
    }
})

/*       //demon.spec_fun = 'spec_breath_fire';
        //demon.alignment = -1000;
        // Act: [npc sentinel warrior nopurge notrack] -> [rw] act: .tables.act_flags
        //demon.act = .unset_bit(demon.act, .tables.act_flags.sentinel);
        //demon.act = .unset_bit(demon.act, .tables.act_flags.notrack);
        //demon.act = .set_bit(demon.act, .tables.act_flags.necromancer);
        //demon.act = .set_bit(demon.act, .tables.act_flags.nowhere);

        // Aff: [infrared haste berserk regeneration] -> [rw] affected_by: .tables.affect_flags
        //demon.affected_by =  .set_bit(demon.affected_by, .tables.affect_flags.protect_good);

        // Det: [evil invis hidden dark_vision] -> [rw] detection: .tables.detect_flags

        // Imm:  [summon charm disease] -> [rw] imm_flags: .tables.imm_flags
        // demon.imm_flags = .set_bit(demon.imm_flags, .tables.imm_flags.fire);
        // demon.imm_flags = .set_bit(demon.imm_flags, .tables.imm_flags.mental);

        // Res:  [spell weapon fire cold] [rw] res_flags: .tables.res_flags
        // demon.res_flags = .unset_bit(demon.res_flags, .tables.res_flags.weapon);
        // demon.res_flags = .unset_bit(demon.res_flags, .tables.res_flags.spell);

        // Vuln: [lightning mental] [rw] vuln_flags: .tables.vuln_flags
        // demon.vuln_flags = .unset_bit(demon.vuln_flags, .tables.vuln_flags.lightning);
        // demon.vuln_flags = .unset_bit(demon.vuln_flags, .tables.vuln_flags.mental);
        // demon.vuln_flags = .set_bit(demon.vuln_flags, .tables.vuln_flags.holy);
        // demon.vuln_flags = .set_bit(demon.vuln_flags, .tables.vuln_flags.light);
        // demon.vuln_flags = .set_bit(demon.vuln_flags, .tables.vuln_flags. );

        // Off:  [area_attack bash berserk disarm dodge fade fast kick kick_dirt parry rescue trip crush assist_guard] -> [rw] off_flags: .tables.off_flags
        // demon.off_flags = .unset_bit(demon.off_flags, .tables.off_flags.bash);
        // demon.off_flags = .unset_bit(demon.off_flags, .tables.off_flags.rescue);
        // demon.off_flags = .unset_bit(demon.off_flags, .tables.off_flags.trip);
        // demon.off_flags = .unset_bit(demon.off_flags, .tables.off_flags.crush);
        // demon.off_flags = .unset_bit(demon.off_flags, .tables.off_flags.assist_guard);
        // demon.off_flags = .set_bit(demon.off_flags, .tables.off_flags.assist_align);
        // demon.off_flags = .set_bit(demon.off_flags, .tables.off_flags.tail);

        // Group:    [3000]
*/

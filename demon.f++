demonInit = function() {
if(.tmp.epidemy==null) .tmp.epidemy = .Map();
this = .tmp.epidemy;

    var add_demon_triggers, make_demon_list, fillDemonTriggers;

    if(demons==null)
        demons = .List();
    if(triggers==null)
        triggers=.Map();

    //test
    me = .get_char_world('miyamoto');

    get_demon_name = function() {
        this = .tmp.epidemy;
        var l,dl,c,n,i;
        dl=.List();
        l = demons.clone();
        c = l.size();
        for(i=0;i<c;i=i+1) {
            n = l.back().name.getOneArgument();
            dl.push_back(n);
            l.pop_back();
        }
        l = demon_list.keys.clone();
        c = dl.size();
        for(i=0;i<c;i=i+1) {
            l.sub(dl.back());
            dl.pop_back();
        }

        return l.random();
    };
    get_one_demon = function(room) {
        this = .tmp.epidemy;

        if(demons.size()>=demon_list.size())
            throw('epidemy: demon amount owerflow!');

        var demon;
        var demon_name;

        demon = Demon.create();
        //пишем призванного демона в список
        .tmp.epidemy.demons.push_back(demon);

        demon.epidemy = .Map();
        demon.epidemy.fiends = .List();
        demon.epidemy.victimsVnums = .List();
        demon.epidemy.unricheble = .List();

        //выдаём демону имя
        demon_name = get_demon_name();
        demon.name = demon_list[demon_name].name;
        demon.short_descr = demon_list[demon_name].short_descr;
        demon.long_descr = demon_list[demon_name].long_descr;
        demon.description = demon_list[demon_name].description;

        demon.addDarkShroud();

        //demon = add_demon_triggers(demon);

        demon.char_to_room(room);
		room.ppl.forEach(function(mob){act('...из дыма и гари появляется %1$C1.',mob);},demon);
    };

    make_demon_list = function(){
        this = .tmp.epidemy;
        demon_list = .Array();

        demon_list['furfur'] = .Map(); //вызывать молнии и громы, порывы ветра и сильнейшие бурные штормы.
        demon_list['furfur'].description = 'Обычный Граф приисподней. Демон материализовался в образе человека с крыльями,\n' +
            'рогами и копытами оленя, и пылающим хвостом змеи.\n';
        demon_list['furfur'].long_descr = 'Демон Фурфур (Furfur) выискивает жертв для своих легионов.\n';
        demon_list['furfur'].short_descr = 'Фурфур||а|у|а|ом|е';
        demon_list['furfur'].name = 'furfur фурфур demon демон';

        demon_list['marchosias'] = .Map(); //изрыгая из пасти огонь.
        demon_list['marchosias'].description = 'Обычный Маркиз приисподней. Демон материализовался в образе волка с крыльями\n' +
            'грифона и хвостом змеи.\n';
        demon_list['marchosias'].long_descr = 'Демон Мархосиас (Marchosias) выискивает жертв для своих легионов.\n';
        demon_list['marchosias'].short_descr = 'Мархосиас||а|у|а|ом|е';
        demon_list['marchosias'].name = 'marchosias мархосиас demon демон';

        demon_list['aamon'] = .Map();
        demon_list['aamon'].description = 'Обычный Маркиз приисподней. Демон материализовался в образе человека с головой\n' +
            'ворона и волчьими зубами.\n';
        demon_list['aamon'].long_descr = 'Демон Аамон (Aamon) выискивает жертв для своих легионов.\n';
        demon_list['aamon'].short_descr = 'Аамон||а|у|а|ом|е';
        demon_list['aamon'].name = 'aamon аамон demon демон';

        demon_list['sitri'] = .Map();
        demon_list['sitri'].description = 'Обычный Принц приисподней. Демон материализовался в образе человека с крыльями\n' +
            'грифона, головой и хвостом леопарда.\n';
        demon_list['sitri'].long_descr = 'Демон Ситри (Sitri) выискивает жертв для своих легионов.\n';
        demon_list['sitri'].short_descr = 'Ситри';
        demon_list['sitri'].name = 'sitri ситри demon демон';

        demon_list['ipos'] = .Map();
        demon_list['ipos'].description = 'Обычный Принц приисподней. Демон материализовался в образе ангела с белыми\n' +
            'крыльями, но с головой льфа, ногами гуся, хвостом зайца.\n';
        demon_list['ipos'].long_descr = 'Демон Ипос (Ipos) выискивает жертв для своих легионов.\n';
        demon_list['ipos'].short_descr = 'Ипос||а|у|а|ом|е';
        demon_list['ipos'].name = 'ipos ипос demon демон';
    };

    /*get_victims_list = function () {
        this = .tmp.epidemy;
        var result;
        var i,l,c,fiend;
        result = .List();
        l = Fiend.instances.clone();
        c = l.size();
        for(i=0;i<c;i=i+1) {
            fiend = l.back();
            l.pop_back();
            if(fiend.epidemy.victim!=null && !fiend.epidemy.victim.dead) {
                result.push_back(fiend.epidemy.victim);
            }
        }

        return result;
    };*/
    get_victims_vnums_array = function (demon) {
        this = .tmp.epidemy;
        var result;
        result = .Array();
        // var i,l,c,fiend;
        // l = Fiend.instances.clone();
        // c = l.size();
        // for(i=0;i<c;i=i+1) {
        for(fiend in demon.epidemy.fiends) {
            // fiend = l.back();
            // l.pop_back();
            if(fiend.epidemy.primary_target!=null) {
                if(result[fiend.epidemy.primary_target]!=null) {
                    result[fiend.epidemy.primary_target] = result[fiend.epidemy.primary_target] + 1;
                } else {
                    result[fiend.epidemy.primary_target] = 1;
                }
            }
        }

        return result;
    };
    get_mobs_vnums = function(demon) {
        var resultList, city, i;
        resultList = .List();
        city = demon.in_room.areaname;

        for (i = .room_list; i != null; i = i.rnext) {
            if(i.areaname != city
                || !i.isCommon()
                || i.resetMobiles.size() == 0) {
                continue;
            }
            var mob;
            for(vnum in i.resetMobiles) {
                if(demon.epidemy.unricheble.has(vnum)) continue;

                mob = .get_mob_index(vnum).instances.front();

                if(mob==null
                    || mob.imm_flags & .tables.imm_flags.weapon
                    || mob.alignment<350
                    || resultList.has(vnum)) {continue;}

                resultList.push_back(vnum);
            }
        }

        return resultList;
    };
    get_one_good = function(demon,min_level,max_level) {
        this = .tmp.epidemy;
        var city;

        if(demon.epidemy.victimsVnums==null)
            demon.epidemy.victimsVnums = .List();
        if(demon.epidemy.victimsVnums.size()==0)
            demon.epidemy.victimsVnums = get_mobs_vnums(demon);

        var victimsList;
        victimsList = get_victims_vnums_array(demon);

        var mobList;
        mobList = .List();
        for(vnum in demon.epidemy.victimsVnums) {
            if(victimsList[vnum]!=null && victimsList[vnum]>1) continue;

            for(mob in .get_mob_index(vnum).instances) {
                if(min_level!=null && mob.level<min_level) continue;
                if(max_level!=null && mob.level>max_level) continue;
                mobList.push_back(mob);
            }
        }

        return mobList.random();
    };

    demon_plan_check = function(demon){
        this = .tmp.epidemy;
        var city,victim,plan;

        /*
         *  0 - ничего не делаем, ждём
         *  1 - ищем добрячка - посылаем fiends
         */
        /*
        * 2do
        * ничего не могут без меня сделать - идём помогать
        * 5 демонов - идут бить протектора :)
        * */
        //city = demon.in_room.areaname;
        if(demon.epidemy.plan==null) {
            //2do количество исчадий
            if(demon.epidemy.fiends.size()>=10) {
                demon.epidemy.plan=null;
                //test
                demon.interpret('say развелось исчадий, не протолкнуться!');
                plan = 0;
            } else {
                //test
                demon.interpret('say дело было вечером делать было нечего!');
                victim = get_one_good(demon,12,null);

                if(victim == null) {
                    plan = 0;
                    //test
                    demon.interpret('say а где все?!');
                } else {
                    plan = 1;
                    demon.epidemy.victim = victim;
                    //test
                    demon.interpret('say похоже будем убивать!');
                }
            }
        }

        return plan;
    };

    add_demon_triggers = function() {
        this = .tmp.epidemy;
        Demon.postSpec = function(demon){
            try {
            //test
            // demon.say('demon.postSpec start');
            //2do социалов добавить бы
            //2do похоже не работает assist_align
            this = .tmp.epidemy;

            if(demon.fighting != null)
                return;
            if(demon.epidemy.plan==null){
                //test
                demon.interpret('say чем бы заняться?');
                demon.epidemy.plan = demon_plan_check(demon);
            }

            if(demon.epidemy.plan==1) {
                if(demon.epidemy.victim==null || demon.epidemy.victim.dead) {
                    demon.epidemy.plan=null;
                    throw('epidemy.demon: no victim for calling fiends');
                }

                demon.epidemy.plan_way = find_way(demon,demon.epidemy.victim.in_room);
                if(demon.epidemy.plan_way.size()==0) {
                    //test
                    demon.say('нет пути к %1$C1, удаляю %2$i',demon.epidemy.victim,demon.epidemy.victim.pIndexData.vnum);
                    demon.epidemy.unricheble.push_back(demon.epidemy.victim.pIndexData.vnum);
                    demon.epidemy.victimsVnums.sub(demon.epidemy.victim.pIndexData.vnum);
                } else {
                    demon.interpret('emote делает странные пассы руками... немного помогая себе хвостом и надбровными дугами.');
                    .scheduler.sleep(2);
                    get_fiends(demon,demon.epidemy.victim);
                    .scheduler.sleep(2);
                    demon.recho('%1$^C1 произносит \'{gУбить %2$C4!\'{x',demon, demon.epidemy.victim);
                }
                demon.epidemy.victim = null;
                demon.epidemy.plan_way = null;
                demon.epidemy.plan = 0;
            }
            } catch (e) {
                //test
                // .print('epidemy.demon.postSpec:'+e);
                .get_char_world('miyamoto').ptc('epidemy.demon.postSpec:'+e);
            }
        };
        Demon.onArea = function(demon){
            this = .tmp.epidemy;

            if(demon.fighting != null)
                return;

            if(demon.epidemy.plan==0) {
                demon.epidemy.plan = null;
            }
        };

        Demon.onDeath = function(demon, ch) {
            this = .tmp.epidemy;
            //выпиливаемся из списка
            demons.sub(demon);
        };

        Demon.onExtract = function(demon) {
            this = .tmp.epidemy;
            //выпиливаемся из списка
            demons.sub(demon);
        };


        /*onSpell(ch, spell, before) - ch пытается колдовать на нас заклинание spell,
где spell - англ название умения. Вызывается дважды, причем before будет равно true перед кастом,
и false - после каста. Если вернуть true из первого вызова, то заклинание выполнено не будет.
Если вернуть true из второго вызова, то отрицательной реакции на атакующее заклинание не последует.  */
        //test
        // demonOnSpell = function(demon,ch,spell,before) {
        /*demon.onSpell = function(ch,spell,before) {
            //dispel evil
            if(before){
                //test
                /!*if(spell == 'dispel evil' || spell == 'ray of truth'
                    || spell == 'wrath' || spell == 'banishment') {
                    recho("%1$^C1 одной стороной чихает, другой выпускает {Dтёмное облочко{x...", this);
                    return true;
                }*!/
                //test
                .tmp.epidemy.me.ptc('onSpell.before: '+ch.name+'->'+spell+'\n');
            } else {
                //test
                /!*if(spell == 'dispel evil' || spell == 'ray of truth'
                    || spell == 'wrath' || spell == 'banishment') {
                .tmp.epidemy.heal(this);
                    return true;
                }*!/
                //test
                .tmp.epidemy.me.ptc('onSpell.after: '+ch.name+'->'+spell+'\n');

            }
            //ray of truth
        };*/

        /*onHit(ch, dam, damType, wield) - ch нанес нам повреждения размером dam, типом дамаги damType и оружием wield (wield==null при сражении голыми руками).*/
        //test
        //demonOnHit = function(demon, ch, dam, damType, wield) {
        /*demon.onHit = function(ch, dam, damType, wield) {
            var str;
            if(wield==null) {str='голыми руками';} else {str=wield.name;}
            .tmp.epidemy.me.ptc('onHit: '+ch.name+'->'+str+' dam:'+dam+' damType:'+damType+'\n');
        };*/

    };

    fillDemonTrigers();

    Demon = .get_mob_index(762);
    add_demon_triggers();
    make_demon_list();
}

/*       //demon.spec_fun = 'spec_breath_fire';
        //demon.alignment = -1000;
        // Act: [npc sentinel warrior nopurge notrack] -> [rw] act: .tables.act_flags
        //demon.act = .unset_bit(demon.act, .tables.act_flags.sentinel);
        //demon.act = .unset_bit(demon.act, .tables.act_flags.notrack);
        //demon.act = .set_bit(demon.act, .tables.act_flags.necromancer);
        //demon.act = .set_bit(demon.act, .tables.act_flags.nowhere);

        // Aff: [infrared haste berserk regeneration] -> [rw] affected_by: .tables.affect_flags
        //demon.affected_by =  .set_bit(demon.affected_by, .tables.affect_flags.protect_good);

        // Det: [evil invis hidden dark_vision] -> [rw] detection: .tables.detect_flags

        // Imm:  [summon charm disease] -> [rw] imm_flags: .tables.imm_flags
        // demon.imm_flags = .set_bit(demon.imm_flags, .tables.imm_flags.fire);
        // demon.imm_flags = .set_bit(demon.imm_flags, .tables.imm_flags.mental);

        // Res:  [spell weapon fire cold] [rw] res_flags: .tables.res_flags
        // demon.res_flags = .unset_bit(demon.res_flags, .tables.res_flags.weapon);
        // demon.res_flags = .unset_bit(demon.res_flags, .tables.res_flags.spell);

        // Vuln: [lightning mental] [rw] vuln_flags: .tables.vuln_flags
        // demon.vuln_flags = .unset_bit(demon.vuln_flags, .tables.vuln_flags.lightning);
        // demon.vuln_flags = .unset_bit(demon.vuln_flags, .tables.vuln_flags.mental);
        // demon.vuln_flags = .set_bit(demon.vuln_flags, .tables.vuln_flags.holy);
        // demon.vuln_flags = .set_bit(demon.vuln_flags, .tables.vuln_flags.light);
        // demon.vuln_flags = .set_bit(demon.vuln_flags, .tables.vuln_flags. );

        // Off:  [area_attack bash berserk disarm dodge fade fast kick kick_dirt parry rescue trip crush assist_guard] -> [rw] off_flags: .tables.off_flags
        // demon.off_flags = .unset_bit(demon.off_flags, .tables.off_flags.bash);
        // demon.off_flags = .unset_bit(demon.off_flags, .tables.off_flags.rescue);
        // demon.off_flags = .unset_bit(demon.off_flags, .tables.off_flags.trip);
        // demon.off_flags = .unset_bit(demon.off_flags, .tables.off_flags.crush);
        // demon.off_flags = .unset_bit(demon.off_flags, .tables.off_flags.assist_guard);
        // demon.off_flags = .set_bit(demon.off_flags, .tables.off_flags.assist_align);
        // demon.off_flags = .set_bit(demon.off_flags, .tables.off_flags.tail);

        // Group:    [3000]
*/

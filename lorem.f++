.apply(function() {
    /*переписываем все куски с Piece в прототип 9607*/

    if (.tmp.epidemy == null) .tmp.epidemy = .Map();
    this = .tmp.epidemy;

    lorem_version = null;

    if (warlocksList == null)
        warlocksList = .List();

    loremPieceNamesArray = .Array();
    loremPieceNamesArray[0] = 'lorem';
    loremPieceNamesArray[1] = 'ipsum';
    loremPieceNamesArray[2] = 'dolor';
    loremPieceNamesArray[3] = 'sit';
    loremPieceNamesArray[4] = 'amet';

    setLoremPieceNames = function(piece, spell) {
        var extradesc;
        this = piece;

        name = 'piece paper клочок бумаги бумага '+spell;
        short_descr = "клочок||а|у||ом|е бумаги с надписью {x'{D"+spell+"{x'";
        description = 'Клочок бумаги (piece) с магическими символами лежит здесь.\n';

        extradesc = "Клочок бумаги с надписью {x'{D"+spell+"{x'.";
        if(min==0 && max==4) {
            extradesc = extradesc
                +" Похоже это заклинание часть какого-то ритуала.\n"
                +"Возможно тебе стоит поискать книгу, частью страницы которой "
                +"является этот клочок.";
        } else {
            extradesc = extradesc
                +" Похоже этот кусочек бумаги является частью \n"
                +"чего-то большего. Найти бы только чего.";
        }

        set_extra_descr(name, extradesc);

        return piece;
    };

    //находим количество злых неагрессивных мобов-магов/некров
    get_evil_mage = function(count,ch_lvl) {
        var i, r;
        var l, result, areas;
        l = .List(); result = .List(); areas = .List();

        for (i = .char_list; i != null; i = i.next) {
            if (!i.is_npc()) continue;
            if(i.leader != null && i.leader.pet == i) continue;
            //если у моба уже есть бумажка
            if(i.epidemy!=null){
                if(i.get_obj_carry_vnum(.tmp.epidemy.Piece.vnum)==null) {
                    debug(.fmt('lorem.get_evil_mage(%d): %C1 -> has epidemy, have no piece -> clear()',count,i),null);
                    i.clear();
                } else {
                    debug(.fmt('lorem.get_evil_mage(%d): no %C1 -> has epidemy',count,i),null);
                    continue;
                }
            }
            //пусть ходят по разным зонам
            if(areas.has(i.in_room.areaname)){
                continue;
                debug(.fmt('lorem.get_evil_mage(%d): no %C1 -> have mob from %s',count,i,i.in_room.areaname),null);
            }
            //проверяем на алигн, уровень, количество
            if(i.alignment>-350 || i.level >= ch_lvl || i.pIndexData.instances.size() > 1) continue;
            if(!(i.act&.tables.act_flags.mage)
                && !(i.act&.tables.act_flags.necromancer)) continue;
            //проверяем зону на квестовость и моба на агрессивность
            if(i.in_room.area.area_flag&.tables.area_flags.noquest
            || i.in_room.area.area_flag&.tables.area_flags.hidden
            || i.affected_by&.tables.affect_flags.bloodthirst
            || i.act&.tables.act_flags.aggressive)
            continue;
            //убирам практиков
            if(i.act&.tables.act_flags.practice || i.hasDestiny)
            continue;

            l.push_back(i.pIndexData.vnum);
            areas.add(i.in_room.areaname);
        }
        l.sort();
        l.unique();
        debug('lorem.get_evil_mage('+count+')->'+l.size(),null);
        for( i=0 ; i<count ; i=i+1 ) {
            r = l.random();
            debug('  '+i+': '+r,null);
            result.add(.get_mob_index(r).instances.back());
            l.sub(r);
        }

        return result;
    };

    //сгенерировать бумажки с надписями Lorem ipsum dolor sit amet
    loadLoremPieces = function(book,loremArray) {
        this = .tmp.epidemy;
        try {
            var i,wlkList,wlk;
            var onePiece;
            if(book.epidemy==null) throw(.fmt('%O1: has no epidemy field!!!',book));
            if(book.epidemy.ownerName==null) throw(.fmt('%O1: has no ownerName field!!!',book));

            var owner;
            owner = .get_char_world(book.epidemy.ownerName);
            if(owner==null) throw(.fmt('%O1: %s not found',book,book.epidemy.ownerName));

            wlkList = get_evil_mage(loremArray.size(),owner.getModifyLevel());

            var c, cList; cList = loremArray.keys.clone();
            for(i=0 ; i<loremArray.size() ; i=i+1){
                wlk = wlkList.back();
                wlkList.pop_back();

                c = cList.random();
                cList.sub(c);
                //готовим из "холста" клочок заклинания
                onePiece = LoremPiece(c,c,loremArray[c], book.epidemy.ownerName);

                //готовим из найденого мага выдавателя бумажки
                wlk = warlockInit(wlk);

                piece_to_warlock(onePiece, wlk);
                var ii;
                for(ii=onePiece.epidemy.spellIndexMin;ii<=onePiece.epidemy.spellIndexMax;ii=ii+1){
                    book.epidemy.loremPieces[ii]=onePiece;
                }
            }
        } catch (e) {
        .tmp.epidemy.catchMsg('loadLoremPieces():'+e);
        }
    };

    piece_to_warlock = function(piece, wk) {
        piece.obj_to_char(wk);

        //в список чьи бумажки у моба
        wk.epidemy.pieces[piece.epidemy.ownerName] = piece;
    };

    LoremPiece = function(min, max, spell, name){
        this = .tmp.epidemy;
        var piece;

        piece = .tmp.epidemy.Piece.create();

        piece.epidemy = .Map();
        piece.epidemy.spellIndexMin = min;
        piece.epidemy.spellIndexMax = max;
        piece.epidemy.spellName = spell;
        piece.epidemy.ownerName = name;
        piece.epidemy.status = 'lorem piece';

        piece = setLoremPieceNames(piece, spell);

        return piece;
    };

    if (triggers == null) triggers = .Map();
    triggers.LoremOnUse = function(piece, ch,str) {
        if(ch.clan.name!='invader')
            return false;

        var obj, newPiece;
        obj = ch.get_obj_carry(str);
        if(obj==null || obj.epidemy==null || obj.epidemy.status!='lorem piece')
            return false;

        for(one_piece in .List().add(piece,obj)) {
            if(one_piece.epidemy.ownerName!=ch.name) {
                ch.act('Похоже %O1 не из твоей книги. На обороте ты замечешь надпись \'%s\'',one_piece,one_piece.epidemy.ownerName);
                ch.recho('%1$^C1 безуспешно пытается соединить два клочка бумаги.',ch);
                return true;
            }
        }

        if(obj.epidemy.spellIndexMax==null || obj.epidemy.spellIndexMin==null
            || piece.epidemy.spellIndexMax==null || piece.epidemy.spellIndexMin==null )
            throw(.fmt('Piece.onUse: бракованный фрагмент у %C1: %O1 или %O1',ch,piece,obj));

        if(obj.epidemy.spellIndexMax+1 == piece.epidemy.spellIndexMin
            || piece.epidemy.spellIndexMax+1 == obj.epidemy.spellIndexMin) {
            ch.act('Ты прикладываешь один клочок бумаги к другому...\nПо разрыву пробегает фиолетовый огонь, и клочки соединяются.');
            ch.recho('%1$^C1 соединяет два клочка бумаги, между ними вспыхивает фиолетовое пламя и они соединяются.',ch);

            //создаём новый кусок
            var wordIndexMax, wordIndexMin, spells;
            wordIndexMin = .min(piece.epidemy.spellIndexMin,obj.epidemy.spellIndexMin);
            wordIndexMax = .max(piece.epidemy.spellIndexMax,obj.epidemy.spellIndexMax);
            if(piece.epidemy.spellIndexMin==wordIndexMin) {
                spells = piece.epidemy.spellName + ' ' + obj.epidemy.spellName;
            } else {
                spells = obj.epidemy.spellName + ' ' + piece.epidemy.spellName;
            }
        .tmp.epidemy.LoremPiece(wordIndexMin,wordIndexMax,spells,piece.epidemy.ownerName).obj_to_char(ch);
            //убираем старые
            obj.clear();
            obj.extract(true);
            piece.clear();
            piece.extract(true);

        } else {
            ch.act('Похоже этот клочок сюда не подходит.');
            ch.recho('%1$^C1 безуспешно пытается соединить два клочка бумаги.',ch);
        }
        return true;



    };
    triggers.LoremOnExtract = function(piece, count) {
        this = .tmp.epidemy;
        if(count==false) return;

        if(piece.epidemy==null) return;
        if(piece.epidemy.status!='lorem piece') return;
        if(piece.epidemy.ownerName==null|| piece.epidemy.spellIndexMin==null
            || piece.epidemy.spellIndexMax==null
            || piece.epidemy.spellName==null) {
            debug(.fmt('LoremOnExtract(%O1)->extracted: incorrect piece',piece),null);
            return;
        }
        if(.tmp.epidemy.booksList[piece.epidemy.ownerName]!=null
        && .tmp.epidemy.booksList[piece.epidemy.ownerName].online!=true) {
            //уничтожение по таймеру, при выходе с книгой из мира
            debug(.fmt('LoremOnExtract(%O1)->extracted: book is offline',piece),null);
            return;
        }

        //чистим варлока/некроманта если необходимо:
        var carrier; carrier=piece.getCarrier();
        if(carrier!=null) {
            if(carrier.epidemy!=null && carrier.epidemy.pieces!=null) {
                carrier.epidemy.pieces[piece.epidemy.ownerName]=null;
                if(pcarrier.epidemy.pieces.keys.size()==0) {
                    piece.getCarrier().clear();
                }
            }
        }

        if(booksList[piece.epidemy.ownerName]==null || booksList[piece.epidemy.ownerName].online==false) return;
        var owner;
        owner = .get_char_world(piece.epidemy.ownerName);
        if(owner==null) return;
        //новы[й|e] кус[ок|ки] вместо уничтожаемого:
        var i;
        for(i=piece.epidemy.spellIndexMin;i<=piece.epidemy.spellIndexMax;i=i+1) {
            piece_to_warlock(
                LoremPiece(i,
                    i,
                    loremPieceNamesArray[i],
                    piece.epidemy.ownerName),
                warlockInit(get_evil_mage(1, owner.getModifyLevel()).back())
            );
        }

    };
    triggers.LoremOnQuit = function (piece,ch,count) {
        this = .tmp.epidemy;
        if(piece.epidemy==null||piece.epidemy.ownerName==null) {piece.extract(true);}
        else if(piece.epidemy.ownerName!=ch.name) {
            piece.getCarrier().act('Вспыхнув фиолетовым пламенем, %1$O1 изчезает.', piece);
            var owner;
            owner = .get_char_world(piece.epidemy.ownerName);
            if(owner!=null) {
                piece_to_warlock(piece,warlockInit(get_evil_mage(1,owner.getModifyLevel()).back()));
            } else {
                piece.extract(true);
            }
        }
    };
    triggers.LoremOnDrop = function(piece,ch) {
        piece.timer=150;
    };
    triggers.LoremOnPut = function(piece, ch, obj, cont) {
        if(piece.epidemy.ownerName!=null
            && piece.epidemy.ownerName!=ch.name)
            piece.timer=150;
    };
    triggers.LoremOnGet = function(piece,ch) {
        if(piece.epidemy.ownerName!=null
            && piece.epidemy.ownerName==ch.name)
            piece.timer=-1;
    };
})
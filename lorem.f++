.apply(function() {
    var fillPieceTriggers;
    if (.tmp.epidemy == null) .tmp.epidemy = .Map();
    this = .tmp.epidemy;

    lorem_version = '1';
    if (warlocksList == null)
        warlocksList = .List();


    if(Piece == null)
        Piece = .get_obj_index(9607);

    setPieceNames = function(piece, spell) {
        var extradesc;
        this = piece;

        name = 'piece paper клочок бумаги бумага '+spell;
        short_descr = "клочок||а|у||ом|е бумаги с надписью {x'{D"+spell+"{x'";
        description = 'Клочок бумаги (piece) с магическими символами лежит здесь.\n';

        extradesc = "Клочок бумаги с надписью {x'{D"+spell+"{x'.";
        if(min==0 && max==4) {
            extradesc = extradesc
                +" Похоже это заклинание часть какого-то ритуала.\n"
                +"Возможно тебе стоит поискать книгу, частью страницы которой "
                +"является этот клочок.";
        } else {
            extradesc = extradesc
                +" Похоже этот кусочек бумаги является частью \n"
                +"чего-то большего. Найти бы только чего.";
        }

        set_extra_descr(name, extradesc);

        return piece;
    };

    //находим количество злых неагрессивных мобов-магов/некров
    get_evil_mage = function(count) {
        var i, r;
        var l, result, areas;
        l = .List(); result = .List(); areas = .List();

        for (i = .char_list; i != null; i = i.next) {
            if (!i.is_npc()) continue;
            if(i.leader != null && i.leader.pet == i) continue;
            //если у моба уже есть бумажка
            if(i.epidemy!=null){
                continue;
            }
            //пусть ходят по разным зонам
            if(areas.has(i.in_room.areaname))
                continue;
            //проверяем на алигн, уровень, количество
            if(i.alignment>-350 || i.level < 30 || i.pIndexData.instances.size() > 1) continue;
            if(!i.act&.tables.act_flags.mage && !i.act&.tables.act_flags.necromancer) continue;
            //проверяем зону на квестовость и моба на агрессивность
            if(i.in_room.area.area_flag&.tables.area_flags.noquest
            || i.in_room.area.area_flag&.tables.area_flags.hidden
            || i.affected_by&.tables.affect_flags.bloodthirst
            || i.act&.tables.act_flags.aggressive)
            continue;
            //убирам практиков
            if(i.act&.tables.act_flags.practice || i.hasDestiny)
            continue;

            l.push_back(i.pIndexData.vnum);
            areas.add(i.in_room.areaname);
        }
        l.sort();
        l.unique();

        for( i=0 ; i<count ; i=i+1 ) {
            r = l.random();
            result.add(.get_mob_index(r).instances.back());
            l.sub(r);
        }

        return result;
    };

    //сгенерировать бумажки с надписями Lorem ipsum dolor sit amet
    loadLoremPieces = function(book) {
        try {
            var i,wl,wk;
            var loremArray;
            var onePiece;
            if(book.epidemy==null)
                book.epidemy=.Map();

            loremArray = .Array();
            loremArray[0] = 'lorem';
            loremArray[1] = 'ipsum';
            loremArray[2] = 'dolor';
            loremArray[3] = 'sit';
            loremArray[4] = 'amet';

            wl = .tmp.epidemy.get_evil_mage(loremArray.size());

            var c, cList; cList = .List().add(0,1,2,3,4);
            for(i=0 ; i<loremArray.size() ; i=i+1){
                wk = wl.back();
                wl.pop_back();

                c = cList.random();
                cList.sub(c);
                //готовим из "холста" клочок заклинания
                onePiece = LoremPiece(c,c,loremArray[c], book.epidemy.ownerName);

                //готовим из найденого мага выдавателя бумажки
                wk = .tmp.epidemy.warlockInit(wk);

                .tmp.epidemy.piece_to_warlock(onePiece, wk);

            }
        } catch (e) {
        .tmp.epidemy.catchMsg(e);
        }
    };

    piece_to_warlock = function(piece, wk) {
        piece.obj_to_char(wk);

        //в список чьи бумажки у моба
        wk.epidemy.pieces[piece.epidemy.ownerName] = piece;
    };

    LoremPiece = function(min, max, spell, name){
        this = .tmp.epidemy;
        var piece;

        piece = .tmp.epidemy.Piece.create();

        piece.epidemy = .Map();
        piece.epidemy.spellIndexMin = min;
        piece.epidemy.spellIndexMax = max;
        piece.epidemy.spellName = spell;
        piece.epidemy.ownerName = name;
        piece.epidemy.status = 'lorem piece';
        piece.epidemy.version = lorem_version;

        piece = setPieceNames(piece, spell);

        piece.onUse = function(ch,str){return .tmp.epidemy.triggers.pieceOnUse(this,ch,str);};
        piece.onExtract = function(count){.tmp.epidemy.triggers.pieceOnExtract(this,count);};
        piece.onQuit = function(ch,count){.tmp.epidemy.triggers.pieceOnQuit(this,ch,count);};

        piece.onDrop = function(ch){.tmp.epidemy.triggers.pieceOnDrop(this,ch);};
        piece.onPut = function(ch){.tmp.epidemy.triggers.pieceOnPut(this,ch, obj, cont);};
        piece.onGet = function(ch){.tmp.epidemy.triggers.pieceOnGet(this,ch);};

        return piece;
    };

    if (triggers == null) triggers = .Map();

    triggers.pieceOnUse = function(piece, ch,str){
        this = piece;
        if(ch.clan.name!='invader')
            return false;

        var obj, newPiece;

        obj = ch.get_obj_carry(str);
        if(obj==null || obj.epidemy==null || obj.epidemy.spellName==null)
            return false;

        //переименовываем this(больший номер), уничтожаем obj (меньший)
        //obj.epidemy.wordIndexMax+1 == piece.epidemy.wordIndexMin || piece.epidemy.wordIndexMax+1 == obj.epidemy.wordIndexMin
        if(obj.epidemy.spellIndexMax+1 == epidemy.spellIndexMin || epidemy.spellIndexMax+1 == obj.epidemy.spellIndexMin) {


            ch.act('Ты прикладываешь один клочок бумаги к другому...\nПо разрыву пробегает фиолетовый огонь, и клочки соединяются.');
            ch.recho('%1$^C1 соединяет два клочка бумаги, между ними вспыхивает фиолетовое пламя и они соединяются.',ch);

            //создаём новый кусок
            var wordIndexMax, wordIndexMin;
            wordIndexMin = .min(epidemy.spellIndexMin,obj.epidemy.spellIndexMin);
            wordIndexMax = .max(epidemy.spellIndexMax,obj.epidemy.spellIndexMax);
        .tmp.epidemy.LoremPiece(wordIndexMin,wordIndexMax,(obj.epidemy.spellName+' '+epidemy.spellName),epidemy.ownerName).obj_to_char(ch);
            //убираем старые
            obj.clear();
            obj.extract(true);
            this.clear();
            this.extract(true);

        } else {
            ch.act('Похоже этот клочок сюда не подходит.');
            ch.recho('%1$^C1 безуспешно пытается соединить два клочка бумаги.',ch);
        }
        return true;

    };
    /*onExtract(count) - предмет разрушается. count == false означает, что
    разрушение не уменьшит счетчика предметов с этим внумом. Пример - выход
    чара из мира. На момент вызова триггера предмет уже удален из всех списков.*/
    triggers.pieceOnExtract = function (piece, count) {
        this = .tmp.epidemy;
        if(piece.epidemy!=null && booksList[piece.epidemy.ownerName] != null && count) {
            piece_to_warlock(
                LoremPiece(piece.epidemy.spellIndexMin,
                    piece.epidemy.spellIndexMax,
                    piece.epidemy.spellName,
                    piece.epidemy.ownerName),
                warlockInit(get_evil_mage(1).back())
            );
        }
        if(piece.getCarrier()!=null) {
            if(piece.getCarrier().epidemy!=null && piece.getCarrier().epidemy.pieces!=null) {
                piece.getCarrier().epidemy.pieces[piece.epidemy.ownerName]=null;

                if(piece.getCarrier().epidemy.pieces.keys.size()==0) {
                    piece.getCarrier().clear();
                }
            }
        }
    };
    //onQuit(ch,count) - ch покидает мир. Если разрушаем предмет, надо вернуть true.
    // count == false при обычном quit, и true при делите.
    triggers.pieceOnQuit = function (piece,ch,count) {
        this = .tmp.epidemy;
        if(piece.epidemy.ownerName!=ch.name) {
            piece.getCarrier().act('Вспыхнув фиолетовым пламенем, %1$O1 изчезает.', piece);
            piece_to_warlock(piece,warlockInit(get_evil_mage(1).back()));
        }
    };
    triggers.pieceOnDrop = function(piece,ch) {
        if(piece.epidemy!=null && piece.epidemy.ownerName!=null
            && piece.epidemy.ownerName!=ch.name)
            piece.timer=150;
    };
    triggers.pieceOnPut = function(piece, ch, obj, cont) {
        if(piece.epidemy!=null && piece.epidemy.ownerName!=null
            && piece.epidemy.ownerName!=ch.name)
            piece.timer=150;
    };
    triggers.pieceOnGet = function(piece,ch) {
        if(piece.epidemy!=null && piece.epidemy.ownerName!=null
            && piece.epidemy.ownerName==ch.name)
            piece.timer=-1;
    };

    chkLoremVersion = function(piece) {
        if(piece.epidemy.status==null || piece.epidemy.version==null || piece.epidemy.version!=lorem_version) {
            if(piece.epidemy.spellIndexMin!=null
                && piece.epidemy.spellIndexMax!=null
                && piece.epidemy.spellName!=null
                && piece.epidemy.ownerName!=null)
                piece = LoremPiece(piece.epidemy.spellIndexMin,piece.epidemy.spellIndexMax,piece.epidemy.spellName,piece.epidemy.ownerName);
        }
        return piece;
    };

    for(piece in Piece.instances) {
        if(!piece.online) continue;
        if(piece.epidemy==null) continue;
        if(piece.epidemy.spellName==null) continue;
        if(!.List().add('lorem','ipsum','dolor','sit','amet').has(piece.epidemy.spellName)) continue;
        //перепрошиваем устаревшие кусочки
        piece = chkLoremVersion(piece);

        if(piece.getCarrier()==null) {
            piece.timer = 150;
        }
    }

})
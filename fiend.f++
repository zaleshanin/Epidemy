fiendInit = function(){
if(.tmp.epidemy==null) .tmp.epidemy = .Map();
    this = .tmp.epidemy;
    if(triggers==null)
        triggers=.Map();
    var fill_fiend_triggers;

    get_fiends = function(demon, victim) {
        if(victim.dead)
            throw('epidemy.fiend.get_fiend: Victim DEAD');
        this = .tmp.epidemy;

        fiendFst = get_one_fiend(victim);
        fiendSnd = get_one_fiend(victim);

        fiendFst.epidemy.snd = fiendSnd;
        fiendSnd.epidemy.snd = fiendFst;

        fiendFst.char_to_room(demon.in_room);
        fiendSnd.char_to_room(demon.in_room);

        demon.in_room.ppl.forEach( function(demon){
            act('Разверзлись врата преисподней, и хор сотен истязаемых душ заполонил улицу...');
            act('...Из врат выходят два исчадия, готовых исполнить волю %1$C2...',demon);
            act('...Врата со скрипом и грохотом затворяются. Вопли истязаемых душ стихают.');
            },demon );

    };

    get_one_fiend = function(victim) {
        this = .tmp.epidemy;
        var fiend;

        fiend = Fiend.create();

        fiend.epidemy = .Map();
        fiend.epidemy.victim = victim;
        fiend.epidemy.primary_target = victim.pIndexData.vnum;

        fiend.armor0 = victim.armor0;
        fiend.armor1 = victim.armor1;
        fiend.armor2 = victim.armor2;
        fiend.armor3 = victim.armor3;
        fiend.damage_number  = victim.damage_number;
        fiend.damage_type   = victim.damage_type;
        fiend.damroll = victim.damroll;
        fiend.hit = victim.hit;
        fiend.hitroll = victim.hitroll;
        fiend.level = victim.level;
        fiend.mana = victim.mana;
        fiend.max_hit = victim.max_hit;
        fiend.max_mana = victim.max_mana;
        fiend.max_move = victim.max_move;
        fiend.move = victim.move;
        fiend.saving_throw = victim.saving_throw;
        fiend.size = victim.size;
        if(victim.affected_by&.tables.affect_flags.sanctuary)
            fiend.addDarkShroud();

        return fiend;
    };

    find_way = function(mob,room){
        var sectorsDeny;

        sectorsDeny = .set_bit_number(0, .tables.sector_table.water_noswim);
        sectorsDeny = .set_bit_number(sectorsDeny, .tables.sector_table.air);

        return mob.in_room.traverseTo(room, mob, 0, sectorsDeny);
    };

    get_victim = function(vnum) {
        var result, inst_list, tmp_list, i, s, m;

        inst_list = .get_mob_index(vnum).instances.clone();
        s = inst_list.size();

        if( s > 0 ) {
            tmp_list = .List();
            for(i=0;i<s;i=i+1) {
                m = inst_list.back();
                inst_list.pop_back();
                if(m.in_room.isCommon()) {
                    tmp_list.push_back(m);
                }
            }
            s = tmp_list.size();
            if(s>0) {
                result = tmp_list.random();
            }
        }

        return result;
    };

    fiend_plan_check = function (fiend) {
        this = .tmp.epidemy;
        var result;
        result = 0;
        /*
        * 0 - не знаю что делать
        * 1 - идём к цели
        * 2 - пришли к цели - геноцид
        */
        if(fiend.epidemy.plan==null) {
            if(fiend.epidemy.victim==null || fiend.epidemy.victim.dead) {
                //цель померла, надо новую
                if(.get_mob_index(fiend.epidemy.primary_target).instances.size()>0) {
                    fiend.epidemy.victim = get_victim(fiend.epidemy.primary_target);
                    if(!fiend.epidemy.snd.dead){
                        fiend.epidemy.snd.epidemy.victim = fiend.epidemy.victim;
                    }
                    if(fiend.epidemy.victim == null) {
                        result = 0;
                    } else {
                        result = 1;
                    }
                }
            } else {
                result = 1;
            }
        }
        if(result == 1) {

            if(fiend.epidemy.victim.in_room == fiend.in_room) {
                result = 2;
            } else {
                fiend.epidemy.plan_room = fiend.epidemy.victim.in_room;
                fiend.epidemy.plan_waypoint = fiend.in_room;
                fiend.epidemy.plan_way = find_way(fiend, fiend.epidemy.plan_room);
                //2do не умеют стоить маршрут через запертые двери
                if(fiend.epidemy.plan_way.size()==0) {
                    //test
                    fiend.interpret('say этот находится в '+fiend.epidemy.victim.in_room.name+'. Пожалуй убьем другого...');
                    fiend.epidemy.victim = null;
                    clearPlan(fiend);
                }
            }
        }
        if(result == 2) {
            if(fiend.epidemy.victim == null || fiend.epidemy.victim.dead) {
                fiend.epidemy.victim = null;
                result = 0;
            }
        }
        return result;
    };

    make_your_move = function(mob) {
        this = .tmp.epidemy;
        //test
        mob.interpret('say Вижу цель - не вижу препятствий!');
        if(mob.epidemy.plan_way == null) {
            //test
            mob.interpret('say Цель есть, а путя нету... Бедааааа!');
            mob.epidemy.plan = null;
        } else {
            if(mob.epidemy.plan_waypoint==null || mob.epidemy.plan_waypoint != mob.in_room) {
                //test
                mob.interpret('say Сбился с пути, нужен новый маршрут!!!');
                mob.epidemy.plan = null;
            } else {
                //test
                mob.interpret('say направляюсь в '+mob.epidemy.plan_room.name+'('+mob.epidemy.plan_room.vnum+')');
                if(mob.epidemy.plan_nextroom==null) {
                    if(mob.epidemy.plan_way.size()==0 && mob.in_room!=mob.epidemy.plan_room){
                        //test
                        mob.interpret('say Маршрут закончился, на место не прибыли. Нужен новый маршрут!!!');
                        mob.epidemy.plan = null;
                    } else {
                        //test
                        mob.interpret('say Посмотрим, куда нам дальше?');
                        mob.epidemy.plan_nextroom = mob.epidemy.plan_way.front();
                        mob.epidemy.plan_way.pop_front();
                    }
                } else {
                    //2do
                    //getExitFlags        (имя или номер выхода): флаги этого выхода (таблица .tables.exit_flags)
                    //.tables.exit_flags.closed locked isdoor
                    var door;
                    door = mob.in_room.doorTo(mob.epidemy.plan_nextroom);
                    if(mob.in_room.getExitFlags(door) & .tables.exit_flags.closed){
                        //test
                        mob.interpret('say Дверь закрыта.');
                        if(mob.in_room.getExitFlags(door) & .tables.exit_flags.locked) {
                            //test
                            mob.interpret('emote дергает за ручку двери.');
                            mob.interpret('say и похоже заперта.');
                            //2do
                        } else {
                            //test
                            mob.interpret('say Войдем без стука...');
                            //2do открывать нужно правильную дверь
                            mob.interpret('emote открывает дверь.');
                            mob.in_room.open(door);
                        }

                    } else {
                        //test
                        mob.interpret('say Пробуем шагнуть из '+mob.in_room.name+'('+mob.in_room.vnum+') в '+mob.epidemy.plan_nextroom.name+'('+mob.epidemy.plan_nextroom.vnum+')');
                        if(mob.in_room == mob.epidemy.plan_nextroom
                            || mob.move_char(door)){
                            //test
                            mob.interpret('say Получилось. Я пришел в '+mob.in_room.name+'('+mob.in_room.vnum+')');
                            mob.epidemy.plan_waypoint = mob.epidemy.plan_nextroom;
                            mob.epidemy.plan_nextroom = null;
                            if(mob.in_room == mob.epidemy.plan_room) {
                                //test
                                mob.interpret('say Похоже я на месте!');
                                clearPlan(mob);
                                mob.epidemy.plan_room = mob.in_room;
                            }
                        } else {
                            //test
                            mob.interpret('say Беда однако. Не ходится туда!');
                            //.tmp.epidemy.clearGPS(fiend);
                        }
                    }
                }
            }
        }
    };

    fill_fiend_triggers = function(Fiend){
        this = Fiend;
        onSpec = function(fiend) {
            this = .tmp.epidemy;

            if(fiend.fighting != null)
                return;

            if(fiend.epidemy.plan == null) {
                fiend.epidemy.plan = fiend_plan_check(fiend);
            }

            if(fiend.epidemy.plan == 0) {
                //видимо спамим
                //test
                fiend.interpret('say Я видимо должен что-то сделать?!');
            }

            if(fiend.epidemy.plan == 1) {
                //ходим
                make_your_move(fiend);
            }

            if(fiend.epidemy.plan == 2) {
                if(fiend.epidemy.victim.dead ||
                    fiend.in_room != fiend.epidemy.victim.in_room) {
                    clearPlan(fiend);
                } else {
                    //бьем
                    fiend.multi_hit(fiend.epidemy.victim);
                }
            }
        };

        onKill = function(fiend, ch) {
            this = .tmp.epidemy;
            if(fiend.epidemy.victim == ch) {
                clearPlan(fiend);
                if(!fiend.epidemy.snd.dead) {
                    clearPlan(fiend.epidemy.snd);
                }
            }
        };

        onArea = function(fiend) {
            if(fiend.epidemy.plan == 0)
                fiend.epidemy.plan = null;
        };
    };

    Fiend = .get_mob_index(763);
    fill_fiend_triggers(Fiend);
}
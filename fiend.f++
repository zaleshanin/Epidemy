fiendInit = function(){
if(.tmp.epidemy==null) .tmp.epidemy = .Map();
    this = .tmp.epidemy;
    if(triggers==null)
        triggers=.Map();
    var fill_fiend_triggers;

    get_fiends = function(demon, victim) {
        if(victim.dead)
            throw('epidemy.fiend.get_fiend: Victim DEAD');
        this = .tmp.epidemy;

        fiendFst = get_one_fiend(victim);
        fiendSnd = get_one_fiend(victim);

        fiendFst.epidemy.snd = fiendSnd;
        fiendSnd.epidemy.snd = fiendFst;

        fiendFst.char_to_room(demon.in_room);
        fiendSnd.char_to_room(demon.in_room);

        demon.in_room.ppl.forEach( function(demon){
            act('Разверзлись врата преисподней, и хор сотен истязаемых душ заполонил улицу...');
            act('...Из врат выходят два исчадия, готовых исполнить волю %1$C2...',demon);
            act('...Врата со скрипом и грохотом затворяются. Вопли истязаемых душ стихают.');
            },demon );

    };

    get_one_fiend = function(victim) {
        this = .tmp.epidemy;
        var fiend;

        fiend = Fiend.create();

        fiend.epidemy = .Map();
        fiend.epidemy.victim = victim;
        fiend.epidemy.primary_target = victim.pIndexData.vnum;

        fiend.armor0 = victim.armor0;
        fiend.armor1 = victim.armor1;
        fiend.armor2 = victim.armor2;
        fiend.armor3 = victim.armor3;
        fiend.damage_number  = victim.damage_number;
        fiend.damage_type   = victim.damage_type;
        fiend.damroll = victim.damroll;
        fiend.hit = victim.hit;
        fiend.hitroll = victim.hitroll;
        fiend.level = victim.level;
        fiend.mana = victim.mana;
        fiend.max_hit = victim.max_hit;
        fiend.max_mana = victim.max_mana;
        fiend.max_move = victim.max_move;
        fiend.move = victim.move;
        fiend.saving_throw = victim.saving_throw;
        fiend.size = victim.size;
        if(victim.affected_by&.tables.affect_flags.sanctuary)
            fiend.addDarkShroud();

        return fiend;
    };

    find_way = function(mob,room){
        var sectorsDeny;

        sectorsDeny = .set_bit_number(0, .tables.sector_table.water_noswim);
        sectorsDeny = .set_bit_number(sectorsDeny, .tables.sector_table.air);

        return mob.in_room.traverseTo(room, mob, 0, sectorsDeny);
    };

    get_victim = function(vnum) {
        var result, inst_list, tmp_list, i, s, m;

        inst_list = .get_mob_index(vnum).instances.clone();
        s = inst_list.size();

        if( s > 0 ) {
            tmp_list = .List();
            for(i=0;i<s;i=i+1) {
                m = inst_list.back();
                inst_list.pop_back();
                if(m.in_room.isCommon()) {
                    tmp_list.push_back(m);
                }
            }
            s = tmp_list.size();
            if(s>0) {
                result = tmp_list.random();
            }
        }

        return result;
    };

    fiend_plan_check = function (fiend) {
        this = .tmp.epidemy;
        var result;
        result = 0;
        /*
        * 0 - не знаю что делать
        * 1 - идём к цели
        * 2 - пришли к цели - геноцид
        */
        if(fiend.epidemy.plan==null) {
            if(fiend.epidemy.victim==null || fiend.epidemy.victim.dead) {
                //цель померла, надо новую
                if(.get_mob_index(fiend.epidemy.primary_target).instances.size()>0) {
                    fiend.epidemy.victim = get_victim(fiend.epidemy.primary_target);
                    if(!fiend.epidemy.snd.dead){
                        fiend.epidemy.snd.epidemy.victim = fiend.epidemy.victim;
                    }
                    if(fiend.epidemy.victim == null) {
                        result = 0;
                    } else {
                        result = 1;
                    }
                }
            } else {
                result = 1;
            }
        }
        if(result == 1) {

            if(fiend.epidemy.victim.in_room == fiend.in_room) {
                result = 2;
            } else {
                fiend.epidemy.plan_room = fiend.epidemy.victim.in_room;
                fiend.epidemy.plan_waypoint = fiend.in_room;
                fiend.epidemy.plan_way = find_way(fiend, fiend.epidemy.plan_room);
                //2do не умеют стоить маршрут через запертые двери
                if(fiend.epidemy.plan_way.size()==0) {
                    //test
                    fiend.interpret('say этот находится в '+fiend.epidemy.victim.in_room.name+'. Пожалуй убьем другого...');
                    fiend.epidemy.victim = null;
                    clearPlan(fiend);
                }
            }
        }
        if(result == 2) {
            if(fiend.epidemy.victim == null || fiend.epidemy.victim.dead) {
                fiend.epidemy.victim = null;
                result = 0;
            }
        }
        return result;
    };

    make_your_move = function(mob) {
        this = .tmp.epidemy;
        //test
        mob.interpret('say Вижу цель - не вижу препятствий!');
        if(mob.epidemy.plan_way == null) {
            //test
            mob.interpret('say Цель есть, а путя нету... Бедааааа!');
            mob.epidemy.plan = null;
        } else {
            if(mob.epidemy.plan_waypoint==null || mob.epidemy.plan_waypoint != mob.in_room) {
                //test
                mob.interpret('say Сбился с пути, нужен новый маршрут!!!');
                clearPlan(mob);//.epidemy.plan = null;
            } else {
                //test
                mob.interpret('say направляюсь в '+mob.epidemy.plan_room.name+'('+mob.epidemy.plan_room.vnum+')');
                if(mob.epidemy.plan_nextroom==null) {
                    if(mob.epidemy.plan_way.size()==0 && mob.in_room!=mob.epidemy.plan_room){
                        //test
                        mob.interpret('say Маршрут закончился, на место не прибыли. Нужен новый маршрут!!!');
                        mob.epidemy.plan = null;
                    } else {
                        //test
                        mob.interpret('say Посмотрим, куда нам дальше?');
                        mob.epidemy.plan_nextroom = mob.epidemy.plan_way.front();
                        mob.epidemy.plan_way.pop_front();
                    }
                } else {
                    //2do
                    //getExitFlags        (имя или номер выхода): флаги этого выхода (таблица .tables.exit_flags)
                    //.tables.exit_flags.closed locked isdoor
                    var door;
                    door = mob.in_room.doorTo(mob.epidemy.plan_nextroom);
                    if(mob.in_room.getExitFlags(door) & .tables.exit_flags.closed){
                        //test
                        mob.interpret('say Дверь закрыта.');
                        if(mob.in_room.getExitFlags(door) & .tables.exit_flags.locked) {
                            //test
                            mob.recho('%1$^C1 дергает за ручку %2$N2.',mob,mob.in_room.exitShortDescr(door));
                            mob.interpret('say и похоже заперта.');
                            //2do
                        } else {
                            //test
                            mob.interpret('say Войдем без стука... прымо в '+mob.in_room.exitKeyword(door).getOneArgument() + ' что на '+mob.in_room.doorName(door));
                            //открывать нужно правильную дверь
                            //зря Руфину тиранил - в комнате может быть несколько выходов с одинаковыми кейвордами
                            //mob.interpret('open '+mob.in_room.exitKeyword(door).getOneArgument());
                            mob.interpret('open '+mob.in_room.doorName(door));

                            //mob.in_room.open(door);
                            //mob.recho('%1$^C1 открывает %2$N4.',mob,mob.in_room.exitShortDescr(door));

                        }

                    } else {
                        //test
                        mob.interpret('say Пробуем шагнуть из '+mob.in_room.name+'('+mob.in_room.vnum+') в '+mob.epidemy.plan_nextroom.name+'('+mob.epidemy.plan_nextroom.vnum+')');
                        if(mob.in_room == mob.epidemy.plan_nextroom
                            || mob.move_char(door)){
                            //test
                            mob.interpret('say Получилось. Я пришел в '+mob.in_room.name+'('+mob.in_room.vnum+')');
                            mob.epidemy.plan_waypoint = mob.epidemy.plan_nextroom;
                            mob.epidemy.plan_nextroom = null;
                            if(mob.in_room == mob.epidemy.plan_room) {
                                //test
                                mob.interpret('say Похоже я на месте!');
                                if(mob.epidemy.plan<3)
                                    clearPlan(mob);
                                mob.epidemy.plan_room = mob.in_room;
                            }
                        } else {
                            //test
                            mob.interpret('say Беда однако. Не ходится туда!');
                            //.tmp.epidemy.clearGPS(fiend);
                        }
                    }
                }
            }
        }
    };

    //loot
    get_equiped_armor = function(obj,mob) {
        var i,c,l,wl,eq;
        if(obj.wear_locations.size()>1) {
            l = obj.wear_locations.keys.clone();
            c = l.size();
            for(i=0;i<c;i=i+1) {
                wl = l.back();
                l.pop_back();

                eq = mob.get_eq_char(wl);

                if(eq==null) {
                    obj.wear_loc = wl;
                }

                if(obj.eq==null && i==0 && eq!=null) {
                    obj.eq = eq;
                    obj.wear_loc = wl;
                } else {
                    if(eq!=null && obj.eq!=null){
                        if(is_better_armor(eq, obj.eq)) {
                            obj.eq=eq;
                            obj.wear_loc = eq.wear_loc;
                        }
                    } else {
                        obj.eq=null;
                    }
                }
            }
        } else {
            obj.wear_loc = obj.wear_locations.keys.back();
            obj.eq = mob.get_eq_char(obj.wear_loc);
        }
        return obj;
    };
    is_better_armor = function(obj,newobj) {
        if(obj.item_type!=.tables.item_table.armor && newobj.item_type==.tables.item_table.armor) {
            return true;
        }
        if(obj.item_type==.tables.item_table.armor && newobj.item_type!=.tables.item_table.armor) {
            return false;
        }
        if(obj.item_type!=.tables.item_table.armor && newobj.item_type!=.tables.item_table.armor) {
            if(newobj.level > obj.level) {
                return true;
            }
        }
        if(newobj.value0+newobj.value1+newobj.value2+newobj.value3+newobj.value4 > obj.value0+obj.value1+obj.value2+obj.value3+obj.value4) {
            return true;
        }

        return false;
    };
    wear_item = function(mob,t,item,replaced) {
        .scheduler.sleep(1);

        mob.recho(t.get_msg, mob, item, t.conteiner);
        item.obj_to_char(mob);

        if(replaced!=null) {
            .scheduler.sleep(1);

            mob.recho(t.remove_msg, mob, replaced);
            replaced.unequip();

            .scheduler.sleep(1);

            mob.recho(t.drop_msg, mob, replaced);
            replaced.obj_to_room(mob.in_room);
        }

        .scheduler.sleep(1);

        mob.recho(t.wear_msg, mob, item);
        item.equip(t.wear_loc);

        .scheduler.sleep(1);
    };
    scavenge = function(mob,items,corpse) {
        //test
        if(corpse==null)
            mob.say('будем лутить '+items.size()+' штук.');
        else
            mob.say('будем лутить из трупа '+items.size()+' штук.');

        this = .tmp.epidemy;
        var cl, ci, cc, c, t;
        var il, ii, ic, i;
        var eq, eq_l, wloc;
        var obj, str;

        il = items.clone();
        ic = il.size();
        for(ii=0;ii<ic;ii=ii+1) {
            i = il.back();
            il.pop_back();
            //test
            if(i.dead) {
                mob.say('a уже тю-тю! ('+ii+')');
                continue;
            } else if ((corpse==null && i.in_room!=mob.in_room) || (corpse!=null && i.in_obj!=corpse)) {
                mob.say('а %1$O1 кто-то уже упёр. ('+ii+')',i);
                continue;
            }
            mob.say('таaaксcc... %1$O1...',i);

            if(i.item_type==.tables.item_table.npc_corpse) {
                scavenge(mob, i.items, i);
            } else {
                //test
                //mob.say('%1$O1 '+i.level+' левела, мой левел - '+mob.level,i);

                if(i.level>mob.level+3 || !mob.can_see_obj(i) || !mob.can_get_obj(i))
                    continue;

                //test
                //mob.say('могу поднять %1$O1, могу видеть.',i);

                t = .Map();
                t.conteiner = corpse;
                if(corpse==null) {
                    t.get_msg = '%1$^C1 берет %2$O4.';
                } else {
                    t.get_msg = '%1$^C1 берет %2$O4 из %3$O2.';
                }
                t.drop_msg = '%1$^C1 бросает %2$O4.';
                t.remove_msg = '%1$^C1 снимает %2$O4.';

                if(i.item_type == .tables.item_table.money)
                {
                    str='';
                    if(i.value0!=0){
                        if(i.value0==1)
                            str=str+'серебряную';
                        else
                            str=str+i.value0+' серебряных';
                    }
                    if(i.value1!=0) {
                        if(str!='')
                            str=str+' и ';
                        if(i.value1==1)
                            str=str+'золотую';
                        else
                            str=str+i.value1+' золотых';
                    }
                    if(i.value0+i.value1 == 1)
                        str=str+' монету';
                    else
                        str=str+' монеты';

                    if(corpse==null)
                        str='%1$^C1 берет '+str+'.';
                    else
                        str='%1$^C1 берет '+str+' из %2$O2.';

                    mob.recho(str,mob,corpse);
                    mob.gold=mob.gold+i.value1;
                    mob.silver=mob.silver+i.value0;

                    i.extract(true);

                }
                else  if(i.item_type == .tables.item_table.container)
                {
                    //t = 'container';
                }
                else if(i.item_type == .tables.item_table.light)
                {
                    t.remove_msg = '%1$^C1 гасит свет, исходящий от %2$O2.';
                    t.wear_msg = '%1$^C1 зажигает %2$O4 и берет его в руки.';
                    t.wear_loc = 'light';

                    eq = mob.get_eq_char(t.wear_loc);
                    if(eq==null || i.level>eq.level) {
                        wear_item(mob,t,i,eq);
                    } else {
                    mob.say('моё %1$O1, похоже, лучше...',eq);
                }
                }
                else if(i.item_type == .tables.item_table.weapon)
                {
                    t.wear_msg = '%1$^C1 вооружается %2$O5.';
                    t.wear_loc = 'wield';

                    eq = mob.get_eq_char(t.wear_loc);
                    if(eq==null || ((i.value2+1)*i.value1/2)>((eq.value2+1)*eq.value1/2)){
                        wear_item(mob,t,i,eq);
                    } else {
                        mob.say('моё %1$O1, похоже, лучше...',eq);
                    }
                }
                else if(i.item_type == .tables.item_table.armor
                || i.item_type == .tables.item_table.treasure
                || i.item_type == .tables.item_table.jewelry
                || i.item_type == .tables.item_table.gem)
                {
                    obj=.Map();
                    obj.wear_locations=.Array();
                    if(i.wear_flags&.tables.wear_flags.wear_finger) {
                        obj.wear_locations['finger_l'] = '%1$^C1 надевает %2$O4 на левый палец.';
                        obj.wear_locations['finger_r'] = '%1$^C1 надевает %2$O4 на правый палец.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_neck) {
                        obj.wear_locations['neck_1'] = '%1$^C1 надевает %2$O4 вокруг шеи.';
                        obj.wear_locations['neck_2'] = '%1$^C1 надевает %2$O4 вокруг шеи.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_wrist) {
                        obj.wear_locations['wrist_l'] = '%1$^C1 надевает %2$O4 вокруг левого запястья.';
                        obj.wear_locations['wrist_r'] = '%1$^C1 надевает %2$O4 вокруг правого запястья.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_body) {
                        obj.wear_locations['body'] = '%1$^C1 надевает %2$O4 на тело.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_head) {
                        obj.wear_locations['head'] = '%1$^C1 надевает %2$O4 на голову.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_legs) {
                        obj.wear_locations['legs'] = '%1$^C1 надевает %2$O4 на бедра.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_feet) {
                        obj.wear_locations['feet'] = '%1$^C1 надевает %2$O4 на ноги.';
                    }  else if(i.wear_flags&.tables.wear_flags.wear_hands) {
                        obj.wear_locations['hands'] = '%1$^C1 надевает %2$O4 на руки.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_arms) {
                        obj.wear_locations['arms'] = '%1$^C1 надевает %2$O4 на плечи.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_shield) {
                        obj.wear_locations['shield'] = '%1$^C1 надевает %2$O4 как щит.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_about) {
                        obj.wear_locations['about'] = '%1$^C1 накидывает %2$O4 вокруг тела.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_waist) {
                        obj.wear_locations['waist'] = '%1$^C1 надевает %2$O4 вокруг талии.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_face) {
                        obj.wear_locations['face'] = '%1$^C1 надевает %2$O4 прикрывая лицо.';
                    } else if(i.wear_flags&.tables.wear_flags.hold) {
                        obj.wear_locations['hold'] = '%1$^C1 берёт в руки %2$O4.';
                    } else if(i.wear_flags&.tables.wear_flags.wear_float) {
                        obj.wear_locations['float'] = '%1$^C1 запускает %2$O4 кружиться вокруг себя.';
                    } else {
                        // 		mob.ptc('-['+c.pIndexData.vnum+'] '+c.name+' ('+t+');\n');
                        continue;
                    }

                    obj = get_equiped_armor(obj,mob);

                    t.wear_msg = obj.wear_locations[obj.wear_loc];
                    t.wear_loc = obj.wear_loc;

                    if(obj.eq==null || is_better_armor(obj.eq,i)) {
                        wear_item(mob,t,i,obj.eq);
                    } else {
                        mob.say('моё %1$O1, похоже, лучше...',obj.eq);
                    }

                }

            }
        }

    };
    time_to_loot = function (mob) {
        var mob_list, i, count, m;
        mob_list = mob.in_room.list_mob_vnum(mob.pIndexData.vnum);
        count = mob_list.size();
        //test
        mob.say('нас таких тут аж %1$S.',count);
        for(i=0;i<count;i=i+1){
            m = mob_list.back();
            mob.say(''+i+' - %1$C1',m);
            mob_list.pop_back();
            if(m.epidemy.plan==3 || m.epidemy.plan==4 ) {
                //test
                mob.say('%1$C1 уже грабит.',m);
                return false;
            }
        }
        //test
        mob.say('ну, значит прийдется мне...');
        return true;
    };
    loot = function(mob){
        this = .tmp.epidemy;
        if(mob.in_room.items.size()>0) {
            //test
            mob.say('о! тут что-то есть!');
            if(time_to_loot(mob)) {
                //test
                mob.interpret('smile');
                mob.epidemy.plan=3;
            } else {
                //test
                mob.interpret('cry');
                mob.epidemy.plan=0;
            }
        }
    };
    //end loot

    fill_fiend_triggers = function(Fiend){
        this = Fiend;

        onSpec=null;

        postSpec = function(fiend) {
            try{
            this = .tmp.epidemy;

            if(fiend.dead)
                return;

            if(fiend.fighting != null)
                return;

            if(!fiend.epidemy.snd.dead && fiend.epidemy.snd.fighting!=null
                && fiend.epidemy.snd.in_room == fiend.in_room
                && fiend.epidemy.snd.fighting != fiend.epidemy.victim) {
                if(.chance(80))
                    fiend.interpret('yell ЗА ЗЛО!!! ЗА ЗАХВАТЧИКОВ!!! ВО СЛАВУ ТЕМНОГО ВЛАСТЕЛИНА!!!');
                else
                    fiend.interpret('yell НАШИХ БЬЮТ!!!');

                fiend.multi_hit(fiend.epidemy.snd.fighting);
            }

            if(fiend.epidemy.plan == null){
                if(fiend.epidemy.primary_target!=null) {
                    fiend.epidemy.plan = fiend_plan_check(fiend);
                }
            }

            if(fiend.epidemy.plan == 0) {
                //test
                fiend.interpret('say а может лут?!');
                loot(fiend);
                //test
                if(fiend.epidemy.plan == 0)
                    fiend.say('план не изменился');
                //2do видимо спамим
                //test
                fiend.interpret('say Я видимо должен что-то сделать?!');
            }

            //ходим
            if(fiend.epidemy.plan == 1) {
                make_your_move(fiend);
            }

            //бьем
            if(fiend.epidemy.plan == 2) {
                if(fiend.epidemy.victim.dead ||
                    fiend.in_room != fiend.epidemy.victim.in_room) {
                    clearPlan(fiend);
                } else {
                    fiend.multi_hit(fiend.epidemy.victim);
                }
            }

            //собирательство
                //plan 3 - собираем
                //plan 4 - ждем пока всё соберем
            if(fiend.epidemy.plan==3) {
                var corpse;
                fiend.epidemy.plan=4;
                scavenge(fiend, fiend.in_room.items, corpse);
                if(!fiend.epidemy.snd.dead) {
                    if(fiend.epidemy.snd.in_room == fiend.in_room && fiend.epidemy.snd.epidemy.plan==0)
                        fiend.epidemy.snd.epidemy.plan=3;
                }
                clearPlan(fiend);
            }
            }catch(e) {
                //test
                .get_char_world('miyamoto').ptc('fiend.postSpec: '+e);
            }
        };

        onEntry = function(fiend) {
            this = .tmp.epidemy;
            fiend.interpret('say а может лут?! (план:'+fiend.epidemy.plan+')');
            loot(fiend);
            fiend.interpret('say (план:'+fiend.epidemy.plan+')');
        };

        onKill = function(fiend, ch) {
            this = .tmp.epidemy;
            if(fiend.epidemy.victim == ch) {
                clearPlan(fiend);
                fiend.epidemy.plan=3;
                if(!fiend.epidemy.snd.dead) {
                    clearPlan(fiend.epidemy.snd);
                    if(fiend.epidemy.snd.in_room == fiend.in_room)
                        fiend.epidemy.snd.epidemy.plan=0;
                }
            }
        };

        onArea = function(fiend) {
            if(fiend.epidemy.plan == 0)
                fiend.epidemy.plan = null;
        };
    };

    Fiend = .get_mob_index(763);
    fill_fiend_triggers(Fiend);
}
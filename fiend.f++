fiendInit = function(){
    if(.tmp.epidemy==null) .tmp.epidemy = .Map();
    this = .tmp.epidemy;
    if(triggers==null)
        triggers=.Map();
    var fill_fiend_triggers;

    if(fiends_names==null)
        fiends_names = .Array();
    var fill_fiends_names;

    get_fiends = function(demon, victim) {
        if(victim.dead)
            throw('epidemy.fiend.get_fiend: Victim DEAD');

        this = .tmp.epidemy;

        var fiendFst, fiendSnd;

        fiendFst = get_one_fiend(demon, victim);
        fiendSnd = get_one_fiend(demon, victim);
        set_fiends_name(fiendFst, fiendSnd);

        fiendFst.epidemy.snd = fiendSnd;
        fiendFst.epidemy.fst = true;

        fiendSnd.epidemy.snd = fiendFst;
        fiendSnd.epidemy.fst = false;

        fiendFst.char_to_room(demon.in_room);
        fiendSnd.char_to_room(demon.in_room);

        demon.in_room.ppl.forEach( function(demon){
            act('Разверзлись врата преисподней, и хор сотен истязаемых душ заполонил улицу...');
            act('...Из врат выходят два исчадия, готовых исполнить волю %1$C2...',demon);
            act('...Врата со скрипом и грохотом затворяются. Вопли истязаемых душ стихают.');
        },demon );

    };

    get_one_fiend = function(demon, victim) {
        this = .tmp.epidemy;
        var fiend;

        fiend = Fiend.create();
        if(demon.epidemy==null)
            demon.epidemy=.Map();
        if(demon.epidemy.fiends==null)
            demon.epidemy.fiends=.List();
        demon.epidemy.fiends.add(fiend);

        fiend.epidemy = .Map();
        fiend.epidemy.demon = demon;
        fiend.epidemy.victim = victim;

        fiend.epidemy.plan_room = null;
        fiend.epidemy.plan_waypoint = null;
        fiend.epidemy.plan_way = null;
        fiend.epidemy.plan_nextroom = null;
        fiend.epidemy.last_room_looted = null;
        fiend.epidemy.fst = null;
        fiend.epidemy.snd = null;
        fiend.epidemy.has_weapon = false;

        fiend.epidemy.primary_target = victim.pIndexData.vnum;

        fiend.armor0 = victim.armor0;
        fiend.armor1 = victim.armor1;
        fiend.armor2 = victim.armor2;
        fiend.armor3 = victim.armor3;
        fiend.damage_number  = victim.damage_number;
        fiend.damage_type   = victim.damage_type;
        fiend.damroll = victim.damroll;
        fiend.hit = victim.hit;
        fiend.hitroll = victim.hitroll;
        fiend.level = victim.level;
        fiend.mana = victim.mana;
        fiend.max_hit = victim.max_hit;
        fiend.max_mana = victim.max_mana;
        fiend.max_move = victim.max_move;
        fiend.move = victim.move;
        fiend.saving_throw = victim.saving_throw;
        fiend.size = victim.size;
        if(victim.affected_by&.tables.affect_flags.sanctuary)
        fiend.addDarkShroud();

        return fiend;
    };

    set_fiends_name = function(fst,snd) {
        this = .tmp.epidemy;
        var names;
        names = fiends_names[fiends_names.keys.random()];
        fst.short_descr = fst.short_descr + ' ' + names.values.front();
        fst.name = fst.name + ' ' + names.keys.front();
        snd.short_descr = snd.short_descr + ' ' + names.values.back();
        snd.name = snd.name + ' ' + names.keys.back();
    };

    find_way = function(mob,room){
        var sectorsDeny;

        sectorsDeny = .set_bit_number(0, .tables.sector_table.water_noswim);
        sectorsDeny = .set_bit_number(sectorsDeny, .tables.sector_table.air);

        //test
    .print("epidemy: fiend traverseTo[" + room.vnum + "]");
        return mob.in_room.traverseTo(room, mob, 0, sectorsDeny);
    };

    get_victim = function(vnum) {
        var result, inst_list, tmp_list, i, s, m;

        inst_list = .get_mob_index(vnum).instances.clone();
        s = inst_list.size();

        if( s > 0 ) {
            tmp_list = .List();
            for(i=0;i<s;i=i+1) {
                m = inst_list.back();
                inst_list.pop_back();
                if(m.in_room.isCommon()) {
                    tmp_list.push_back(m);
                }
            }
            s = tmp_list.size();
            if(s>0) {
                result = tmp_list.random();
            }
        }

        return result;
    };

    fiend_plan_check = function (fiend) {
        //fiend_plan_check - должен вызываться из postSpec, когда plan==null

        //test
        //fiend.say('fiend_plan_check[null]: start.');

        this = .tmp.epidemy;

        var result;
        result = 0; /*  0 - не знаю что делать;     1 - идём к цели;        2 - геноцид;
                        3 - стоим в очереди на лут; 4 - что-то потрошим */

        //проверяем не дерётся ли кто-то из исчадий, при необходимости вписываемся
        if(fiend.fighting!=null) {
            //test
            //fiend.say('fiend_plan_check[null->2]: уже дерусь.');
            result = 2;
        } else {
            var bro;
            for(kinsman in fiend.in_room.list_mob_vnum(fiend.pIndexData.vnum)) {
                bro = fiend.epidemy.snd == kinsman;
                if(kinsman.fighting!=null) {
                    //test
                    // fiend.say('fiend_plan_check: Родственник дерётся.');
                    if (kinsman.fighting.level <= fiend.level+3 || bro) {
                        fiend.epidemy.genocide = kinsman.fighting;
                        result = 2;
                        //test
                        // fiend.say('fiend_plan_check: будем помогать!');

                        if(bro) break;
                    }
                }
            }
        }

        if(result==0) {
            //если есть что подобрать - подбираем
            if(fiend.epidemy.last_room_looted!=fiend.in_room && loot(fiend)){
                result = 3;
            }
            //если есть добрые подходящего уровня в комнате - бьем
            fiend.epidemy.genocide = genocide(fiend);
            if(!result && fiend.epidemy.genocide!=null) {
                //test
                //fiend.say('fiend_plan_check: есть кого геноцидить.');
                result = 2;
            }

            if(result==0) {
                //test
                // fiend.say('fiend_plan_check: геноцидить некого, всё уже собрано. Может займёмся прямыми обязаностями?');
                //цель померла, надо новую
                if(fiend.epidemy.victim==null || fiend.epidemy.victim.dead) {
                    //test
                    // fiend.say('fiend_plan_check: основная цель померла.');

                    if(fiend.epidemy.snd!=null
                        && fiend.epidemy.snd.epidemy.victim!=null && !fiend.epidemy.snd.epidemy.victim.dead) {
                        //test
                        // fiend.say('fiend_plan_check: берём цель братюни.');
                        fiend.epidemy.victim=fiend.epidemy.snd.epidemy.victim;
                        result = 1;
                    } else if(fiend.epidemy.primary_target!=null
                        && .get_mob_index(fiend.epidemy.primary_target).instances.size()>0) {
                        //test
                        // fiend.say('fiend_plan_check: выбираем новую основную цель.');
                        fiend.epidemy.victim = get_victim(fiend.epidemy.primary_target);
                        if(fiend.epidemy.victim == null) {
                            //test
                            // fiend.say('fiend_plan_check: нет цели.');
                            result = 0;
                        } else {
                            //test
                            //fiend.say('fiend_plan_check: есть цель.');
                            result = 1;
                            if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead){
                                //test
                                // fiend.say('fiend_plan_check: напарнику ту же цель.');
                                fiend.epidemy.snd.epidemy.victim = fiend.epidemy.victim;
                            }
                        }
                    }
                } else {
                    //test
                    // fiend.say('fiend_plan_check: цель есть, надо идти.');

                    result = 1;
                }
            }
        }
        if(result == 1) {
            //test
            // fiend.say('fiend_plan_check: перед тем как идти...');

            if(fiend.epidemy.victim.in_room == fiend.in_room) {
                //test
                // fiend.say('fiend_plan_check: уже на месте');

                result = 2;
            } else {
                //test
                // fiend.say('fiend_plan_check: еще не на месте.');
                if(fiend.epidemy.plan_way==null) {
                    //test
                    // fiend.say('fiend_plan_check: маршрута нет.');

                    if(fiend.epidemy.snd!=null && fiend.epidemy.snd.in_room==fiend.in_room && fiend.epidemy.snd.epidemy.plan_way!=null) {
                        //test
                        // fiend.say('fiend_plan_check: берем маршрут у напарника.');
                        fiend.epidemy.plan_room = fiend.epidemy.snd.epidemy.plan_room;
                        fiend.epidemy.plan_waypoint = fiend.epidemy.snd.epidemy.plan_waypoint;
                        fiend.epidemy.plan_way = fiend.epidemy.snd.epidemy.plan_way.clone();
                        fiend.epidemy.plan_nextroom = null;
                    } else {
                        //test
                        // fiend.say('fiend_plan_check: строим маршрут.');
                        fiend.epidemy.plan_room = fiend.epidemy.victim.in_room;
                        fiend.epidemy.plan_waypoint = fiend.in_room;
                        fiend.epidemy.plan_nextroom = null;
                        fiend.epidemy.plan_way = find_way(fiend, fiend.epidemy.plan_room);
                        //2do не умеют стоить маршрут через запертые двери
                        if(fiend.epidemy.plan_way.size()==0) {
                            //test
                            // fiend.interpret('say этот находится в '+fiend.epidemy.victim.in_room.name+'. Пожалуй убьем другого...');
                            fiend.epidemy.victim = null;
                            //clearPlan(fiend);
                            result = 0;
                        } else {
                            if(fiend.epidemy.snd!=null && fiend.epidemy.snd.in_room==fiend.in_room) {
                                //test
                                // fiend.say('fiend_plan_check: напарнику тот же маршрут.');
                                fiend.epidemy.snd.epidemy.plan_room = fiend.epidemy.plan_room;
                                fiend.epidemy.snd.epidemy.plan_waypoint = fiend.epidemy.plan_waypoint;
                                fiend.epidemy.snd.epidemy.plan_way = fiend.epidemy.plan_way.clone();
                                fiend.epidemy.snd.epidemy.plan_nextroom = null;
                            }
                        }
                    }
                }
            }
        }
        if(result == 2) {
            //test
            //fiend.say('fiend_plan_check: собираемся кого-то бить');

            if((fiend.epidemy.victim != null && fiend.epidemy.victim.dead)
                && (fiend.epidemy.genocide != null && fiend.epidemy.genocide.dead)) {
                fiend.epidemy.victim = null;
                fiend.epidemy.genocide = null;
                result = 0;
                //test
                // fiend.say('fiend_plan_check: все мертвы - сброс цели.');
            }
        }
        //test
        // fiend.say('fiend_plan_check: План будет - '+result);
        return result;
    };

    make_your_move = function(mob) {
        this = .tmp.epidemy;
        //test
        // mob.interpret('say make_your_move: start!');

        //на эту проверку не должно попадать, но вдруг...
        if(mob.fighting!=null) {
            //test
            mob.interpret('say make_your_move: [ВНЕЗАПНО!] break -> Дерусь! Некогда гулять!!!');
            return;
        }

        if(mob.epidemy.plan_way == null) {
            //не должно сюда попадать

            //test
            mob.interpret('say make_your_move: [ВНЕЗАПНО!] нет маршрута... Бедааааа!');

            mob.epidemy.plan = null;
        } else {
            //test
            // mob.interpret('say make_your_move: Сверимся с маршрутом!!!');
            if(mob.epidemy.plan_waypoint==null){
                //test
                // mob.interpret('say make_your_move: ГДЕ Я???');
                clearPlan(mob);//.epidemy.plan = null;
            } else if(mob.epidemy.plan_waypoint != mob.in_room) {
                //test
                // mob.interpret('say make_your_move: Сбился с пути, пытаюсь вернуться на маршрут!!!');
                if(back_on_way(mob)) {
                    //test
                    // mob.interpret('say make_your_move: Cнова на маршруте!!!');
                } else {
                    //test
                    // mob.interpret('say make_your_move: (чистим всё) Поретялося я! Нужен новый маршрут!!!');
                    clearPlan(mob);
                }
            } else {
                //test
                // mob.interpret('say make_your_move: направляюсь в '+mob.epidemy.plan_room.name+'('+mob.epidemy.plan_room.vnum+')');
                if(mob.epidemy.plan_nextroom==null) {
                    if(mob.epidemy.plan_way.size()==0) {
                        if(mob.in_room!=mob.epidemy.plan_room) {
                            //test
                            // mob.interpret('say make_your_move: Маршрут закончился, на место не прибыли. Может где-то рядом?');
                            if (back_on_way(mob)) {
                                //test
                                // mob.interpret('say make_your_move: Снова на маршруте!!!');
                            } else {
                                //test
                                // mob.interpret('say make_your_move: (чистим всё) Поретялася я! Нужен новый маршрут!!!');
                                clearPlan(mob);
                            }
                        } else {
                            //test 2do???
                            mob.epidemy.plan_room = where_is_victim(mob);
                            if(mob.epidemy.plan_room==null) {
                                //test
                                mob.interpret('say make_your_move: (чистим всё) цель, возможно, переместилась');
                                clearPlan(mob);
                            } else {
                                //test
                                mob.interpret('say make_your_move: цель найдена! преследуем!!!');
                                mob.epidemy.plan_nextroom = mob.epidemy.plan_room;
                                mob.epidemy.plan_waypoint = mob.in_room;
                                if(mob.epidemy.snd!=null
                                    && mob.epidemy.snd.in_room==mob.in_room
                                    && mob.epidemy.snd.victim==mob.epidemy.victim) {
                                    mob.epidemy.snd.plan_nextroom = mob.epidemy.plan_nextroom;
                                    mob.epidemy.snd.plan_waypoint = mob.epidemy.plan_waypoint;
                                }
                            }
                        }
                    } else {
                        mob.epidemy.plan_nextroom = mob.epidemy.plan_way.front();
                        mob.epidemy.plan_way.pop_front();
                        //test
                        // mob.interpret('say make_your_move: Выбираем из маршрута следующую комнату - '+mob.epidemy.plan_nextroom.name+'('+mob.epidemy.plan_nextroom.vnum+')');
                    }
                } else {
                    //2do
                    //getExitFlags        (имя или номер выхода): флаги этого выхода (таблица .tables.exit_flags)
                    //.tables.exit_flags.closed locked isdoor
                    //test
                    //mob.interpret('say make_your_move: Что с выходом?');
                    var door;
                    door = mob.in_room.doorTo(mob.epidemy.plan_nextroom);
                    if(door < 0) {
                        //сюда тоже не должно попадать, но вдруг...
                        //test
                        mob.interpret('say make_your_move: [ВНЕЗАПНО!] (чистим всё) В нужную комнату от сюда не попасть.');
                        clearPlan(mob);//.epidemy.plan = null;
                    }else{
                        if(mob.in_room.getExitFlags(door) & .tables.exit_flags.closed){
                            //test
                            // mob.interpret('say make_your_move: здесь закрытая дверь.');
                            if(mob.in_room.getExitFlags(door) & .tables.exit_flags.locked) {
                                //test
                                // mob.interpret('say make_your_move: дверь закрыта. еще и заперта!!!');
                                mob.recho('%1$^C1 дергает за ручку %2$N2.',mob,mob.in_room.exitShortDescr(door));
                                //mob.interpret('say и похоже заперта.');
                            } else {
                                //test
                                // mob.interpret('say make_your_move: Войдем без стука... прямо в '+mob.in_room.exitKeyword(door).getOneArgument() + ' что на '+mob.in_room.doorName(door));
                                //открывать нужно правильную дверь
                                //зря Руфину тиранил - в комнате может быть несколько выходов с одинаковыми кейвордами
                                //mob.interpret('open '+mob.in_room.exitKeyword(door).getOneArgument());
                                mob.interpret('open '+mob.in_room.doorName(door)); // doorName() вернет название направления

                                //mob.in_room.open(door);
                                //mob.recho('%1$^C1 открывает %2$N4.',mob,mob.in_room.exitShortDescr(door));
                            }
                        } else {
                            //test
                            // mob.interpret('say make_your_move: Пробуем шагнуть из '+mob.in_room.name+'('+mob.in_room.vnum+') в '+mob.epidemy.plan_nextroom.name+'('+mob.epidemy.plan_nextroom.vnum+')');
                            if(mob.in_room == mob.epidemy.plan_nextroom
                                || mob.move_char(door)){
                                //test
                                // mob.interpret('say make_your_move: Получилось. Я пришел в '+mob.in_room.name+'('+mob.in_room.vnum+')');
                                mob.epidemy.plan_waypoint = mob.epidemy.plan_nextroom;
                                mob.epidemy.plan_nextroom = null;
                                if(mob.in_room == mob.epidemy.plan_room) {
                                    //test
                                    // mob.interpret('say make_your_move: Похоже я на месте! Что дальше?');
                                    /*if(mob.epidemy.plan<3)
                                        clearPlan(mob);
                                    mob.epidemy.plan_room = mob.in_room;*/
                                }
                            } else {
                                //test
                                // mob.interpret('say make_your_move: [plan=null] [ВНЕЗАПНО!!!] Беда однако. Не могу пройти в '+mob.epidemy.plan_nextroom.name+'('+mob.epidemy.plan_nextroom.vnum+')!');
                                mob.epidemy.plan = null;
                                //.tmp.epidemy.clearGPS(fiend);
                            }
                        }
                    }
                }
            }
        }
        //test
        // mob.interpret('say make_your_move: end!');
    };
    back_on_way = function(mob) {
        if(mob.move_char(mob.in_room.doorTo(mob.epidemy.plan_waypoint))) {
            //test
            // mob.interpret('say back_on_way: Получилось!');
            return true;
        }
        //test
        // mob.interpret('say back_on_way: nope!');
        return false;
    };
    where_is_victim = function(mob) {
        var nextroom;
        for(nextdoor in mob.in_room.exits(mob)) {
            if(mob.in_room.getExitFlags(nextdoor) & .tables.exit_flags.locked)
                continue;
            nextroom = mob.in_room.getRoom(nextdoor);
            for(nextmob in nextroom.ppl) {
                if(nextmob==mob.epidemy.victim)
                    return nextroom;
            }
        }
        return null;
    };

    //loot
    get_equiped_armor = function(obj,mob) {
        var i,c,l,wl,eq;
        if(obj.wear_locations.size()>1) {
            l = obj.wear_locations.keys.clone();
            c = l.size();
            for(i=0;i<c;i=i+1) {
                wl = l.back();
                l.pop_back();

                eq = mob.get_eq_char(wl);

                if(eq==null) {
                    obj.wear_loc = wl;
                }

                if(obj.eq==null && i==0 && eq!=null) {
                    obj.eq = eq;
                    obj.wear_loc = wl;
                } else {
                    if(eq!=null && obj.eq!=null){
                        if(is_better_armor(eq, obj.eq)) {
                            obj.eq=eq;
                            obj.wear_loc = eq.wear_loc;
                        }
                    } else {
                        obj.eq=null;
                    }
                }
            }
        } else {
            obj.wear_loc = obj.wear_locations.keys.back();
            obj.eq = mob.get_eq_char(obj.wear_loc);
        }
        return obj;
    };
    is_better_armor = function(obj,newobj) {
        if(obj.item_type!=.tables.item_table.armor && newobj.item_type==.tables.item_table.armor) {
            return true;
        }
        if(obj.item_type==.tables.item_table.armor && newobj.item_type!=.tables.item_table.armor) {
            return false;
        }
        if(obj.item_type!=.tables.item_table.armor && newobj.item_type!=.tables.item_table.armor) {
            if(newobj.level > obj.level) {
                return true;
            }
        }
        if(newobj.value0+newobj.value1+newobj.value2+newobj.value3+newobj.value4 > obj.value0+obj.value1+obj.value2+obj.value3+obj.value4) {
            return true;
        }

        return false;
    };

    wear_item = function(mob,t,item,replaced) {
    .scheduler.sleep(1);

        if(mob.dead
            || (t.conteiner!=null && t.conteiner.dead)
            || (item.dead)){
            return false;
        }
        //подбираем или достаем из контейнера
        //test
        //mob.say('wear_item: get %1$O1',item);
        mob.recho(t.get_msg, mob, item, t.conteiner);
        item.obj_to_char(mob);

        //снимаем и выбрасываем, если экипирован
        if(replaced!=null) {
        .scheduler.sleep(1);
            if(mob.dead) return false;

            //если уже не экипировано (н-р: разоружили) пропускаем
            if(mob.get_eq_char(t.wear_loc)!=null) {
                //test
                //mob.say('wear_item: remove %1$O1',replaced);
                mob.recho(t.remove_msg, mob, replaced);
                replaced.unequip();
                if(replaced.item_type == .tables.item_table.weapon) {
                    mob.epidemy.has_weapon = false;
                }
            }

        .scheduler.sleep(1);
            if(mob.dead) return false;
            //выбрасываем если это еще у нас
            if(mob.inventory.has(replaced)) {
                //test
                //mob.say('wear_item: drop %1$O1',replaced);
                mob.recho(t.drop_msg, mob, replaced);
                replaced.obj_to_room(mob.in_room);
            }
        }

    .scheduler.sleep(1);
        if(mob.dead) return;
        //одеваем если у нас в инвентаре
        if(mob.inventory.has(item)) {
            //test
            //mob.say('wear_item: wear %1$O1',item);
            mob.recho(t.wear_msg, mob, item);
            item.equip(t.wear_loc);
            if(item.item_type == .tables.item_table.weapon) {
                mob.epidemy.has_weapon = true;
            }
        } else {
            //что-то пошло не так;
            return false;
        }

    .scheduler.sleep(1);
        return true;
    };
    scavenge = function(mob,items,corpse) {

        mob.epidemy.last_room_looted = mob.in_room;
        //test
        // if(corpse==null)
        //     mob.say('будем лутить '+items.size()+' штук.');
        // else
        //     mob.say('будем лутить из трупа '+items.size()+' штук.');

        this = .tmp.epidemy;
        var cl, ci, cc, c, t;
        var il, ii, ic, i;
        var eq, eq_l, wloc;
        var obj, str;

        il = items.clone();
        ic = il.size();
        for(ii=0;ii<ic;ii=ii+1) {
            if(mob.dead) return false;
            i = il.back();
            il.pop_back();

            if(i.dead) {
                //test
                // mob.say('a уже тю-тю! ('+ii+')');
                mob.epidemy.last_room_looted = null;
                return false;
            } else if ((corpse==null && i.in_room!=mob.in_room) || (corpse!=null && i.in_obj!=corpse)) {
                //test
                // mob.say('а %1$O1 кто-то уже упёр. ('+ii+')',i);
                mob.epidemy.last_room_looted = null;
                return false;
            }
            //test
            //mob.say('таaaксcc... %1$O1...',i);

            if(i.item_type==.tables.item_table.npc_corpse) {
                if(!scavenge(mob, i.items, i)) {
                    mob.epidemy.last_room_looted = null;
                    return false;
                }
            } else {
                //если деремся, то хватаем только оружие.
                if(mob.fighting != null && i.item_type != .tables.item_table.weapon) {
                    //test
                    //mob.say('таaaксcc... %1$O1 - совсем не оружие',i);
                    continue;

                }

                //test
                //mob.say('%1$O1 '+i.level+' левела, мой левел - '+mob.level,i);
                if(i.level>mob.level+3 || !mob.can_see_obj(i) || !mob.can_get_obj(i))
                    continue;

                //test
                //mob.say('могу поднять %1$O1, могу видеть.',i);

                t = .Map();
                t.conteiner = corpse;
                if(corpse==null) {
                    t.get_msg = '%1$^C1 берет %2$O4.';
                } else {
                    t.get_msg = '%1$^C1 берет %2$O4 из %3$O2.';
                }
                t.drop_msg = '%1$^C1 бросает %2$O4.';
                t.remove_msg = '%1$^C1 снимает %2$O4.';

                if(i.item_type == .tables.item_table.money)
                {
                    str='';
                    if(i.value0!=0){
                        if(i.value0==1)
                            str=str+'серебряную';
                        else
                            str=str+i.value0+' серебряных';
                    }
                    if(i.value1!=0) {
                        if(str!='')
                            str=str+' и ';
                        if(i.value1==1)
                            str=str+'золотую';
                        else
                            str=str+i.value1+' золотых';
                    }
                    if(i.value0+i.value1 == 1)
                        str=str+' монету';
                    else
                        str=str+' монеты';

                    if(corpse==null)
                        str='%1$^C1 берет '+str+'.';
                    else
                        str='%1$^C1 берет '+str+' из %2$O2.';

                    mob.recho(str,mob,corpse);
                    mob.gold=mob.gold+i.value1;
                    mob.silver=mob.silver+i.value0;

                    i.extract(true);

                }
            else  if(i.item_type == .tables.item_table.container)
                {
                    //t = 'container';
                }
            else if(i.item_type == .tables.item_table.light)
                {
                    t.remove_msg = '%1$^C1 гасит свет, исходящий от %2$O2.';
                    t.wear_msg = '%1$^C1 зажигает %2$O4 и берет его в руки.';
                    t.wear_loc = 'light';

                    eq = mob.get_eq_char(t.wear_loc);
                    if(eq==null || i.level>eq.level) {
                        if(!wear_item(mob,t,i,eq)){
                            mob.epidemy.last_room_looted = null;
                            return false;
                        }
                    } else {
                        //test
                        //mob.say('моё %1$O1, похоже, лучше...',eq);
                    }
                }
            else if(i.item_type == .tables.item_table.weapon)
                {
                    t.wear_msg = '%1$^C1 вооружается %2$O5.';
                    t.wear_loc = 'wield';

                    eq = mob.get_eq_char(t.wear_loc);
                    if(eq==null || ((i.value2+1)*i.value1/2)>((eq.value2+1)*eq.value1/2)){
                        if(!wear_item(mob,t,i,eq)){
                            mob.epidemy.last_room_looted = null;
                            return false;
                        }
                    } else {
                        //test
                        //mob.say('моё %1$O1, похоже, лучше...',eq);
                    }
                }
            else if(i.item_type == .tables.item_table.armor
                || i.item_type == .tables.item_table.treasure
                || i.item_type == .tables.item_table.jewelry
                || i.item_type == .tables.item_table.gem)
                {
                    obj=.Map();
                    obj.wear_locations=.Array();
                    if(i.wear_flags&.tables.wear_flags.wear_finger) {
                    obj.wear_locations['finger_l'] = '%1$^C1 надевает %2$O4 на левый палец.';
                    obj.wear_locations['finger_r'] = '%1$^C1 надевает %2$O4 на правый палец.';
                } else if(i.wear_flags&.tables.wear_flags.wear_neck) {
                    obj.wear_locations['neck_1'] = '%1$^C1 надевает %2$O4 вокруг шеи.';
                    obj.wear_locations['neck_2'] = '%1$^C1 надевает %2$O4 вокруг шеи.';
                } else if(i.wear_flags&.tables.wear_flags.wear_wrist) {
                    obj.wear_locations['wrist_l'] = '%1$^C1 надевает %2$O4 вокруг левого запястья.';
                    obj.wear_locations['wrist_r'] = '%1$^C1 надевает %2$O4 вокруг правого запястья.';
                } else if(i.wear_flags&.tables.wear_flags.wear_body) {
                    obj.wear_locations['body'] = '%1$^C1 надевает %2$O4 на тело.';
                } else if(i.wear_flags&.tables.wear_flags.wear_head) {
                    obj.wear_locations['head'] = '%1$^C1 надевает %2$O4 на голову.';
                } else if(i.wear_flags&.tables.wear_flags.wear_legs) {
                    obj.wear_locations['legs'] = '%1$^C1 надевает %2$O4 на бедра.';
                } else if(i.wear_flags&.tables.wear_flags.wear_feet) {
                    obj.wear_locations['feet'] = '%1$^C1 надевает %2$O4 на ноги.';
                }  else if(i.wear_flags&.tables.wear_flags.wear_hands) {
                    obj.wear_locations['hands'] = '%1$^C1 надевает %2$O4 на руки.';
                } else if(i.wear_flags&.tables.wear_flags.wear_arms) {
                    obj.wear_locations['arms'] = '%1$^C1 надевает %2$O4 на плечи.';
                } else if(i.wear_flags&.tables.wear_flags.wear_shield) {
                    obj.wear_locations['shield'] = '%1$^C1 надевает %2$O4 как щит.';
                } else if(i.wear_flags&.tables.wear_flags.wear_about) {
                    obj.wear_locations['about'] = '%1$^C1 накидывает %2$O4 вокруг тела.';
                } else if(i.wear_flags&.tables.wear_flags.wear_waist) {
                    obj.wear_locations['waist'] = '%1$^C1 надевает %2$O4 вокруг талии.';
                } else if(i.wear_flags&.tables.wear_flags.wear_face) {
                    obj.wear_locations['face'] = '%1$^C1 надевает %2$O4 прикрывая лицо.';
                } else if(i.wear_flags&.tables.wear_flags.hold) {
                    obj.wear_locations['hold'] = '%1$^C1 берёт в руки %2$O4.';
                } else if(i.wear_flags&.tables.wear_flags.wear_float) {
                    obj.wear_locations['float'] = '%1$^C1 запускает %2$O4 кружиться вокруг себя.';
                } else {
                    // 		mob.ptc('-['+c.pIndexData.vnum+'] '+c.name+' ('+t+');\n');
                    continue;
                }

                    obj = get_equiped_armor(obj,mob);

                    t.wear_msg = obj.wear_locations[obj.wear_loc];
                    t.wear_loc = obj.wear_loc;

                    if(obj.eq==null || is_better_armor(obj.eq,i)) {
                        if(!wear_item(mob,t,i,obj.eq)){
                            mob.epidemy.last_room_looted = null;
                            return false;
                        }
                    } else {
                        //test
                        //mob.say('моё %1$O1, похоже, лучше...',obj.eq);
                    }

                }

            }
        }

        return true;
    };
    time_to_loot = function (mob) {
        //test
        //mob.say('fiend.time_to_loot.');
        var mob_list, i, count, m;
        mob_list = mob.in_room.list_mob_vnum(mob.pIndexData.vnum);
        count = mob_list.size();
        //test
        //mob.say('нас таких тут аж %1$S.',count);
        for(i=0;i<count;i=i+1) {
            m = mob_list.back();

            //test
            //mob.say(''+i+' - %1$C1',m);

            mob_list.pop_back();
            if(m.epidemy.plan==4 ) {
                //test
                //mob.say('%1$C1 уже грабит.',m);
                return false;
            }
        }
        //test
        //mob.say('ну, значит прийдется мне...');
        return true;
    };
    loot = function(mob){
        this = .tmp.epidemy;
        if(mob.in_room.items.size()>0) {
            //test
            //mob.say('о! тут что-то есть!');
            return true;
        } else {
            return false;
        }
    };
    //end loot
    // проверка, есть ли кого отгеноцидить
    genocide = function(fiend) {
        for(ch in fiend.in_room.ppl) {
            if(fiend.epidemy.victim==ch) {
                //test
                // fiend.say('genocide:%1$C1 - цель. оставим на потом',ch);
                continue;
            }
            //test
            //fiend.say('genocide:%1$C1 alig:'+ch.alignment+' lvl:'+ch.level+'['+(fiend.level+3)+']',ch);
            if(ch.is_npc() && ch.alignment>=350 && ch.level<=fiend.level+3) {
                //test
                // fiend.say('genocide:%1$C1 наш пациент',ch);
                return ch;
            }
        }
        //test
        // fiend.say('genocide: нет клиентов',ch);
        return null;
    };

    fill_fiend_triggers = function(Fiend){
        this = Fiend;

        onSpec=null;

        postSpec = function(fiend) {
            try{
                //test
                // if(fiend.epidemy.plan!=null) fiend.say('postSpec[plan '+fiend.epidemy.plan+'] start'); else fiend.say('postSpec[plan null] start');

                this = .tmp.epidemy;

                //2do заблудились, как добраться до цели не знаем - идём к демону
                //2do нет больше виктимов - надо новых - идём к демону
                //2do не знаем как пройти к демону - грустим! (или нет)
                if(fiend.dead) { // || fiend.fighting!=null
                    return;
                } else if(fiend.epidemy.plan == null) {
                    //test
                    // fiend.say('postSpec[plan:null]: Плана нет.');
                    if(fiend.epidemy.primary_target!=null) {
                        fiend.epidemy.plan = fiend_plan_check(fiend);
                    }
                }

                if(fiend.epidemy.plan == 0) {
                    fiend.interpret('say postSpec[plan 0]: Я видимо должен что-то сделать, но не знаю что?!');
                } else if(fiend.epidemy.plan == 1) { //ходим
                    make_your_move(fiend);
                } else if(fiend.epidemy.plan == 2) { //бьем
                    if(fiend.fighting==null) {
                        var victim;
                        var phrases, rare;
                        rare = .List();
                        phrases = .List();

                        if(fiend.epidemy.genocide!=null && !fiend.epidemy.genocide.dead
                            && fiend.epidemy.genocide.in_room==fiend.in_room) {
                            victim = fiend.epidemy.genocide;

                            if(fiend.epidemy.genocide.fighting!=null
                                && fiend.epidemy.genocide.fighting.pIndexData==Fiend) {//если вписываемся за братюню
                                phrases.add('ЗА ЗЛО!!! ЗА ЗАХВАТЧИКОВ!!! ВО СЛАВУ ТЁМНОГО ВЛАСТЕЛИНА!!!');
                                phrases.add('ЗА ЗЛО!!!');
                                phrases.add('ЗА ЗАХВАТЧИКОВ!!!');
                                phrases.add('ВО СЛАВУ ТЁМНОГО ВЛАСТЕЛИНА!!!');
                                rare.add('НАШИХ БЬЮТ!!!');
                            } else {//если просто геноцид
                                phrases.add(.fmt('В этом месте больше нет места добру! %1$^C1, сейчас ты умрёшь!!!',victim));
                                phrases.add(.fmt('Ты слишком добр%1$G||ое|а, %1$C1, за это ты поплатишься жизнью!!!',victim));
                                phrases.add(.fmt('Именем %1$^C2, %2$C1, ты умрёшь!!!',fiend.epidemy.demon,victim));
                                phrases.add(.fmt('%1$^C1, прихвостень рыцарей, сейчас ты умрёшь!!!',victim));
                                phrases.add(.fmt('Во славу Тёмного Властелина, %1$C1, сейчас ты умрёшь!!!',victim));
                            }
                            rare.add('ЗА ВДВ!!!');
                        } else if(fiend.epidemy.victim!=null && !fiend.epidemy.victim.dead
                            && fiend.in_room == fiend.epidemy.victim.in_room) { //если добрались до цели
                            victim = fiend.epidemy.victim;
                            phrases.add(.fmt('Именем %1$^C2, %2$C1, ты умрёшь!!!',fiend.epidemy.demon,victim));
                            phrases.add(.fmt('Во славу Тёмного Властелина, %1$C1, сейчас ты умрёшь!!!',victim));
                            phrases.add(.fmt('С твоей смертью, %1$C1, Империя Зла станет сильнее!!!',victim));
                            rare.add('ЗА ВДВ!!!');
                        }

                        if(victim==null) {
                            clearPlan(fiend);
                        } else {
                            if(.chance(95))
                                fiend.interpret('yell '+phrases.random());
                            else
                                fiend.interpret('yell '+rare.random());
                            //2do не ввязываемяс если у нас меньше 50% жизни
                            fiend.multi_hit(victim);
                        }
                    } else {
                        //test
                        // fiend.say('postSpec[plan 2]: уже дубашу %1$^C2!', fiend.fighting);
                    }
                } else if(fiend.epidemy.plan==3) {// стоим в очереди на сбор урожая
                    //test
                    //fiend.say('postSpec[plan 3]: ready for loot.');
                    if(time_to_loot(fiend)) {
                        fiend.epidemy.plan = 4;
                    }
                } else if(fiend.epidemy.plan==4) {//plan 4 - собираем

                    if(fiend.in_room!=fiend.epidemy.last_room_looted) {
                        //test
                        // fiend.say('postSpec[plan 4]: start looting.');
                        if(scavenge(fiend, fiend.in_room.items, corpse)){
                            //test
                            // fiend.say('postSpec[plan 4]: end looting.');

                            fiend.epidemy.plan = null;
                        } else {
                            //test
                            // fiend.say('postSpec[plan 4->3]: неудачный loot. начинаем заново.');
                            fiend.epidemy.plan = 3;
                        }
                    }
                }
                //test
                // if(fiend.epidemy.plan!=null) fiend.say('postSpec[plan '+fiend.epidemy.plan+'] end'); else fiend.say('postSpec[plan null] end');
            }catch(e) {
                //test
            .get_char_world('miyamoto').ptc('fiend.postSpec: '+e);
            }
        };

        onEntry = function(fiend) {
            //test
            // if(fiend.epidemy.plan!=null) fiend.interpret('say onEntry[план:'+fiend.epidemy.plan+'] start'); else fiend.interpret('say onEntry[план:null] start');

            fiend.epidemy.plan = null;

            //2do перенести loot? genocid? в fiend_plan_check
            /*this = .tmp.epidemy;
            if(fiend.fighting==null && (fiend.epidemy.snd==null || fiend.epidemy.snd.fighting==null)) {
                //test
                //fiend.interpret('say onEntry: а может лут?!');
                if(loot(fiend)) {
                    //test
                    //if(fiend.epidemy.plan!=null) fiend.interpret('say onEntry: ЛУТ!!!');

                    fiend.epidemy.plan = 3;
                } else {
                    //test
                    //fiend.interpret('say onEntry: а может геноцид?!');
                    fiend.epidemy.genocide = genocide(fiend);
                    if(fiend.epidemy.genocide!=null) {
                        //test
                        //fiend.interpret('say onEntry: ГЕНОЦИД!!!');
                        fiend.epidemy.plan = 2;
                    } else {
                        //test
                        //fiend.interpret('say onEntry: некого геноцидить!!!');
                    }
                }
            }*/
            //test
            // if(fiend.epidemy.plan!=null) fiend.interpret('say onEntry[план:'+fiend.epidemy.plan+'] end'); else fiend.interpret('say onEntry [план:null] end');
        };

        onKill = function(fiend, ch) {
            this = .tmp.epidemy;
            //test
            //fiend.say('onKill[plan '+fiend.epidemy.plan+'->null]');
            fiend.epidemy.last_room_looted=null;
            fiend.epidemy.plan=null;

            if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead
                && fiend.epidemy.snd.in_room == fiend.in_room)
                fiend.epidemy.snd.epidemy.last_room_looted=null;

            if(fiend.epidemy.victim == ch) {
                clearPlan(fiend);
                if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead) {
                    clearPlan(fiend.epidemy.snd);
                }
            } else if (fiend.epidemy.genocide==ch) {
                if(fiend.epidemy.snd!=null && fiend.epidemy.snd.epidemy.genocide==fiend.epidemy.genocide) {
                    fiend.epidemy.snd.epidemy.genocide = null;
                    fiend.epidemy.snd.epidemy.plan = null;

                }
                fiend.epidemy.genocide=null;
            }
        };

        //onFight(ch) - вызывается каждый баттл-тик (3 секунды) при сражении с ch
        onFight = function (fiend, ch) {
            this = .tmp.epidemy;
            if(fiend.get_eq_char('wield')==null && fiend.epidemy.has_weapon==true
                && (fiend.epidemy.plan==null || (fiend.epidemy.plan!=3 && fiend.epidemy.plan!=4))) {
                //test
                //if(fiend.epidemy.plan==null) fiend.interpret('say onFight[plan null] а может вооружиться?'); else fiend.interpret('say onFight[plan '+fiend.epidemy.plan+'] а может вооружиться?');
                if(loot(fiend)) {
                    //test
                    //if(fiend.epidemy.plan==null) fiend.interpret('say onFight[plan null->3] попытаемся вооружиться'); else fiend.interpret('say onFight[plan:'+fiend.epidemy.plan+'->3] попытаемся вооружиться');
                    fiend.epidemy.plan = 3;
                    fiend.epidemy.last_room_looted = null;
                    fiend.epidemy.has_weapon==false;
                }
            }
        };

        onExtract = function(fiend, count) {
            //test
            /*var fst;
            fst = 'snd';
            if(fiend.epidemy.fst)
                fst='fst';
            .tmp.epidemy.me.ptc('fiend['+fst+'].onExtract('+count+')');*/

            if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead) {
                //убираемся из напарников
                fiend.epidemy.snd.epidemy.snd = null;
                if(fiend.epidemy.fst) {
                    //ты теперь за старшего
                    fiend.epidemy.snd.epidemy.fst = true;
                }
            }

            //выпиливаемся из списка
            if(fiend.epidemy.demon!=null && !fiend.epidemy.demon.dead)
                fiend.epidemy.demon.epidemy.fiends.sub(fiend);
        };

        onArea = function(fiend) {
            if(fiend.epidemy.plan == 0)
                fiend.epidemy.plan = null;
        };

        // не надо ничего собирать
        onCantScavenge = function(fiend,obj) {
            return true;
        };
    };
    fill_fiends_names = function() {
        this = .tmp.epidemy;
        fiends_names[0] = .Array();
        fiends_names[0]['lyolik'] = 'Лёлик||а|у|а|ом|е';
        fiends_names[0]['bolyk'] = 'Болик||а|у|а|ом|е';
        fiends_names[1] = .Array();
        fiends_names[1]['chuk'] = 'Чук||а|у|а|ом|е';
        fiends_names[1]['gek'] = 'Гек||а|у|а|ом|е';
        fiends_names[2] = .Array();
        fiends_names[2]['rimsky'] = 'Римск|ий|ого|ому|ого|им|ом';
        fiends_names[2]['korsakov'] = 'Корсаков||а|у|а|ым|е';
        fiends_names[3] = .Array();
        fiends_names[3]['batman'] = 'Бэтмен||а|у|а|ом|е';
        fiends_names[3]['robin'] = 'Робин||а|у|а|ом|е';
        fiends_names[4] = .Array();
        fiends_names[4]['miya'] = 'Ми|я|и|е|ю|ей|е';
        fiends_names[4]['moto'] = 'Мот|о|ы|е|у|ой|е';
        fiends_names[5] = .Array();
        fiends_names[5]['baskin'] = 'Баскин||а|у|а|ом|е';
        fiends_names[5]['robbins'] = 'Роббинс||а|у|а|ом|е';
        fiends_names[6] = .Array();
        fiends_names[6]['byaka'] = 'Бяк|а|и|е|у|ой|е';
        fiends_names[6]['buka'] = 'Бук|а|и|е|у|ой|е';
    };


    Fiend = .get_mob_index(763);
    fill_fiends_names();
    fill_fiend_triggers(Fiend);
}
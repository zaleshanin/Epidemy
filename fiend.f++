fiendInit = function(){
    if(.tmp.epidemy==null) .tmp.epidemy = .Map();
    this = .tmp.epidemy;
    if(triggers==null)
        triggers=.Map();
    var fill_fiend_triggers;

    if(fiends_names==null) fiends_names = .Array();
    if(fiends_names_descr==null) fiends_names = .Array();

    var fill_fiends_names;
    var fill_fiends_phrases;

    get_fiends = function(demon, victim) {
        if(victim.dead)
            throw('epidemy.fiend.get_fiend: Victim DEAD');

        this = .tmp.epidemy;

        var fiendFst, fiendSnd, fiendNames;

        fiendFst = get_one_fiend(demon, victim);
        fiendSnd = get_one_fiend(demon, victim);
        fiendNames = set_fiends_name(fiendFst, fiendSnd);

        fiendFst.epidemy.snd = fiendSnd;
        fiendFst.epidemy.fst = true;

        fiendSnd.epidemy.snd = fiendFst;
        fiendSnd.epidemy.fst = false;

        fiendFst.char_to_room(demon.in_room);
        fiendSnd.char_to_room(demon.in_room);

        demon.in_room.echo('Разверзлись врата преисподней, и хор сотен истязаемых душ заполонил улицу...');
        demon.in_room.echo('...из врат выходят исчадия %2$N1 и %3$N1, готовых исполнить волю %1$C2...',demon,fiendNames.fst,fiendNames.snd);
        demon.in_room.echo('...врата со скрипом и грохотом затворяются. Вопли истязаемых душ стихают.');

    };

    get_one_fiend = function(demon, victim) {
        this = .tmp.epidemy;
        var fiend;

        fiend = Fiend.create();
        if(demon.epidemy==null)
            demon.epidemy=.Map();
        if(demon.epidemy.fiends==null)
            demon.epidemy.fiends=.List();
        demon.epidemy.fiends.add(fiend);

        fiend.epidemy = .Map();
        fiend.epidemy.demon = demon;
        fiend.epidemy.victim = victim;
        if(demon.epidemy.plan_way!=null) {
            fiend.epidemy.plan_room = victim.in_room;
            fiend.epidemy.plan_waypoint = fiend.in_room;
            fiend.epidemy.plan_way = demon.epidemy.plan_way.clone();
        } else {
            fiend.epidemy.plan_room = null;
            fiend.epidemy.plan_waypoint = null;
            fiend.epidemy.plan_way = null;
        }
        fiend.epidemy.plan_nextroom = null;
        fiend.epidemy.last_room_looted = null;
        fiend.epidemy.fst = null;
        fiend.epidemy.snd = null;
        fiend.epidemy.has_weapon = false;

        fiend.epidemy.primary_target = victim.pIndexData.vnum;

        fiend.armor0 = victim.armor0;
        fiend.armor1 = victim.armor1;
        fiend.armor2 = victim.armor2;
        fiend.armor3 = victim.armor3;
        fiend.damage_number  = victim.damage_number;
        fiend.damage_type   = victim.damage_type;
        fiend.damroll = victim.damroll;
        fiend.hit = victim.hit;
        fiend.hitroll = victim.hitroll;
        fiend.level = victim.level;
        fiend.mana = victim.mana;
        fiend.max_hit = victim.max_hit;
        fiend.max_mana = victim.max_mana;
        fiend.max_move = victim.max_move;
        fiend.move = victim.move;
        fiend.saving_throw = victim.saving_throw;
        fiend.size = victim.size;
        if(victim.affected_by&.tables.affect_flags.sanctuary)
        fiend.addDarkShroud();

        return fiend;
    };

    set_fiends_name = function(fst,snd) {
        this = .tmp.epidemy;

        var name_key, name_keys, fiendNames;
        name_keys = .List();
        fiendNames = .Map(); //вернем из функции
        if(fst.epidemy.demon.epidemy.fiends_names==null)
            fst.epidemy.demon.epidemy.fiends_names = .Array(); //массив уже выданных ключей от имён

        for(key in fiends_names.keys) {
            if(fst.epidemy.demon.epidemy.fiends_names[key]!=null && fst.epidemy.demon.epidemy.fiends_names[key]>0)
                continue;
            name_keys.push_back(key);
        }

        name_key = name_keys.random();
        //test
        // me.ptc('set_fiends_name: random name_key:'+name_key+'\n');

        if(fst.epidemy.demon.epidemy.fiends_names[name_key]==null) {
            fst.epidemy.demon.epidemy.fiends_names[name_key]=2;
        } else {
            fst.epidemy.demon.epidemy.fiends_names[name_key]=fst.epidemy.demon.epidemy.fiends_names[name_key]+2;
        }

        fiendNames.fst = fiends_names_descr[fiends_names[name_key].front()];
        fiendNames.snd = fiends_names_descr[fiends_names[name_key].back()];

        //test
        // me.ptc('set_fiends_name: fst:'+fiends_names[name_key].front()+'->'+fiendNames.fst+'\n');
        // me.ptc('set_fiends_name: snd:'+fiends_names[name_key].back()+'->'+fiendNames.snd+'\n');

        fst.short_descr = fst.short_descr + ' ' + fiendNames.fst;
        fst.name = fst.name + ' ' + fiends_names[name_key].front()+' '+.fmt('%1$N1',fiendNames.fst);
        fst.epidemy.name_key = name_key;

        snd.short_descr = snd.short_descr + ' ' + fiendNames.snd;
        snd.name = snd.name + ' ' + fiends_names[name_key].back()+' '+.fmt('%1$N1',fiendNames.snd);
        snd.epidemy.name_key = name_key;

        //test
        // me.ptc('set_fiends_name: fst_descr:'+fst.short_descr+'\n');
        // me.ptc('set_fiends_name: fst_name:'+fst.name+'\n');
        //test
        // me.ptc('set_fiends_name: snd_descr:'+snd.short_descr+'\n');
        // me.ptc('set_fiends_name: snd_name:'+snd.name+'\n');

        return fiendNames;
    };

    find_way = function(mob,room){
        var sectorsDeny;

        sectorsDeny = .set_bit_number(0, .tables.sector_table.water_noswim);
        sectorsDeny = .set_bit_number(sectorsDeny, .tables.sector_table.air);

        //test_ruffina
    .print("epidemy: fiend traverseTo[" + room.vnum + "]");
        return mob.in_room.traverseTo(room, mob, 0, sectorsDeny);
    };

    get_victim = function(vnum) {
        var result, inst_list, tmp_list, i, s, m;

        inst_list = .get_mob_index(vnum).instances.clone();
        s = inst_list.size();

        if( s > 0 ) {
            tmp_list = .List();
            for(i=0;i<s;i=i+1) {
                m = inst_list.back();
                inst_list.pop_back();
                if(m.in_room.isCommon()) {
                    tmp_list.push_back(m);
                }
            }
            s = tmp_list.size();
            if(s>0) {
                result = tmp_list.random();
            }
        }

        return result;
    };

    fiend_plan_check = function (fiend) {
        //fiend_plan_check - должен вызываться из postSpec, когда plan==null

        //test
        // fiend.say('fiend_plan_check[null]: start.');

        this = .tmp.epidemy;

        var result;
        result = 0; /*  0 - не знаю что делать;     1 - идём к цели;        2 - геноцид;
                        3 - стоим в очереди на лут; 4 - что-то потрошим */

        //проверяем не дерётся ли кто-то из исчадий, при необходимости вписываемся
        if(fiend.fighting!=null) {
            //test
            //fiend.say('fiend_plan_check[null->2]: уже дерусь.');
            result = 2;
        } else {
            var bro;
            for(kinsman in fiend.in_room.list_mob_vnum(fiend.pIndexData.vnum)) {
                bro = fiend.epidemy.snd == kinsman;
                if(kinsman.fighting!=null) {
                    //test
                    // fiend.say('fiend_plan_check: Родственник дерётся.');
                    if (kinsman.fighting.level <= fiend.level+3 || bro) {
                        fiend.epidemy.genocide = kinsman.fighting;
                        result = 2;
                        //test
                        // fiend.say('fiend_plan_check: будем помогать!');

                        if(bro) break;
                    }
                }
            }
        }

        if(result==0) {
            //если есть что подобрать - подбираем
            if(fiend.epidemy.last_room_looted!=fiend.in_room && loot(fiend)){
                result = 3;
            }
            //если есть добрые подходящего уровня в комнате - бьем
            fiend.epidemy.genocide = genocide(fiend);
            if(!result && fiend.epidemy.genocide!=null) {
                //test
                //fiend.say('fiend_plan_check: есть кого геноцидить.');
                result = 2;
            }

            if(result==0) {
                //test
                // fiend.say('fiend_plan_check: геноцидить некого, всё уже собрано. Может займёмся прямыми обязаностями?');
                //цель померла, надо новую
                if(fiend.epidemy.victim==null || fiend.epidemy.victim.dead) {
                    //test
                    // fiend.say('fiend_plan_check: основная цель померла.');

                    if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead
                        && fiend.epidemy.snd.epidemy.victim!=null && !fiend.epidemy.snd.epidemy.victim.dead) {
                        //test
                        // fiend.say('fiend_plan_check: берём цель братюни.');
                        fiend.epidemy.victim=fiend.epidemy.snd.epidemy.victim;
                        result = 1;
                    } else if(fiend.epidemy.primary_target!=null
                        && .get_mob_index(fiend.epidemy.primary_target).instances.size()>0) {
                        //test
                        // fiend.say('fiend_plan_check: выбираем новую основную цель.');
                        fiend.epidemy.victim = get_victim(fiend.epidemy.primary_target);
                    } else if(fiend.epidemy.demon!=null && !fiend.epidemy.demon.dead) {
                        //test
                        // fiend.say('fiend_plan_check: ищу новую цель через демона.');
                        var minlvl;
                        for(minlvl=fiend.level-10;minlvl>=0;minlvl=minlvl-10){
                            fiend.epidemy.victim = get_one_good(fiend.epidemy.demon,minlvl,fiend.level+3);
                            if(fiend.epidemy.victim!=null) break;
                        }
                        //test
                        // if(fiend.epidemy.victim==null) fiend.say('fiend_plan_check: Неудачно.'); else fiend.say('будет атакован %1$C1.',fiend.epidemy.victim);
                    }
                    if(fiend.epidemy.victim == null) {
                        result = 0;
                    } else {
                        //test
                        // fiend.say('fiend_plan_check: есть цель.');
                        result = 1;
                        if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead){
                            //test
                            // fiend.say('fiend_plan_check: напарнику ту же цель.');
                            fiend.epidemy.snd.epidemy.victim = fiend.epidemy.victim;
                        }
                    }
                } else {
                    //test
                    // fiend.say('fiend_plan_check: цель есть, надо идти.');

                    result = 1;
                }
            }
        }
        if(result == 1) {
            //test
            // fiend.say('fiend_plan_check: перед тем как идти...');

            if(fiend.epidemy.victim.in_room == fiend.in_room) {
                //test
                //fiend.say('fiend_plan_check: уже на месте');

                result = 2;
            } else {
                //test
                // fiend.say('fiend_plan_check: еще не на месте.');
                if(fiend.epidemy.plan_way==null) {
                    //test
                    // fiend.say('fiend_plan_check: маршрута нет.');

                    if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead && fiend.epidemy.snd.in_room==fiend.in_room && fiend.epidemy.snd.epidemy.plan_way!=null) {
                        //test
                        // fiend.say('fiend_plan_check: берем маршрут у напарника.');
                        fiend.epidemy.plan_room = fiend.epidemy.snd.epidemy.plan_room;
                        fiend.epidemy.plan_waypoint = fiend.epidemy.snd.epidemy.plan_waypoint;
                        fiend.epidemy.plan_way = fiend.epidemy.snd.epidemy.plan_way.clone();
                        fiend.epidemy.plan_nextroom = null;
                    } else {
                        //test
                        // fiend.say('fiend_plan_check: строим маршрут.');
                        fiend.epidemy.plan_room = fiend.epidemy.victim.in_room;
                        fiend.epidemy.plan_waypoint = fiend.in_room;
                        fiend.epidemy.plan_nextroom = null;
                        fiend.epidemy.plan_way = find_way(fiend, fiend.epidemy.plan_room);
                        //2do не умеют стоить маршрут через запертые двери
                        if(fiend.epidemy.plan_way.size()==0) {
                            //test
                            // fiend.interpret('say ' + fiend.epidemy.victim.name + '('+fiend.epidemy.victim.pIndexData.vnum+')'+' находится в '+fiend.epidemy.victim.in_room.name+'. Пожалуй убьем другого... и вычеркнем из списка демона!');
                            //вычеркиваем из списка демона если демон еще жив
                            if(!fiend.epidemy.demon.dead)
                                fiend.epidemy.demon.epidemy.victimsVnums.sub(fiend.epidemy.victim.pIndexData.vnum);
                            if(fiend.epidemy.snd!=null
                                && fiend.epidemy.snd.epidemy.victim==fiend.epidemy.victim) {
                                //test
                                // fiend.interpret('say вычеркиваем у напарника!');
                                fiend.epidemy.snd = null;
                            }
                            fiend.epidemy.victim = null;
                            //clearPlan(fiend);
                            result = 0;
                        } else {
                            if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead && fiend.epidemy.snd.in_room==fiend.in_room) {
                                //test
                                // fiend.say('fiend_plan_check: напарнику тот же маршрут.');
                                fiend.epidemy.snd.epidemy.plan_room = fiend.epidemy.plan_room;
                                fiend.epidemy.snd.epidemy.plan_waypoint = fiend.epidemy.plan_waypoint;
                                fiend.epidemy.snd.epidemy.plan_way = fiend.epidemy.plan_way.clone();
                                fiend.epidemy.snd.epidemy.plan_nextroom = null;
                            }
                        }
                    }
                }
            }
        }
        if(result == 2) {
            //test
            //fiend.say('fiend_plan_check: собираемся кого-то бить');

            if((fiend.epidemy.victim != null && fiend.epidemy.victim.dead)
                && (fiend.epidemy.genocide != null && fiend.epidemy.genocide.dead)) {
                fiend.epidemy.victim = null;
                fiend.epidemy.genocide = null;
                result = 0;
                //test
                // fiend.say('fiend_plan_check: все мертвы - сброс цели.');
            }
        }
        //test
        // fiend.say('fiend_plan_check: end -> План будет - '+result);
        return result;
    };

    make_your_move = function(mob) {
        this = .tmp.epidemy;
        //test
        // mob.interpret('say make_your_move: start!');

        //на эту проверку не должно попадать, но вдруг...
        if(mob.fighting!=null) {
            //test
            // mob.interpret('say make_your_move: [ВНЕЗАПНО!] break -> Дерусь! Некогда гулять!!!');
            return;
        }

        if(mob.epidemy.plan_way == null) {
            //не должно сюда попадать

            //test
            // mob.interpret('say make_your_move: [ВНЕЗАПНО!] нет маршрута... Бедааааа!');

            mob.epidemy.plan = null;
        } else {
            //test
            // mob.interpret('say make_your_move: Сверимся с маршрутом!!!');
            if(mob.epidemy.plan_waypoint==null){
                //test
                // mob.interpret('say make_your_move: ГДЕ Я???');
                clearPlan(mob);//.epidemy.plan = null;
            } else if(mob.epidemy.plan_waypoint != mob.in_room) {
                //test
                // mob.interpret('say make_your_move: Сбился с пути, пытаюсь вернуться на маршрут!!!');
                if(back_on_way(mob)) {
                    //test
                    // mob.interpret('say make_your_move: Cнова на маршруте!!!');
                } else {
                    //test
                    // mob.interpret('say make_your_move: (чистим всё) Поретялося я! Нужен новый маршрут!!!');
                    clearPlan(mob);
                }
            } else {
                //test
                // mob.interpret('say make_your_move: направляюсь в '+mob.epidemy.plan_room.name+'('+mob.epidemy.plan_room.vnum+')');
                if(mob.epidemy.plan_nextroom==null) {
                    if(mob.epidemy.plan_way.size()==0) {
                        if(mob.in_room!=mob.epidemy.plan_room) {
                            //test
                            // mob.interpret('say make_your_move: Маршрут закончился, на место не прибыли. Может где-то рядом?');
                            if (back_on_way(mob)) {
                                //test
                                // mob.interpret('say make_your_move: Снова на маршруте!!!');
                            } else {
                                //test
                                // mob.interpret('say make_your_move: (чистим всё) Поретялася я! Нужен новый маршрут!!!');
                                clearPlan(mob);
                            }
                        } else {
                            mob.epidemy.plan_room = where_is_victim(mob);
                            if(mob.epidemy.plan_room==null) {
                                //test
                                //mob.interpret('say make_your_move: (чистим всё) цель, возможно, переместилась');
                                clearPlan(mob);
                            } else {
                                //test
                                //mob.interpret('say make_your_move: цель найдена! преследуем!!!');
                                mob.epidemy.plan_nextroom = mob.epidemy.plan_room;
                                mob.epidemy.plan_waypoint = mob.in_room;
                                if(mob.epidemy.snd!=null
                                    && mob.epidemy.snd.in_room==mob.in_room
                                    && mob.epidemy.snd.victim==mob.epidemy.victim) {
                                    mob.epidemy.snd.plan_nextroom = mob.epidemy.plan_nextroom;
                                    mob.epidemy.snd.plan_waypoint = mob.epidemy.plan_waypoint;
                                }
                            }
                        }
                    } else {
                        mob.epidemy.plan_nextroom = mob.epidemy.plan_way.front();
                        mob.epidemy.plan_way.pop_front();
                        //test
                        // mob.interpret('say make_your_move: Выбираем из маршрута следующую комнату - '+mob.epidemy.plan_nextroom.name+'('+mob.epidemy.plan_nextroom.vnum+')');
                    }
                } else {
                    //2do
                    //getExitFlags        (имя или номер выхода): флаги этого выхода (таблица .tables.exit_flags)
                    //.tables.exit_flags.closed locked isdoor
                    //test
                    //mob.interpret('say make_your_move: Что с выходом?');
                    var door;
                    door = mob.in_room.doorTo(mob.epidemy.plan_nextroom);
                    if(door < 0) {
                        //сюда тоже не должно попадать, но вдруг...
                        //test
                        mob.interpret('say make_your_move: [ВНЕЗАПНО!] (чистим всё) В нужную комнату от сюда не попасть.');
                        clearPlan(mob);//.epidemy.plan = null;
                    }else{
                        if(mob.in_room.getExitFlags(door) & .tables.exit_flags.closed){
                            //test
                            // mob.interpret('say make_your_move: здесь закрытая дверь.');
                            if(mob.in_room.getExitFlags(door) & .tables.exit_flags.locked) {
                                //test
                                // mob.interpret('say make_your_move: дверь закрыта. еще и заперта!!!');
                                mob.recho('%1$^C1 дергает за ручку %2$N2.',mob,mob.in_room.exitShortDescr(door));
                                //mob.interpret('say и похоже заперта.');
                            } else {
                                //test
                                // mob.interpret('say make_your_move: Войдем без стука... прямо в '+mob.in_room.exitKeyword(door).getOneArgument() + ' что на '+mob.in_room.doorName(door));
                                //открывать нужно правильную дверь
                                //зря Руфину тиранил - в комнате может быть несколько выходов с одинаковыми кейвордами
                                //mob.interpret('open '+mob.in_room.exitKeyword(door).getOneArgument());
                                mob.interpret('open '+mob.in_room.doorName(door)); // doorName() вернет название направления

                                //mob.in_room.open(door);
                                //mob.recho('%1$^C1 открывает %2$N4.',mob,mob.in_room.exitShortDescr(door));
                            }
                        } else {
                            //test
                            // mob.interpret('say make_your_move: Пробуем шагнуть из '+mob.in_room.name+'('+mob.in_room.vnum+') в '+mob.epidemy.plan_nextroom.name+'('+mob.epidemy.plan_nextroom.vnum+')');
                            if(mob.in_room == mob.epidemy.plan_nextroom
                                || mob.move_char(door)){
                                //test
                                // mob.interpret('say make_your_move: Получилось. Я пришел в '+mob.in_room.name+'('+mob.in_room.vnum+')');
                                mob.epidemy.plan_waypoint = mob.epidemy.plan_nextroom;
                                mob.epidemy.plan_nextroom = null;
                                if(mob.in_room == mob.epidemy.plan_room) {
                                    //test
                                    // mob.interpret('say make_your_move: Похоже я на месте! Что дальше?');
                                    /*if(mob.epidemy.plan<3)
                                        clearPlan(mob);
                                    mob.epidemy.plan_room = mob.in_room;*/
                                }
                            } else {
                                //test
                                // mob.interpret('say make_your_move: [plan=null] [ВНЕЗАПНО!!!] Беда однако. Не могу пройти в '+mob.epidemy.plan_nextroom.name+'('+mob.epidemy.plan_nextroom.vnum+')!');
                                mob.epidemy.plan = null;
                                //.tmp.epidemy.clearGPS(fiend);
                            }
                        }
                    }
                }
            }
        }
        //test
        // mob.interpret('say make_your_move: end!');
    };
    back_on_way = function(mob) {
        if(mob.move_char(mob.in_room.doorTo(mob.epidemy.plan_waypoint))) {
            //test
            // mob.interpret('say back_on_way: Получилось!');
            return true;
        }
        //test
        // mob.interpret('say back_on_way: nope!');
        return false;
    };
    where_is_victim = function(mob) {
        var nextroom;
        for(nextdoor in mob.in_room.exits(mob)) {
            if(mob.in_room.getExitFlags(nextdoor) & .tables.exit_flags.locked)
                continue;
            nextroom = mob.in_room.getRoom(nextdoor);
            for(nextmob in nextroom.ppl) {
                if(nextmob==mob.epidemy.victim)
                    return nextroom;
            }
        }
        return null;
    };

    //loot
    get_equiped_armor = function(obj,mob) {
        var i,c,l,wl,eq;
        if(obj.wear_locations.size()>1) {
            l = obj.wear_locations.keys.clone();
            c = l.size();
            for(i=0;i<c;i=i+1) {
                wl = l.back();
                l.pop_back();

                eq = mob.get_eq_char(wl);

                if(eq==null) {
                    obj.wear_loc = wl;
                }

                if(obj.eq==null && i==0 && eq!=null) {
                    obj.eq = eq;
                    obj.wear_loc = wl;
                } else {
                    if(eq!=null && obj.eq!=null){
                        if(is_better_armor(eq, obj.eq)) {
                            obj.eq=eq;
                            obj.wear_loc = eq.wear_loc;
                        }
                    } else {
                        obj.eq=null;
                    }
                }
            }
        } else {
            obj.wear_loc = obj.wear_locations.keys.back();
            obj.eq = mob.get_eq_char(obj.wear_loc);
        }
        return obj;
    };
    is_better_armor = function(obj,newobj) {
        if(obj.item_type!=.tables.item_table.armor && newobj.item_type==.tables.item_table.armor) {
            return true;
        }
        if(obj.item_type==.tables.item_table.armor && newobj.item_type!=.tables.item_table.armor) {
            return false;
        }
        if(obj.item_type!=.tables.item_table.armor && newobj.item_type!=.tables.item_table.armor) {
            if(newobj.level > obj.level) {
                return true;
            }
        }
        if(newobj.value0+newobj.value1+newobj.value2+newobj.value3+newobj.value4 > obj.value0+obj.value1+obj.value2+obj.value3+obj.value4) {
            return true;
        }

        return false;
    };

    wear_item = function(mob,t,item,replaced) {
    .scheduler.sleep(1);

        if(mob.dead
            || (t.conteiner!=null && t.conteiner.dead)
            || (item.dead)){
            return false;
        }
        //подбираем или достаем из контейнера
        //test
        //mob.say('wear_item: get %1$O1',item);
        mob.recho(t.get_msg, mob, item, t.conteiner);
        item.obj_to_char(mob);

        //снимаем и выбрасываем, если экипирован
        if(replaced!=null) {
        .scheduler.sleep(1);
            if(mob.dead) return false;

            //если уже не экипировано (н-р: разоружили) пропускаем
            if(mob.get_eq_char(t.wear_loc)!=null) {
                //test
                //mob.say('wear_item: remove %1$O1',replaced);
                mob.recho(t.remove_msg, mob, replaced);
                replaced.unequip();
                if(replaced.item_type == .tables.item_table.weapon) {
                    mob.epidemy.has_weapon = false;
                }
            }

        .scheduler.sleep(1);
            if(mob.dead) return false;
            //выбрасываем если это еще у нас
            if(mob.inventory.has(replaced)) {
                //test
                //mob.say('wear_item: drop %1$O1',replaced);
                mob.recho(t.drop_msg, mob, replaced);
                replaced.obj_to_room(mob.in_room);
            }
        }

    .scheduler.sleep(1);
        if(mob.dead) return;
        //одеваем если у нас в инвентаре
        if(mob.inventory.has(item)) {
            //test
            //mob.say('wear_item: wear %1$O1',item);
            if(mob.get_eq_char(t.wear_loc)==null) {
                mob.recho(t.wear_msg, mob, item);
                item.equip(t.wear_loc);
                if(item.item_type == .tables.item_table.weapon) {
                    mob.epidemy.has_weapon = true;
                }
            }
        } else {
            //что-то пошло не так;
            return false;
        }

    .scheduler.sleep(1);
        return true;
    };
    scavenge = function(mob,items,corpse) {

        mob.epidemy.last_room_looted = mob.in_room;
        //test
         /*if(corpse==null)
             mob.say('будем лутить '+items.size()+' штук.');
         else
             mob.say('будем лутить из трупа '+items.size()+' штук.');
*/
        this = .tmp.epidemy;
        var cl, ci, cc, c, t;
        var il, ii, ic, i;
        var eq, eq_l, wloc;
        var obj, str;

        il = items.clone();
        ic = il.size();
        for(ii=0;ii<ic;ii=ii+1) {
            if(mob.dead) return false;
            i = il.back();
            il.pop_back();

            if(i.dead) {
                //test
                //  mob.say('a уже тю-тю! ('+ii+')');
                mob.epidemy.last_room_looted = null;
                return false;
            } else if ((corpse==null && i.in_room!=mob.in_room) || (corpse!=null && i.in_obj!=corpse)) {
                //test
                //  mob.say('а %1$O1 кто-то уже упёр. ('+ii+')',i);
                mob.epidemy.last_room_looted = null;
                return false;
            }
            //test
            // mob.say('таaaксcc... %1$O1...',i);

            if(i.item_type==.tables.item_table.npc_corpse) {
                if(!scavenge(mob, i.items, i)) {
                    mob.epidemy.last_room_looted = null;
                    return false;
                }
            } else {
                //если деремся, то хватаем только оружие.
                if(mob.fighting != null && i.item_type != .tables.item_table.weapon) {
                    //test
                    // mob.say('таaaксcc... %1$O1 - совсем не оружие',i);
                    continue;

                }

                //test
                // mob.say('%1$O1 '+i.level+' левела, мой левел - '+mob.level,i);
                if(i.level>mob.level+3 || !mob.can_see_obj(i) || !mob.can_get_obj(i))
                    continue;

                //test
                // mob.say('могу поднять %1$O1, могу видеть.',i);

                t = .Map();
                t.conteiner = corpse;
                if(corpse==null) {
                    t.get_msg = '%1$^C1 берет %2$O4.';
                } else {
                    t.get_msg = '%1$^C1 берет %2$O4 из %3$O2.';
                }
                t.drop_msg = '%1$^C1 бросает %2$O4.';
                t.remove_msg = '%1$^C1 снимает %2$O4.';

                if(i.item_type == .tables.item_table.money)
                {
                    str='';
                    if(i.value0!=0){
                        if(i.value0==1)
                            str=str+'серебряную';
                        else
                            str=str+i.value0+' серебряных';
                    }
                    if(i.value1!=0) {
                        if(str!='')
                            str=str+' и ';
                        if(i.value1==1)
                            str=str+'золотую';
                        else
                            str=str+i.value1+' золотых';
                    }
                    if(i.value0+i.value1 == 1)
                        str=str+' монету';
                    else
                        str=str+' монеты';

                    if(corpse==null)
                        str='%1$^C1 берет '+str+'.';
                    else
                        str='%1$^C1 берет '+str+' из %2$O2.';

                    mob.recho(str,mob,corpse);
                    mob.gold=mob.gold+i.value1;
                    mob.silver=mob.silver+i.value0;

                    i.extract(true);

                }
            else  if(i.item_type == .tables.item_table.container)
                {
                    //t = 'container';
                }
            else if(i.item_type == .tables.item_table.light)
                {
                    t.remove_msg = '%1$^C1 гасит свет, исходящий от %2$O2.';
                    t.wear_msg = '%1$^C1 зажигает %2$O4 и берет его в руки.';
                    t.wear_loc = 'light';

                    eq = mob.get_eq_char(t.wear_loc);
                    if(eq==null || i.level>eq.level) {
                        if(!wear_item(mob,t,i,eq)){
                            mob.epidemy.last_room_looted = null;
                            return false;
                        }
                    } else {
                        //test
                        // mob.say('моё %1$O1, похоже, лучше...',eq);
                    }
                }
            else if(i.item_type == .tables.item_table.weapon)
                {
                    t.wear_msg = '%1$^C1 вооружается %2$O5.';
                    t.wear_loc = 'wield';

                    eq = mob.get_eq_char(t.wear_loc);
                    if(eq==null || ((i.value2+1)*i.value1/2)>((eq.value2+1)*eq.value1/2)){
                        if(!wear_item(mob,t,i,eq)){
                            mob.epidemy.last_room_looted = null;
                            return false;
                        }
                    } else {
                        //test
                        // mob.say('моё %1$O1, похоже, лучше...',eq);
                    }
                }
            else if(i.item_type == .tables.item_table.armor
                || i.item_type == .tables.item_table.treasure
                || i.item_type == .tables.item_table.jewelry
                || i.item_type == .tables.item_table.gem)
                {
                    obj=.Map();
                    obj.wear_locations=.Array();
                    if(i.wear_flags&.tables.wear_flags.wear_finger) {
                    obj.wear_locations['finger_l'] = '%1$^C1 надевает %2$O4 на левый палец.';
                    obj.wear_locations['finger_r'] = '%1$^C1 надевает %2$O4 на правый палец.';
                } else if(i.wear_flags&.tables.wear_flags.wear_neck) {
                    obj.wear_locations['neck_1'] = '%1$^C1 надевает %2$O4 вокруг шеи.';
                    obj.wear_locations['neck_2'] = '%1$^C1 надевает %2$O4 вокруг шеи.';
                } else if(i.wear_flags&.tables.wear_flags.wear_wrist) {
                    obj.wear_locations['wrist_l'] = '%1$^C1 надевает %2$O4 вокруг левого запястья.';
                    obj.wear_locations['wrist_r'] = '%1$^C1 надевает %2$O4 вокруг правого запястья.';
                } else if(i.wear_flags&.tables.wear_flags.wear_body) {
                    obj.wear_locations['body'] = '%1$^C1 надевает %2$O4 на тело.';
                } else if(i.wear_flags&.tables.wear_flags.wear_head) {
                    obj.wear_locations['head'] = '%1$^C1 надевает %2$O4 на голову.';
                } else if(i.wear_flags&.tables.wear_flags.wear_legs) {
                    obj.wear_locations['legs'] = '%1$^C1 надевает %2$O4 на бедра.';
                } else if(i.wear_flags&.tables.wear_flags.wear_feet) {
                    obj.wear_locations['feet'] = '%1$^C1 надевает %2$O4 на ноги.';
                }  else if(i.wear_flags&.tables.wear_flags.wear_hands) {
                    obj.wear_locations['hands'] = '%1$^C1 надевает %2$O4 на руки.';
                } else if(i.wear_flags&.tables.wear_flags.wear_arms) {
                    obj.wear_locations['arms'] = '%1$^C1 надевает %2$O4 на плечи.';
                } else if(i.wear_flags&.tables.wear_flags.wear_shield) {
                    obj.wear_locations['shield'] = '%1$^C1 надевает %2$O4 как щит.';
                } else if(i.wear_flags&.tables.wear_flags.wear_about) {
                    obj.wear_locations['about'] = '%1$^C1 накидывает %2$O4 вокруг тела.';
                } else if(i.wear_flags&.tables.wear_flags.wear_waist) {
                    obj.wear_locations['waist'] = '%1$^C1 надевает %2$O4 вокруг талии.';
                } else if(i.wear_flags&.tables.wear_flags.wear_face) {
                    obj.wear_locations['face'] = '%1$^C1 надевает %2$O4 прикрывая лицо.';
                } else if(i.wear_flags&.tables.wear_flags.hold) {
                    obj.wear_locations['hold'] = '%1$^C1 берёт в руки %2$O4.';
                } else if(i.wear_flags&.tables.wear_flags.wear_float) {
                    obj.wear_locations['float'] = '%1$^C1 запускает %2$O4 кружиться вокруг себя.';
                } else {
                    // 		mob.ptc('-['+c.pIndexData.vnum+'] '+c.name+' ('+t+');\n');
                    continue;
                }

                    obj = get_equiped_armor(obj,mob);

                    t.wear_msg = obj.wear_locations[obj.wear_loc];
                    t.wear_loc = obj.wear_loc;

                    if(obj.eq==null || is_better_armor(obj.eq,i)) {
                        if(!wear_item(mob,t,i,obj.eq)){
                            mob.epidemy.last_room_looted = null;
                            return false;
                        }
                    } else {
                        //test
                        // mob.say('моё %1$O1, похоже, лучше...',obj.eq);
                    }

                }

            }
        }

        return true;
    };
    time_to_loot = function (mob) {
        //test
        //mob.say('fiend.time_to_loot.');
        var mob_list, i, count, m;
        mob_list = mob.in_room.list_mob_vnum(mob.pIndexData.vnum);
        count = mob_list.size();
        //test
        //mob.say('нас таких тут аж %1$S.',count);
        for(i=0;i<count;i=i+1) {
            m = mob_list.back();

            //test
            //mob.say(''+i+' - %1$C1',m);

            mob_list.pop_back();
            if(m.epidemy.plan==4 ) {
                //test
                //mob.say('%1$C1 уже грабит.',m);
                return false;
            }
        }
        //test
        //mob.say('ну, значит прийдется мне...');
        return true;
    };
    loot = function(mob){
        this = .tmp.epidemy;
        if(mob.in_room.items.size()>0) {
            //test
            //mob.say('о! тут что-то есть!');
            return true;
        } else {
            return false;
        }
    };
    //end loot
    // проверка, есть ли кого отгеноцидить
    genocide = function(fiend) {
        //test
        //fiend.say('genocide()');
        for(ch in fiend.in_room.ppl) {
            //test
            //fiend.say('genocide:%1$C1 alig:'+ch.alignment+' lvl:'+ch.level+'['+(fiend.level+3)+']',ch);
            if(ch==fiend)
                continue;

            if(ch.alignment < 350 || ch.level > fiend.level+3) {
                //test
                //fiend.say('genocide:он или злой, или крутой - пусть живёт');
                //он или злой, или крутой - пусть живёт
                continue;
            }
            if(!ch.is_npc() && ch.level < fiend.level-3){
                //слабых игоков не трогаем
                continue;
            }

            if(ch.imm_flags & .tables.imm_flags.weapon) {
                //в сад этих пуленепробиваемых засранцев
                continue;
            }
            if(fiend.epidemy.victim==ch) {
                //test
                // fiend.say('genocide:%1$C1 - цель. оставим на потом',ch);
                continue;
            }

            return ch;
        }
        //test
        // fiend.say('genocide: нет клиентов',ch);
        return null;
    };

    fill_fiend_triggers = function(Fiend){
        this = Fiend;

        onSpec = function(fiend) {
            this = .tmp.epidemy;

            if(fiend.dead) { // || fiend.fighting!=null
                return;
            } else if(fiend.epidemy.plan == null) {
                //test
                // fiend.say('postSpec[plan:null]: Плана нет.');
                if(fiend.epidemy.primary_target!=null) {
                    fiend.epidemy.plan = fiend_plan_check(fiend);
                }
            }
        };

        postSpec = function(fiend) {
            try{
                //test
                // if(fiend.epidemy.plan!=null) fiend.say('postSpec[plan '+fiend.epidemy.plan+'] start'); else fiend.say('postSpec[plan null] start');

                this = .tmp.epidemy;

                if(fiend.dead)
                    return;

                if(!(fiend.position&.tables.position_table.stand)){
                    fiend.interpret('stand');
                    return;
                }

                if(fiend.epidemy.plan == 0) {
                    if(fiend.epidemy.snd!=null
                        && !fiend.epidemy.snd.dead
                        && fiend.epidemy.snd.epidemy.plan==null
                        && fiend.epidemy.snd.in_room==fiend.in_room
                        && fiend.epidemy.snd.fighting==null) {
                        fiend.epidemy.snd.epidemy.plan=fiend.epidemy.plan;
                    }
                    //test
                    // fiend.interpret('say postSpec[plan 0]: Я видимо должен что-то сделать, но не знаю что?!');
                } else {
                    .scheduler.sleep(.number_range(0,5)); //пытаюсь разнести чуток по времени
                    if(fiend.dead || fiend.epidemy.plan==null)
                        return;

                    if(fiend.epidemy.plan == 1) { //ходим
                        make_your_move(fiend);
                    } else if(fiend.epidemy.plan == 2) { //бьем
                        if(fiend.fighting==null) {
                            var victim;

                            if(fiend.epidemy.genocide!=null && !fiend.epidemy.genocide.dead
                                && fiend.epidemy.genocide.in_room==fiend.in_room) {
                                victim = fiend.epidemy.genocide;
                            } else if(fiend.epidemy.victim!=null && !fiend.epidemy.victim.dead
                                && fiend.in_room == fiend.epidemy.victim.in_room) { //если добрались до цели
                                victim = fiend.epidemy.victim;
                            }

                            if(victim==null || victim.dead || victim.in_room!=fiend.in_room) {
                                clearPlan(fiend);
                            } else {
                                //2do не ввязываемся если у нас меньше 50% жизни
                                fiend.interpret('yell '+get_phrase(fiend,victim));
                                fiend.multi_hit(victim);
                            }
                        } else {
                            //test
                            // fiend.say('postSpec[plan 2]: уже дубашу %1$^C2!', fiend.fighting);
                        }
                    } else if(fiend.epidemy.plan==3) {// стоим в очереди на сбор урожая
                        //test
                        //fiend.say('postSpec[plan 3]: ready for loot.');
                        if(time_to_loot(fiend)) {
                            fiend.epidemy.plan = 4;
                        }
                    } else if(fiend.epidemy.plan==4) {//plan 4 - собираем

                        if(fiend.in_room!=fiend.epidemy.last_room_looted) {
                            //test
                            // fiend.say('postSpec[plan 4]: start looting.');
                            if(scavenge(fiend, fiend.in_room.items, corpse)){
                                //test
                                // fiend.say('postSpec[plan 4]: end looting.');

                                fiend.epidemy.plan = null;
                            } else {
                                //test
                                // fiend.say('postSpec[plan 4->3]: неудачный loot. начинаем заново.');
                                fiend.epidemy.plan = 3;
                            }
                        }
                    }
                }
                //test
                // if(fiend.epidemy.plan!=null) fiend.say('postSpec[plan '+fiend.epidemy.plan+'] end'); else fiend.say('postSpec[plan null] end');
            }catch(e) {
                //test
            .get_char_world('miyamoto').ptc('fiend.postSpec: '+e);
            }
        };

        onEntry = function(fiend) {
            //test
            // if(fiend.epidemy.plan!=null) fiend.interpret('say onEntry[план:'+fiend.epidemy.plan+'] start'); else fiend.interpret('say onEntry[план:null] start');

            if(fiend.in_room.items.size()>0 && fiend.epidemy.last_room_looted!=fiend.in_room) {
                fiend.epidemy.plan = null;
            } else if(fiend.in_room.ppl.size()>1) {
                fiend.epidemy.plan = null;
            }
        };

        onKill = function(fiend, ch) {
            this = .tmp.epidemy;
            //test
            //fiend.say('onKill[plan '+fiend.epidemy.plan+'->null]');
            fiend.epidemy.last_room_looted=null;
            fiend.epidemy.plan=null;

            if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead
                && fiend.epidemy.snd.in_room == fiend.in_room)
                fiend.epidemy.snd.epidemy.last_room_looted=null;

            if(fiend.epidemy.victim == ch) {
                clearPlan(fiend);
                if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead) {
                    clearPlan(fiend.epidemy.snd);
                }
            } else if (fiend.epidemy.genocide==ch) {
                if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead
                    && fiend.epidemy.snd.epidemy.genocide!=null
                    && fiend.epidemy.snd.epidemy.genocide==fiend.epidemy.genocide) {
                    fiend.epidemy.snd.epidemy.genocide = null;
                    fiend.epidemy.snd.epidemy.plan = null;
                }
                fiend.epidemy.genocide=null;
            }
        };

        //onFight(ch) - вызывается каждый баттл-тик (3 секунды) при сражении с ch
        onFight = function (fiend, ch) {
            this = .tmp.epidemy;
            if(fiend.get_eq_char('wield')==null && fiend.epidemy.has_weapon==true
                && (fiend.epidemy.plan==null || (fiend.epidemy.plan!=3 && fiend.epidemy.plan!=4))) {
                //test
                // if(fiend.epidemy.plan==null) fiend.interpret('say onFight[plan null] а может вооружиться?'); else fiend.interpret('say onFight[plan '+fiend.epidemy.plan+'] а может вооружиться?');
                if(loot(fiend)) {
                    //test
                    // if(fiend.epidemy.plan==null) fiend.interpret('say onFight[plan null->3] попытаемся вооружиться'); else fiend.interpret('say onFight[plan:'+fiend.epidemy.plan+'->3] попытаемся вооружиться');
                    fiend.epidemy.plan = 3;
                    fiend.epidemy.last_room_looted = null;
                    fiend.epidemy.has_weapon=false;
                }
            }
        };

        onExtract = function(fiend, count) {
            //test
            /*var fst;
            fst = 'snd';
            if(fiend.epidemy.fst)
                fst='fst';
            .tmp.epidemy.me.ptc('fiend['+fst+'].onExtract('+count+')');*/

            if(fiend.epidemy.snd!=null && !fiend.epidemy.snd.dead) {
                //убираемся из напарников
                fiend.epidemy.snd.epidemy.snd = null;
                if(fiend.epidemy.fst) {
                    //ты теперь за старшего
                    fiend.epidemy.snd.epidemy.fst = true;
                }
            }

            //выпиливаемся из списка
            if(fiend.epidemy.demon!=null && !fiend.epidemy.demon.dead) {
                fiend.epidemy.demon.epidemy.fiends.sub(fiend);
                fiend.epidemy.demon.epidemy.fiends_names[fiend.epidemy.name_key]=fiend.epidemy.demon.epidemy.fiends_names[fiend.epidemy.name_key]-1;
            }
        };

        onArea = function(fiend) {
            //test
            // fiend.say('fiend.onArea()');
            if(fiend.epidemy.plan == 0)
                fiend.epidemy.plan = null;
        };

        // не надо ничего собирать
        onCantScavenge = function(fiend,obj) {
            return true;
        };
    };
    get_phrase = function(fiend,victim){
        //test
        //me.act('get_phrase(%1$C1,%2$C1)',fiend,victim);

        this = .tmp.epidemy;
        var isDemon, isLow, phraseList,phraseListRare, result;
        isDemon = fiend.epidemy.demon!=null && !fiend.epidemy.demon.dead;
        isLow = (fiend.level-victim.level)>=10;

        if(victim.fighting!=null && victim.fighting.pIndexData==Fiend) {
            //test
            //me.ptc('get_phrase()->assist\n');
            phraseList = phrases.assist.clone();
            phraseListRare = phrases.assist_rare.clone();
            if(isLow) {
                //test
                //me.ptc('get_phrase()->low\n');
                for(str in phrases.assist_low){
                    phraseList.push_back(str);
                }
                for(str in phrases.assist_rare_low) {
                    phraseListRare.push_back(str);
                }
            }
        } else {
            //test
            //me.ptc('get_phrase()->regular\n');
            phraseList = phrases.regular.clone();
            phraseListRare = phrases.regular_rare.clone();
            if(isLow) {
                //test
                //me.ptc('get_phrase()->low\n');
                for(str in phrases.regular_low) {
                    phraseList.push_back(str);
                }
            }
            if(isDemon) {
                //test
                //me.ptc('get_phrase()->demon\n');
                for(str in phrases.regular_demon) {
                    phraseList.push_back(str);
                }
            }
        }
        //test
        // if(.chance(50)){
        if(.chance(98)){
            result =  phraseList.random();
        } else {
            result = phraseListRare.random();
        }
        //test
        //me.ptc('get_phrase()->'+result+'\n');

        if(isDemon) {
            return .fmt(result, victim, fiend.epidemy.demon);
        }else{
            return .fmt(result , victim);
        }
    };

    fill_fiends_phrases = function(){
        this = .tmp.epidemy;
        if(phrases==null) phrases=.Map();
        phrases.regular=.List();
        phrases.regular_demon=.List();
        phrases.regular_low=.List();
        phrases.regular_rare=.List();
        phrases.assist=.List();
        phrases.assist_low=.List();
        phrases.assist_rare=.List();
        phrases.assist_rare_low=.List();

        //если вписываемся за братюню
        phrases.assist.add('ЗА ЗЛО!!! ЗА ЗАХВАТЧИКОВ!!! ВО СЛАВУ ТЁМНОГО ВЛАСТЕЛИНА!!!',
            'ЗА ЗЛО!!!',
            'ЗА ТЬМУ!!!',
            'ЗА ТЬМУ ВО ВСЁМ СВЕТЕ!!!',
            'ДОБРО БУДЕТ НАКАЗАНО!!!',
            'ЗА ЗАХВАТЧИКОВ!!!',
            'ВО СЛАВУ ТЁМНОГО ВЛАСТЕЛИНА!!!',
            'ЗА ИМПЕРИЮ ЗЛА!!!',
            'ЗА ЗЛО ВО ВСЁМ МИРЕ!!!'
        );
        phrases.assist_rare.add(
            'НАШИХ БЬЮТ!!!',
            'ЗА ВСЁ ЗЛОЕ, ПРОТИВ ВСЕГО ДОБРОГО!!!',
            'ЗА ВДВ!!!',
            'СОПРОТИВЛЕНИЕ БЕСПОЛЕЗНО!'
        );
        phrases.assist_rare_low.add('УМРИ БЫСТРО!!!');

        //если просто геноцид
        phrases.regular.add('С твоей смертью, %1$C1, Империя Зла станет сильнее!!!',
            '%1$^C1, настал час расплаты за добро причиненное тобой!!!');
        phrases.regular_low.add('Зло милосердно к тебе, %1$C1, смерть твоя будет быстра!!!',
            'Сегодня твой счастливый день, %1$C1, ты умрёшь быстро!!!');
        phrases.regular_rare.add('%1$^C1, ты нам никогда не нравил%1$Gось|ся|ась! УМРИ!!!',
            'Сдохни, %1$C1, ангельское ты создание!!!',
            'Вот и всё, %1$^C1! ВОТ И ВСЁ!!!'
        );

        //собираем из частей
        var fstParts,sndParts,whatParts,isParts;
        fstParts = .List();
        sndParts = .List();
        whatParts = .List();
        isParts = .List();
        whatParts.add(
            'твои преступления против Империи Зла',
            'твои добрые дела',
            'деяния твои'
        );
        isParts.add(
            'не остались незамеченными',
            'не останутся безнаказанными'
        );
        sndParts.add(
            'приготовься к смерти',
            'ты умрёшь',
            'теперь ты умрёшь',
            'настал твой смертный час',
            'пришло время умирать'
        );
        for(snd in sndParts) {
            phrases.regular_demon.push_back('Именем %2$^C2, %1$C1, '+snd+'!');
        }
        sndParts.add(
            'приготовься умереть',
            'умри же',
            'умри'
        );
        for(snd in sndParts){
            phrases.regular.push_back('%1$^C1, прихвостень рыцарей, '+snd+'!');
        }
        for(what in whatParts){
            for(is in isParts) {
                for(snd in sndParts) {
                    phrases.regular.add(
                        // what.upperFirstChar()+' '+is+', %1$C1! '+snd.upperFirstChar()+'!',
                        // what.upperFirstChar()+', %1$C1, '+is+'! '+snd.upperFirstChar()+'!',
                        '%1$^C1, '+what+' '+is+'! '+snd.upperFirstChar()+'!'
                    );
                }
            }
        }
        fstParts.add(
            'ты выбрал не ту сторону',
            'ты слишком добр%1$Gое||а'
        );
        for(fst in fstParts){
            phrases.regular.add(
                //fst.upperFirstChar()+', %1$C1, '+', за это ты поплатишься жизнью!',
                '%1$^C1, '+fst+', за это ты поплатишься жизнью!'
            );
        }
        fstParts.add(
            'отныне здесь нет места добру',
            'во славу Тёмного Властелина',
            'во славу Империи Зла'
        );
        for(fst in fstParts){
            for(snd in sndParts) {
                phrases.regular.add(
                    //fst.upperFirstChar()+', %1$C1, '+snd+'!',
                    '%1$^C1, '+fst+', '+snd+'!'
                );
            }
        }

    };
    fill_fiends_names = function() {
        this = .tmp.epidemy;

        if(fiends_names==null) {
            fiends_names = .Array();
        }
        if(fiends_names_descr==null) {
            fiends_names_descr=.Array();
        }
        fiends_names[0] = .List(); fiends_names[0].add('lyolik','bolyk');
        fiends_names_descr['lyolik'] = 'Лёлик||а|у|а|ом|е';
        fiends_names_descr['bolyk'] = 'Болик||а|у|а|ом|е';
        fiends_names[1] = .List(); fiends_names[1].add('chuk','gek');
        fiends_names_descr['chuk'] = 'Чук||а|у|а|ом|е';
        fiends_names_descr['gek'] = 'Гек||а|у|а|ом|е';
        fiends_names[2] = .List(); fiends_names[2].add('rimsky','korsakov');
        fiends_names_descr['rimsky'] = 'Римск|ий|ого|ому|ого|им|ом';
        fiends_names_descr['korsakov'] = 'Корсаков||а|у|а|ым|е';
        fiends_names[3] = .List(); fiends_names[3].add('batman','robin');
        fiends_names_descr['batman'] = 'Бэтмен||а|у|а|ом|е';
        fiends_names_descr['robin'] = 'Робин||а|у|а|ом|е';
        fiends_names[4] = .List(); fiends_names[4].add('miya','moto');
        fiends_names_descr['miya'] = 'Ми|я|и|е|ю|ей|е';
        fiends_names_descr['moto'] = 'Мот|о|ы|е|у|ой|е';
        fiends_names[5] = .List(); fiends_names[5].add('baskin','robbins');
        fiends_names_descr['baskin'] = 'Баскин||а|у|а|ом|е';
        fiends_names_descr['robbins'] = 'Роббинс||а|у|а|ом|е';
        fiends_names[6] = .List(); fiends_names[6].add('byaka','buka');
        fiends_names_descr['byaka'] = 'Бяк|а|и|е|у|ой|е';
        fiends_names_descr['buka'] = 'Бук|а|и|е|у|ой|е';
        fiends_names[7] = .List(); fiends_names[7].add('kuala','lumpur');
        fiends_names_descr['kuala'] = 'Куал|а|ы|е|у|ой|е';
        fiends_names_descr['lumpur'] = 'Лумпур||а|у|а|ом|е';
        fiends_names[8] = .List(); fiends_names[8].add('sancho','panza');
        fiends_names_descr['sancho'] = 'Санч|о|и|е|у|ей|е';
        fiends_names_descr['panza'] = 'Панс|а|ы|е|у|ой|е';
        fiends_names[9] = .List(); fiends_names[9].add('spock','kirk');
        fiends_names_descr['spock'] = 'Спок||а|у|а|ом|е';
        fiends_names_descr['kirk'] = 'Кирк||а|у|а|ом|е';
        fiends_names[10] = .List(); fiends_names[10].add('Mario','Luigi');
        fiends_names_descr['Mario'] = 'Марио';
        fiends_names_descr['Luigi'] = 'Луидж|и|а|у|а|ем|е'; //я их специально склонял
        fiends_names[11] = .List(); fiends_names[11].add('Joker','Harley');
        fiends_names_descr['Joker'] = 'Джокер||а|у|а|ом|е';
        fiends_names_descr['Harley'] = 'Харли';
        fiends_names[12] = .List(); fiends_names[12].add('Woody','Buzz');
        fiends_names_descr['Woody'] = 'Вуди';
        fiends_names_descr['Buzz'] = 'Базз||а|у|а|ом|е';
        fiends_names[13] = .List(); fiends_names[13].add('bob','patrick');
        fiends_names_descr['bob'] = 'Боб||а|у|а|ом|е';
        fiends_names_descr['patrick'] = 'Партик||а|у|а|ом|е';
        fiends_names[14] = .List(); fiends_names[14].add('Vincent','Jules');
        fiends_names_descr['Vincent'] = 'Винсент||а|у|а|ом|е';
        fiends_names_descr['Jules'] = 'Джулс||а|у|а|ом|е';
        fiends_names[15] = .List(); fiends_names[15].add('fox','dana');
        fiends_names_descr['fox'] = 'Фокс||а|у|а|ом|е';
        fiends_names_descr['dana'] = 'Дан|a|ы|у|у|ом|е';
        fiends_names[16] = .List(); fiends_names[16].add('chip','dale');
        fiends_names_descr['chip'] = 'Чип||а|у|а|ом|е';
        fiends_names_descr['dale'] = 'Дейл||а|у|а|ом|е';
        fiends_names[17] = .List(); fiends_names[17].add('ta','hi');
        fiends_names_descr['ta'] = 'Та';
        fiends_names_descr['hi'] = 'Хи';
        fiends_names[18] = .List(); fiends_names[18].add('sha','zam');
        fiends_names_descr['sha'] = 'Ша';
        fiends_names_descr['zam'] = 'Зам||а|у|а|ом|е';
        fiends_names[19] = .List(); fiends_names[19].add('biba','boba');
        fiends_names_descr['biba'] = 'Биб|а|ы|е|у|ой|е';
        fiends_names_descr['boba'] = 'Боб|а|ы|е|у|ой|е';
        fiends_names[20] = .List(); fiends_names[20].add('right','now');
        fiends_names_descr['right'] = 'Райт||а|у|а|ом|е';
        fiends_names_descr['now'] = 'Нау||а|у|а|ом|е';
        fiends_names[21] = .List(); fiends_names[21].add('Urfin','Jus');
        fiends_names_descr['Urfin'] = 'Урфин||а|у|а|ом|е';
        fiends_names_descr['Jus'] = 'Джюс||а|у|а|ом|е';
        fiends_names[22] = .List(); fiends_names[22].add('Seeta','Geeta');
        fiends_names_descr['Seeta'] = 'Зит|а|ы|е|у|ой|е';
        fiends_names_descr['Geeta'] = 'Гит|а|ы|е|у|ой|е';
        fiends_names[23] = .List(); fiends_names[23].add('ruf','fina');
        fiends_names_descr['ruf'] = 'Руф||а|у|а|ом|е';
        fiends_names_descr['fina'] = 'Фин|а|ы|e|у|ой|е';
        fiends_names[24] = .List(); fiends_names[24].add('greby','grebu');
        fiends_names_descr['greby'] = 'Греб|и|а|у|а|ом|е';
        fiends_names_descr['grebu'] = 'Греб|у|а|у|а|ом|е';
        fiends_names[25] = .List(); fiends_names[25].add('Timon','Pumbaa');
        fiends_names_descr['Timon'] = 'Тимон||а|у|а|ом|е';
        fiends_names_descr['Pumbaa'] = 'Пумб|a|ы|е|у|ой|е';
        fiends_names[26] = .List(); fiends_names[26].add('ravshan','Jamshut');
        fiends_names_descr['ravshan'] = 'Равшан||а|у|а|ом|е';
        fiends_names_descr['Jamshut'] = 'Джамшут||а|у|а|ом|е';
        fiends_names[27] = .List(); fiends_names[27].add('tom','Jerry');
        fiends_names_descr['tom'] = 'Том||а|у|а|ом|е';
        fiends_names_descr['Jerry'] = 'Джери';
        fiends_names[28] = .List(); fiends_names[28].add('Ichtyandr','Gutiere');
        fiends_names_descr['Ichtyandr'] = 'Ихтиандр||а|у|а|ом|е';
        fiends_names_descr['Gutiere'] = 'Гуттиэре';
        fiends_names[29] = .List(); fiends_names[29].add('Gargantua','Pantagruel');
        fiends_names_descr['Gargantua'] = 'Гаргантюа';
        fiends_names_descr['Pantagruel'] = 'Пантагрюэл|ь|я|ю|я|ем|е';
        fiends_names[30] = .List(); fiends_names[30].add('hansel','gretel');
        fiends_names_descr['hansel'] = 'Гензел|ь|ь|ю|я|ем|е';
        fiends_names_descr['gretel'] = 'Гретел|ь|ь|ю|я|ем|е';
        fiends_names[31] = .List(); fiends_names[31].add('beavis','butthead');
        fiends_names_descr['beavis'] = 'Бивис||а|у|а|ом|е';
        fiends_names_descr['butthead'] = 'Баттхед||а|у|а|ом|е';
        fiends_names[32] = .List(); fiends_names[32].add('sly','arnie');
        fiends_names_descr['sly'] = 'Сла|й|я|ю|я|ем|е';
        fiends_names_descr['arnie'] = 'Арни';
        fiends_names[33] = .List(); fiends_names[33].add('Taj','Mahal');
        fiends_names_descr['Taj'] = 'Тадж||а|у|а|ем|е';
        fiends_names_descr['Mahal'] = 'Махал||а|у|а|ом|е';
        fiends_names[34] = .List(); fiends_names[34].add('Alyonushka','Ivanushka');
        fiends_names_descr['Alyonushka'] = 'Алёнушк|а|и|е|у|ой|е';
        fiends_names_descr['Ivanushka'] = 'Иванушк|а|и|е|у|ой|е';
/*
        1 Именительный: кто? что?                колдун
        2 Родительный: бред кого? чего?          колдуна
        3 Дательный: дать кому? чему?            колдуну
        4 Винительный: убить кого? что?          колдуна
        5 Творительный: управлять кем? чем?      колдуном
        6 Предложный: говорить о ком? о чём?     колдуне

        Пример склонения слова с дефисом: лягушк|а|и|е|у|ой|е-убийц|а|ы|е|у|ей|е
        */
    };

    Fiend = .get_mob_index(763);
    fill_fiends_names();
    fill_fiends_phrases();
    fill_fiend_triggers(Fiend);
}